// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package generated

import (
	"sync"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/terraform"
	"github.com/lyraproj/lyra/pkg/bridge"
	"github.com/lyraproj/puppet-evaluator/eval"
	"github.com/lyraproj/servicesdk/service"
)

var once sync.Once
var Config *terraform.ResourceConfig

func configureProvider(p *schema.Provider) {
	once.Do(func() {
		if Config == nil {
			Config = &terraform.ResourceConfig{
				Config: map[string]interface{}{},
			}
		}
		err := p.Configure(Config)
		if err != nil {
			panic(err)
		}
	})
}

func Initialize(sb *service.ServerBuilder, p *schema.Provider) {
    var evs []eval.Type
    evs = sb.RegisterTypes("TerraformGoogle", Google_app_engine_application{})
    sb.RegisterHandler("TerraformGoogle::Google_app_engine_applicationHandler", &Google_app_engine_applicationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_bigquery_dataset{})
    sb.RegisterHandler("TerraformGoogle::Google_bigquery_datasetHandler", &Google_bigquery_datasetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_bigquery_table{})
    sb.RegisterHandler("TerraformGoogle::Google_bigquery_tableHandler", &Google_bigquery_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_bigtable_instance{})
    sb.RegisterHandler("TerraformGoogle::Google_bigtable_instanceHandler", &Google_bigtable_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_bigtable_table{})
    sb.RegisterHandler("TerraformGoogle::Google_bigtable_tableHandler", &Google_bigtable_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_billing_account_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_billing_account_iam_bindingHandler", &Google_billing_account_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_billing_account_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_billing_account_iam_memberHandler", &Google_billing_account_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_billing_account_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_billing_account_iam_policyHandler", &Google_billing_account_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_binary_authorization_attestor{})
    sb.RegisterHandler("TerraformGoogle::Google_binary_authorization_attestorHandler", &Google_binary_authorization_attestorHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_binary_authorization_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_binary_authorization_policyHandler", &Google_binary_authorization_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_cloudbuild_trigger{})
    sb.RegisterHandler("TerraformGoogle::Google_cloudbuild_triggerHandler", &Google_cloudbuild_triggerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_cloudfunctions_function{})
    sb.RegisterHandler("TerraformGoogle::Google_cloudfunctions_functionHandler", &Google_cloudfunctions_functionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_cloudiot_registry{})
    sb.RegisterHandler("TerraformGoogle::Google_cloudiot_registryHandler", &Google_cloudiot_registryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_composer_environment{})
    sb.RegisterHandler("TerraformGoogle::Google_composer_environmentHandler", &Google_composer_environmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_address{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_addressHandler", &Google_compute_addressHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_attached_disk{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_attached_diskHandler", &Google_compute_attached_diskHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_autoscaler{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_autoscalerHandler", &Google_compute_autoscalerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_backend_bucket{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_backend_bucketHandler", &Google_compute_backend_bucketHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_backend_service{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_backend_serviceHandler", &Google_compute_backend_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_disk{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_diskHandler", &Google_compute_diskHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_firewall{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_firewallHandler", &Google_compute_firewallHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_forwarding_rule{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_forwarding_ruleHandler", &Google_compute_forwarding_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_global_address{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_global_addressHandler", &Google_compute_global_addressHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_global_forwarding_rule{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_global_forwarding_ruleHandler", &Google_compute_global_forwarding_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_health_check{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_health_checkHandler", &Google_compute_health_checkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_http_health_check{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_http_health_checkHandler", &Google_compute_http_health_checkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_https_health_check{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_https_health_checkHandler", &Google_compute_https_health_checkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_image{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_imageHandler", &Google_compute_imageHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_instance{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_instanceHandler", &Google_compute_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_instance_from_template{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_instance_from_templateHandler", &Google_compute_instance_from_templateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_instance_group{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_instance_groupHandler", &Google_compute_instance_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_instance_group_manager{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_instance_group_managerHandler", &Google_compute_instance_group_managerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_instance_template{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_instance_templateHandler", &Google_compute_instance_templateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_interconnect_attachment{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_interconnect_attachmentHandler", &Google_compute_interconnect_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_network{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_networkHandler", &Google_compute_networkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_network_peering{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_network_peeringHandler", &Google_compute_network_peeringHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_project_metadata{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_project_metadataHandler", &Google_compute_project_metadataHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_project_metadata_item{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_project_metadata_itemHandler", &Google_compute_project_metadata_itemHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_region_autoscaler{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_region_autoscalerHandler", &Google_compute_region_autoscalerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_region_backend_service{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_region_backend_serviceHandler", &Google_compute_region_backend_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_region_disk{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_region_diskHandler", &Google_compute_region_diskHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_region_instance_group_manager{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_region_instance_group_managerHandler", &Google_compute_region_instance_group_managerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_route{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_routeHandler", &Google_compute_routeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_router{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_routerHandler", &Google_compute_routerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_router_interface{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_router_interfaceHandler", &Google_compute_router_interfaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_router_nat{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_router_natHandler", &Google_compute_router_natHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_router_peer{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_router_peerHandler", &Google_compute_router_peerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_security_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_security_policyHandler", &Google_compute_security_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_shared_vpc_host_project{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_shared_vpc_host_projectHandler", &Google_compute_shared_vpc_host_projectHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_shared_vpc_service_project{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_shared_vpc_service_projectHandler", &Google_compute_shared_vpc_service_projectHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_snapshot{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_snapshotHandler", &Google_compute_snapshotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_ssl_certificate{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_ssl_certificateHandler", &Google_compute_ssl_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_ssl_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_ssl_policyHandler", &Google_compute_ssl_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_subnetwork{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_subnetworkHandler", &Google_compute_subnetworkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_subnetwork_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_subnetwork_iam_bindingHandler", &Google_compute_subnetwork_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_subnetwork_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_subnetwork_iam_memberHandler", &Google_compute_subnetwork_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_subnetwork_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_subnetwork_iam_policyHandler", &Google_compute_subnetwork_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_target_http_proxy{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_target_http_proxyHandler", &Google_compute_target_http_proxyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_target_https_proxy{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_target_https_proxyHandler", &Google_compute_target_https_proxyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_target_pool{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_target_poolHandler", &Google_compute_target_poolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_target_ssl_proxy{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_target_ssl_proxyHandler", &Google_compute_target_ssl_proxyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_target_tcp_proxy{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_target_tcp_proxyHandler", &Google_compute_target_tcp_proxyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_url_map{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_url_mapHandler", &Google_compute_url_mapHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_vpn_gateway{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_vpn_gatewayHandler", &Google_compute_vpn_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_compute_vpn_tunnel{})
    sb.RegisterHandler("TerraformGoogle::Google_compute_vpn_tunnelHandler", &Google_compute_vpn_tunnelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_container_analysis_note{})
    sb.RegisterHandler("TerraformGoogle::Google_container_analysis_noteHandler", &Google_container_analysis_noteHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_container_cluster{})
    sb.RegisterHandler("TerraformGoogle::Google_container_clusterHandler", &Google_container_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_container_node_pool{})
    sb.RegisterHandler("TerraformGoogle::Google_container_node_poolHandler", &Google_container_node_poolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_dataflow_job{})
    sb.RegisterHandler("TerraformGoogle::Google_dataflow_jobHandler", &Google_dataflow_jobHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_dataproc_cluster{})
    sb.RegisterHandler("TerraformGoogle::Google_dataproc_clusterHandler", &Google_dataproc_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_dataproc_job{})
    sb.RegisterHandler("TerraformGoogle::Google_dataproc_jobHandler", &Google_dataproc_jobHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_dns_managed_zone{})
    sb.RegisterHandler("TerraformGoogle::Google_dns_managed_zoneHandler", &Google_dns_managed_zoneHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_dns_record_set{})
    sb.RegisterHandler("TerraformGoogle::Google_dns_record_setHandler", &Google_dns_record_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_endpoints_service{})
    sb.RegisterHandler("TerraformGoogle::Google_endpoints_serviceHandler", &Google_endpoints_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_filestore_instance{})
    sb.RegisterHandler("TerraformGoogle::Google_filestore_instanceHandler", &Google_filestore_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_folder{})
    sb.RegisterHandler("TerraformGoogle::Google_folderHandler", &Google_folderHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_folder_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_folder_iam_bindingHandler", &Google_folder_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_folder_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_folder_iam_memberHandler", &Google_folder_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_folder_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_folder_iam_policyHandler", &Google_folder_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_folder_organization_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_folder_organization_policyHandler", &Google_folder_organization_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_kms_crypto_key{})
    sb.RegisterHandler("TerraformGoogle::Google_kms_crypto_keyHandler", &Google_kms_crypto_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_kms_crypto_key_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_kms_crypto_key_iam_bindingHandler", &Google_kms_crypto_key_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_kms_crypto_key_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_kms_crypto_key_iam_memberHandler", &Google_kms_crypto_key_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_kms_key_ring{})
    sb.RegisterHandler("TerraformGoogle::Google_kms_key_ringHandler", &Google_kms_key_ringHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_kms_key_ring_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_kms_key_ring_iam_bindingHandler", &Google_kms_key_ring_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_kms_key_ring_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_kms_key_ring_iam_memberHandler", &Google_kms_key_ring_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_kms_key_ring_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_kms_key_ring_iam_policyHandler", &Google_kms_key_ring_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_billing_account_exclusion{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_billing_account_exclusionHandler", &Google_logging_billing_account_exclusionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_billing_account_sink{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_billing_account_sinkHandler", &Google_logging_billing_account_sinkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_folder_exclusion{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_folder_exclusionHandler", &Google_logging_folder_exclusionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_folder_sink{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_folder_sinkHandler", &Google_logging_folder_sinkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_organization_exclusion{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_organization_exclusionHandler", &Google_logging_organization_exclusionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_organization_sink{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_organization_sinkHandler", &Google_logging_organization_sinkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_project_exclusion{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_project_exclusionHandler", &Google_logging_project_exclusionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_logging_project_sink{})
    sb.RegisterHandler("TerraformGoogle::Google_logging_project_sinkHandler", &Google_logging_project_sinkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_monitoring_alert_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_monitoring_alert_policyHandler", &Google_monitoring_alert_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_monitoring_group{})
    sb.RegisterHandler("TerraformGoogle::Google_monitoring_groupHandler", &Google_monitoring_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_monitoring_notification_channel{})
    sb.RegisterHandler("TerraformGoogle::Google_monitoring_notification_channelHandler", &Google_monitoring_notification_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_monitoring_uptime_check_config{})
    sb.RegisterHandler("TerraformGoogle::Google_monitoring_uptime_check_configHandler", &Google_monitoring_uptime_check_configHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_organization_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_organization_iam_bindingHandler", &Google_organization_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_organization_iam_custom_role{})
    sb.RegisterHandler("TerraformGoogle::Google_organization_iam_custom_roleHandler", &Google_organization_iam_custom_roleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_organization_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_organization_iam_memberHandler", &Google_organization_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_organization_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_organization_iam_policyHandler", &Google_organization_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_organization_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_organization_policyHandler", &Google_organization_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project{})
    sb.RegisterHandler("TerraformGoogle::Google_projectHandler", &Google_projectHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_project_iam_bindingHandler", &Google_project_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_iam_custom_role{})
    sb.RegisterHandler("TerraformGoogle::Google_project_iam_custom_roleHandler", &Google_project_iam_custom_roleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_project_iam_memberHandler", &Google_project_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_project_iam_policyHandler", &Google_project_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_organization_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_project_organization_policyHandler", &Google_project_organization_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_service{})
    sb.RegisterHandler("TerraformGoogle::Google_project_serviceHandler", &Google_project_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_services{})
    sb.RegisterHandler("TerraformGoogle::Google_project_servicesHandler", &Google_project_servicesHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_project_usage_export_bucket{})
    sb.RegisterHandler("TerraformGoogle::Google_project_usage_export_bucketHandler", &Google_project_usage_export_bucketHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_subscription{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscriptionHandler", &Google_pubsub_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_subscription_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscription_iam_bindingHandler", &Google_pubsub_subscription_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_subscription_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscription_iam_memberHandler", &Google_pubsub_subscription_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_subscription_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscription_iam_policyHandler", &Google_pubsub_subscription_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_topic{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_topicHandler", &Google_pubsub_topicHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_topic_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_topic_iam_bindingHandler", &Google_pubsub_topic_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_topic_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_topic_iam_memberHandler", &Google_pubsub_topic_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_pubsub_topic_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_pubsub_topic_iam_policyHandler", &Google_pubsub_topic_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_redis_instance{})
    sb.RegisterHandler("TerraformGoogle::Google_redis_instanceHandler", &Google_redis_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_resource_manager_lien{})
    sb.RegisterHandler("TerraformGoogle::Google_resource_manager_lienHandler", &Google_resource_manager_lienHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_runtimeconfig_config{})
    sb.RegisterHandler("TerraformGoogle::Google_runtimeconfig_configHandler", &Google_runtimeconfig_configHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_runtimeconfig_variable{})
    sb.RegisterHandler("TerraformGoogle::Google_runtimeconfig_variableHandler", &Google_runtimeconfig_variableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_service_account{})
    sb.RegisterHandler("TerraformGoogle::Google_service_accountHandler", &Google_service_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_service_account_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_service_account_iam_bindingHandler", &Google_service_account_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_service_account_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_service_account_iam_memberHandler", &Google_service_account_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_service_account_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_service_account_iam_policyHandler", &Google_service_account_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_service_account_key{})
    sb.RegisterHandler("TerraformGoogle::Google_service_account_keyHandler", &Google_service_account_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_sourcerepo_repository{})
    sb.RegisterHandler("TerraformGoogle::Google_sourcerepo_repositoryHandler", &Google_sourcerepo_repositoryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_database{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_databaseHandler", &Google_spanner_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_database_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_database_iam_bindingHandler", &Google_spanner_database_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_database_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_database_iam_memberHandler", &Google_spanner_database_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_database_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_database_iam_policyHandler", &Google_spanner_database_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_instance{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_instanceHandler", &Google_spanner_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_instance_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_instance_iam_bindingHandler", &Google_spanner_instance_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_instance_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_instance_iam_memberHandler", &Google_spanner_instance_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_spanner_instance_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_spanner_instance_iam_policyHandler", &Google_spanner_instance_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_sql_database{})
    sb.RegisterHandler("TerraformGoogle::Google_sql_databaseHandler", &Google_sql_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_sql_database_instance{})
    sb.RegisterHandler("TerraformGoogle::Google_sql_database_instanceHandler", &Google_sql_database_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_sql_ssl_cert{})
    sb.RegisterHandler("TerraformGoogle::Google_sql_ssl_certHandler", &Google_sql_ssl_certHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_sql_user{})
    sb.RegisterHandler("TerraformGoogle::Google_sql_userHandler", &Google_sql_userHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_bucket{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_bucketHandler", &Google_storage_bucketHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_bucket_acl{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_aclHandler", &Google_storage_bucket_aclHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_bucket_iam_binding{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_iam_bindingHandler", &Google_storage_bucket_iam_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_bucket_iam_member{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_iam_memberHandler", &Google_storage_bucket_iam_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_bucket_iam_policy{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_iam_policyHandler", &Google_storage_bucket_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_bucket_object{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_objectHandler", &Google_storage_bucket_objectHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_default_object_access_control{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_default_object_access_controlHandler", &Google_storage_default_object_access_controlHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_default_object_acl{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_default_object_aclHandler", &Google_storage_default_object_aclHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_notification{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_notificationHandler", &Google_storage_notificationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_object_access_control{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_object_access_controlHandler", &Google_storage_object_access_controlHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformGoogle", Google_storage_object_acl{})
    sb.RegisterHandler("TerraformGoogle::Google_storage_object_aclHandler", &Google_storage_object_aclHandler{provider: p}, evs[0])
}


type Google_app_engine_application_feature_settings_857 struct {

    Split_health_checks *bool

}

type Google_app_engine_application_url_dispatch_rule_858 struct {

    Domain *string

    Path *string

    Service *string

}

type Google_app_engine_application struct {

    Google_app_engine_application_id *string `lyra:"ignore"`

    Auth_domain *string

    Code_bucket *string

    Default_bucket *string

    Default_hostname *string

    Feature_settings *[]Google_app_engine_application_feature_settings_857

    Gcr_domain *string

    Location_id string

    Name *string

    Project *string

    Serving_status *string

    Url_dispatch_rule *[]Google_app_engine_application_url_dispatch_rule_858

}

// Google_app_engine_applicationHandler ...
type Google_app_engine_applicationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_app_engine_applicationHandler) Create(desired *Google_app_engine_application) (*Google_app_engine_application, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_app_engine_application", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_app_engine_applicationHandler) Read(externalID string) (*Google_app_engine_application, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_app_engine_application", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_app_engine_application{ Google_app_engine_application_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_app_engine_applicationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_app_engine_application", externalID)
}

type Google_bigquery_dataset_access_859_view_860 struct {

    Dataset_id string

    Project_id string

    Table_id string

}

type Google_bigquery_dataset_access_859 struct {

    Domain *string

    Group_by_email *string

    Role *string

    Special_group *string

    User_by_email *string

    View *[]Google_bigquery_dataset_access_859_view_860

}

type Google_bigquery_dataset struct {

    Google_bigquery_dataset_id *string `lyra:"ignore"`

    Access *[]Google_bigquery_dataset_access_859

    Creation_time *int

    Dataset_id string

    Default_table_expiration_ms *int

    Description *string

    Etag *string

    Friendly_name *string

    Labels *map[string]string

    Last_modified_time *int

    Location *string

    Project *string

    Self_link *string

}

// Google_bigquery_datasetHandler ...
type Google_bigquery_datasetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigquery_datasetHandler) Create(desired *Google_bigquery_dataset) (*Google_bigquery_dataset, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigquery_dataset", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_bigquery_datasetHandler) Read(externalID string) (*Google_bigquery_dataset, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigquery_dataset", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigquery_dataset{ Google_bigquery_dataset_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_bigquery_datasetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigquery_dataset", externalID)
}

type Google_bigquery_table_time_partitioning_861 struct {

    Expiration_ms *int

    Field *string

    Type string

}

type Google_bigquery_table_view_862 struct {

    Query string

    Use_legacy_sql *bool

}

type Google_bigquery_table struct {

    Google_bigquery_table_id *string `lyra:"ignore"`

    Creation_time *int

    Dataset_id string

    Description *string

    Etag *string

    Expiration_time *int

    Friendly_name *string

    Labels *map[string]string

    Last_modified_time *int

    Location *string

    Num_bytes *int

    Num_long_term_bytes *int

    Num_rows *int

    Project *string

    Schema *string

    Self_link *string

    Table_id string

    Time_partitioning *[]Google_bigquery_table_time_partitioning_861

    Type *string

    View *[]Google_bigquery_table_view_862

}

// Google_bigquery_tableHandler ...
type Google_bigquery_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigquery_tableHandler) Create(desired *Google_bigquery_table) (*Google_bigquery_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigquery_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_bigquery_tableHandler) Read(externalID string) (*Google_bigquery_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigquery_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigquery_table{ Google_bigquery_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_bigquery_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigquery_table", externalID)
}

type Google_bigtable_instance_cluster_863 struct {

    Cluster_id *string

    Num_nodes *int

    Storage_type *string

    Zone *string

}

type Google_bigtable_instance struct {

    Google_bigtable_instance_id *string `lyra:"ignore"`

    Cluster *[]Google_bigtable_instance_cluster_863

    Cluster_id *string

    Display_name *string

    Instance_type *string

    Name string

    Num_nodes *int

    Project *string

    Storage_type *string

    Zone *string

}

// Google_bigtable_instanceHandler ...
type Google_bigtable_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigtable_instanceHandler) Create(desired *Google_bigtable_instance) (*Google_bigtable_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigtable_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_bigtable_instanceHandler) Read(externalID string) (*Google_bigtable_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigtable_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigtable_instance{ Google_bigtable_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_bigtable_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigtable_instance", externalID)
}

type Google_bigtable_table struct {

    Google_bigtable_table_id *string `lyra:"ignore"`

    Instance_name string

    Name string

    Project *string

    Split_keys *[]string

}

// Google_bigtable_tableHandler ...
type Google_bigtable_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigtable_tableHandler) Create(desired *Google_bigtable_table) (*Google_bigtable_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigtable_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_bigtable_tableHandler) Read(externalID string) (*Google_bigtable_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigtable_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigtable_table{ Google_bigtable_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_bigtable_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigtable_table", externalID)
}

type Google_billing_account_iam_binding struct {

    Google_billing_account_iam_binding_id *string `lyra:"ignore"`

    Billing_account_id string

    Etag *string

    Members []string

    Role string

}

// Google_billing_account_iam_bindingHandler ...
type Google_billing_account_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_billing_account_iam_bindingHandler) Create(desired *Google_billing_account_iam_binding) (*Google_billing_account_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_billing_account_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_billing_account_iam_bindingHandler) Read(externalID string) (*Google_billing_account_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_billing_account_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_binding{ Google_billing_account_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_billing_account_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_billing_account_iam_binding", externalID)
}

type Google_billing_account_iam_member struct {

    Google_billing_account_iam_member_id *string `lyra:"ignore"`

    Billing_account_id string

    Etag *string

    Member string

    Role string

}

// Google_billing_account_iam_memberHandler ...
type Google_billing_account_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_billing_account_iam_memberHandler) Create(desired *Google_billing_account_iam_member) (*Google_billing_account_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_billing_account_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_billing_account_iam_memberHandler) Read(externalID string) (*Google_billing_account_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_billing_account_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_member{ Google_billing_account_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_billing_account_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_billing_account_iam_member", externalID)
}

type Google_billing_account_iam_policy struct {

    Google_billing_account_iam_policy_id *string `lyra:"ignore"`

    Billing_account_id string

    Etag *string

    Policy_data string

}

// Google_billing_account_iam_policyHandler ...
type Google_billing_account_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_billing_account_iam_policyHandler) Create(desired *Google_billing_account_iam_policy) (*Google_billing_account_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_billing_account_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_billing_account_iam_policyHandler) Read(externalID string) (*Google_billing_account_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_billing_account_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_policy{ Google_billing_account_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_billing_account_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_billing_account_iam_policy", externalID)
}

type Google_binary_authorization_attestor_attestation_authority_note_864_public_keys_865 struct {

    Ascii_armored_pgp_public_key string

    Comment *string

    Id *string

}

type Google_binary_authorization_attestor_attestation_authority_note_864 struct {

    Delegation_service_account_email *string

    Note_reference string

    Public_keys *[]Google_binary_authorization_attestor_attestation_authority_note_864_public_keys_865

}

type Google_binary_authorization_attestor struct {

    Google_binary_authorization_attestor_id *string `lyra:"ignore"`

    Attestation_authority_note []Google_binary_authorization_attestor_attestation_authority_note_864

    Description *string

    Name string

    Project *string

}

// Google_binary_authorization_attestorHandler ...
type Google_binary_authorization_attestorHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_binary_authorization_attestorHandler) Create(desired *Google_binary_authorization_attestor) (*Google_binary_authorization_attestor, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_binary_authorization_attestor", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_binary_authorization_attestorHandler) Read(externalID string) (*Google_binary_authorization_attestor, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_binary_authorization_attestor", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_binary_authorization_attestor{ Google_binary_authorization_attestor_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_binary_authorization_attestorHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_binary_authorization_attestor", externalID)
}

type Google_binary_authorization_policy_admission_whitelist_patterns_866 struct {

    Name_pattern *string

}

type Google_binary_authorization_policy_cluster_admission_rules_867 struct {

    Cluster string

    Enforcement_mode *string

    Evaluation_mode *string

    Require_attestations_by *[]string

}

type Google_binary_authorization_policy_default_admission_rule_868 struct {

    Enforcement_mode string

    Evaluation_mode string

    Require_attestations_by *[]string

}

type Google_binary_authorization_policy struct {

    Google_binary_authorization_policy_id *string `lyra:"ignore"`

    Admission_whitelist_patterns *[]Google_binary_authorization_policy_admission_whitelist_patterns_866

    Cluster_admission_rules *[]Google_binary_authorization_policy_cluster_admission_rules_867

    Default_admission_rule []Google_binary_authorization_policy_default_admission_rule_868

    Description *string

    Project *string

}

// Google_binary_authorization_policyHandler ...
type Google_binary_authorization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_binary_authorization_policyHandler) Create(desired *Google_binary_authorization_policy) (*Google_binary_authorization_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_binary_authorization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_binary_authorization_policyHandler) Read(externalID string) (*Google_binary_authorization_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_binary_authorization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_binary_authorization_policy{ Google_binary_authorization_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_binary_authorization_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_binary_authorization_policy", externalID)
}

type Google_cloudbuild_trigger_build_869_step_870 struct {

    Args *string

    Name *string

}

type Google_cloudbuild_trigger_build_869 struct {

    Images *[]string

    Step *[]Google_cloudbuild_trigger_build_869_step_870

    Tags *[]string

}

type Google_cloudbuild_trigger_trigger_template_871 struct {

    Branch_name *string

    Commit_sha *string

    Dir *string

    Project *string

    Repo_name *string

    Tag_name *string

}

type Google_cloudbuild_trigger struct {

    Google_cloudbuild_trigger_id *string `lyra:"ignore"`

    Build *[]Google_cloudbuild_trigger_build_869

    Description *string

    Filename *string

    Project *string

    Substitutions *map[string]string

    Trigger_template *[]Google_cloudbuild_trigger_trigger_template_871

}

// Google_cloudbuild_triggerHandler ...
type Google_cloudbuild_triggerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_cloudbuild_triggerHandler) Create(desired *Google_cloudbuild_trigger) (*Google_cloudbuild_trigger, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_cloudbuild_trigger", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_cloudbuild_triggerHandler) Read(externalID string) (*Google_cloudbuild_trigger, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_cloudbuild_trigger", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudbuild_trigger{ Google_cloudbuild_trigger_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_cloudbuild_triggerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_cloudbuild_trigger", externalID)
}

type Google_cloudfunctions_function_event_trigger_872_failure_policy_873 struct {

    Retry bool

}

type Google_cloudfunctions_function_event_trigger_872 struct {

    Event_type string

    Failure_policy *[]Google_cloudfunctions_function_event_trigger_872_failure_policy_873

    Resource string

}

type Google_cloudfunctions_function struct {

    Google_cloudfunctions_function_id *string `lyra:"ignore"`

    Available_memory_mb *int

    Description *string

    Entry_point *string

    Environment_variables *map[string]string

    Event_trigger *[]Google_cloudfunctions_function_event_trigger_872

    Https_trigger_url *string

    Labels *map[string]string

    Name string

    Project *string

    Region *string

    Retry_on_failure *bool

    Runtime *string

    Source_archive_bucket string

    Source_archive_object string

    Timeout *int

    Trigger_bucket *string

    Trigger_http *bool

    Trigger_topic *string

}

// Google_cloudfunctions_functionHandler ...
type Google_cloudfunctions_functionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_cloudfunctions_functionHandler) Create(desired *Google_cloudfunctions_function) (*Google_cloudfunctions_function, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_cloudfunctions_function", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_cloudfunctions_functionHandler) Read(externalID string) (*Google_cloudfunctions_function, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_cloudfunctions_function", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudfunctions_function{ Google_cloudfunctions_function_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_cloudfunctions_functionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_cloudfunctions_function", externalID)
}

type Google_cloudiot_registry_credentials_874 struct {

    Public_key_certificate *map[string]string

}

type Google_cloudiot_registry struct {

    Google_cloudiot_registry_id *string `lyra:"ignore"`

    Credentials *[]Google_cloudiot_registry_credentials_874

    Event_notification_config *map[string]string

    Http_config *map[string]string

    Mqtt_config *map[string]string

    Name string

    Project *string

    Region *string

    State_notification_config *map[string]string

}

// Google_cloudiot_registryHandler ...
type Google_cloudiot_registryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_cloudiot_registryHandler) Create(desired *Google_cloudiot_registry) (*Google_cloudiot_registry, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_cloudiot_registry", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_cloudiot_registryHandler) Read(externalID string) (*Google_cloudiot_registry, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_cloudiot_registry", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudiot_registry{ Google_cloudiot_registry_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_cloudiot_registryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_cloudiot_registry", externalID)
}

type Google_composer_environment_config_875_node_config_876 struct {

    Disk_size_gb *int

    Machine_type *string

    Network *string

    Oauth_scopes *[]string

    Service_account *string

    Subnetwork *string

    Tags *[]string

    Zone *string

}

type Google_composer_environment_config_875_software_config_877 struct {

    Airflow_config_overrides *map[string]string

    Env_variables *map[string]string

    Image_version *string

    Pypi_packages *map[string]string

}

type Google_composer_environment_config_875 struct {

    Airflow_uri *string

    Dag_gcs_prefix *string

    Gke_cluster *string

    Node_config *[]Google_composer_environment_config_875_node_config_876

    Node_count *int

    Software_config *[]Google_composer_environment_config_875_software_config_877

}

type Google_composer_environment struct {

    Google_composer_environment_id *string `lyra:"ignore"`

    Config *[]Google_composer_environment_config_875

    Labels *map[string]string

    Name string

    Project *string

    Region *string

}

// Google_composer_environmentHandler ...
type Google_composer_environmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_composer_environmentHandler) Create(desired *Google_composer_environment) (*Google_composer_environment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_composer_environment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_composer_environmentHandler) Read(externalID string) (*Google_composer_environment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_composer_environment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_composer_environment{ Google_composer_environment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_composer_environmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_composer_environment", externalID)
}

type Google_compute_address struct {

    Google_compute_address_id *string `lyra:"ignore"`

    Address *string

    Address_type *string

    Creation_timestamp *string

    Description *string

    Label_fingerprint *string

    Labels *map[string]string

    Name string

    Network_tier *string

    Project *string

    Region *string

    Self_link *string

    Subnetwork *string

    Users *[]string

}

// Google_compute_addressHandler ...
type Google_compute_addressHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_addressHandler) Create(desired *Google_compute_address) (*Google_compute_address, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_address", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_addressHandler) Read(externalID string) (*Google_compute_address, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_address", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_address{ Google_compute_address_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_addressHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_address", externalID)
}

type Google_compute_attached_disk struct {

    Google_compute_attached_disk_id *string `lyra:"ignore"`

    Device_name *string

    Disk string

    Instance string

    Mode *string

    Project *string

    Zone *string

}

// Google_compute_attached_diskHandler ...
type Google_compute_attached_diskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_attached_diskHandler) Create(desired *Google_compute_attached_disk) (*Google_compute_attached_disk, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_attached_disk", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_attached_diskHandler) Read(externalID string) (*Google_compute_attached_disk, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_attached_disk", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_attached_disk{ Google_compute_attached_disk_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_attached_diskHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_attached_disk", externalID)
}

type Google_compute_autoscaler_autoscaling_policy_878_cpu_utilization_879 struct {

    Target float64

}

type Google_compute_autoscaler_autoscaling_policy_878_load_balancing_utilization_880 struct {

    Target float64

}

type Google_compute_autoscaler_autoscaling_policy_878_metric_881 struct {

    Name string

    Target float64

    Type string

}

type Google_compute_autoscaler_autoscaling_policy_878 struct {

    Cooldown_period *int

    Cpu_utilization *[]Google_compute_autoscaler_autoscaling_policy_878_cpu_utilization_879

    Load_balancing_utilization *[]Google_compute_autoscaler_autoscaling_policy_878_load_balancing_utilization_880

    Max_replicas int

    Metric *[]Google_compute_autoscaler_autoscaling_policy_878_metric_881

    Min_replicas int

}

type Google_compute_autoscaler struct {

    Google_compute_autoscaler_id *string `lyra:"ignore"`

    Autoscaling_policy []Google_compute_autoscaler_autoscaling_policy_878

    Creation_timestamp *string

    Description *string

    Name string

    Project *string

    Self_link *string

    Target string

    Zone *string

}

// Google_compute_autoscalerHandler ...
type Google_compute_autoscalerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_autoscalerHandler) Create(desired *Google_compute_autoscaler) (*Google_compute_autoscaler, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_autoscaler", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_autoscalerHandler) Read(externalID string) (*Google_compute_autoscaler, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_autoscaler", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_autoscaler{ Google_compute_autoscaler_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_autoscalerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_autoscaler", externalID)
}

type Google_compute_backend_bucket struct {

    Google_compute_backend_bucket_id *string `lyra:"ignore"`

    Bucket_name string

    Creation_timestamp *string

    Description *string

    Enable_cdn *bool

    Name string

    Project *string

    Self_link *string

}

// Google_compute_backend_bucketHandler ...
type Google_compute_backend_bucketHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_backend_bucketHandler) Create(desired *Google_compute_backend_bucket) (*Google_compute_backend_bucket, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_backend_bucket", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_backend_bucketHandler) Read(externalID string) (*Google_compute_backend_bucket, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_backend_bucket", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_backend_bucket{ Google_compute_backend_bucket_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_backend_bucketHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_backend_bucket", externalID)
}

type Google_compute_backend_service_backend_882 struct {

    Balancing_mode *string

    Capacity_scaler *float64

    Description *string

    Group *string

    Max_connections *int

    Max_connections_per_instance *int

    Max_rate *int

    Max_rate_per_instance *float64

    Max_utilization *float64

}

type Google_compute_backend_service_cdn_policy_883_cache_key_policy_884 struct {

    Include_host *bool

    Include_protocol *bool

    Include_query_string *bool

    Query_string_blacklist *[]string

    Query_string_whitelist *[]string

}

type Google_compute_backend_service_cdn_policy_883 struct {

    Cache_key_policy *[]Google_compute_backend_service_cdn_policy_883_cache_key_policy_884

}

type Google_compute_backend_service_iap_885 struct {

    Oauth2_client_id string

    Oauth2_client_secret string

}

type Google_compute_backend_service struct {

    Google_compute_backend_service_id *string `lyra:"ignore"`

    Backend *[]Google_compute_backend_service_backend_882

    Cdn_policy *[]Google_compute_backend_service_cdn_policy_883

    Connection_draining_timeout_sec *int

    Custom_request_headers *[]string

    Description *string

    Enable_cdn *bool

    Fingerprint *string

    Health_checks []string

    Iap *[]Google_compute_backend_service_iap_885

    Name string

    Port_name *string

    Project *string

    Protocol *string

    Region *string

    Security_policy *string

    Self_link *string

    Session_affinity *string

    Timeout_sec *int

}

// Google_compute_backend_serviceHandler ...
type Google_compute_backend_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_backend_serviceHandler) Create(desired *Google_compute_backend_service) (*Google_compute_backend_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_backend_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_backend_serviceHandler) Read(externalID string) (*Google_compute_backend_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_backend_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_backend_service{ Google_compute_backend_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_backend_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_backend_service", externalID)
}

type Google_compute_disk_disk_encryption_key_886 struct {

    Raw_key *string

    Sha256 *string

}

type Google_compute_disk_source_image_encryption_key_887 struct {

    Raw_key *string

    Sha256 *string

}

type Google_compute_disk_source_snapshot_encryption_key_888 struct {

    Raw_key *string

    Sha256 *string

}

type Google_compute_disk struct {

    Google_compute_disk_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Disk_encryption_key *[]Google_compute_disk_disk_encryption_key_886

    Disk_encryption_key_raw *string

    Disk_encryption_key_sha256 *string

    Image *string

    Label_fingerprint *string

    Labels *map[string]string

    Last_attach_timestamp *string

    Last_detach_timestamp *string

    Name string

    Project *string

    Self_link *string

    Size *int

    Snapshot *string

    Source_image_encryption_key *[]Google_compute_disk_source_image_encryption_key_887

    Source_image_id *string

    Source_snapshot_encryption_key *[]Google_compute_disk_source_snapshot_encryption_key_888

    Source_snapshot_id *string

    Type *string

    Users *[]string

    Zone *string

}

// Google_compute_diskHandler ...
type Google_compute_diskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_diskHandler) Create(desired *Google_compute_disk) (*Google_compute_disk, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_disk", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_diskHandler) Read(externalID string) (*Google_compute_disk, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_disk", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_disk{ Google_compute_disk_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_diskHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_disk", externalID)
}

type Google_compute_firewall_allow_889 struct {

    Ports *[]string

    Protocol string

}

type Google_compute_firewall_deny_890 struct {

    Ports *[]string

    Protocol string

}

type Google_compute_firewall struct {

    Google_compute_firewall_id *string `lyra:"ignore"`

    Allow *[]Google_compute_firewall_allow_889

    Creation_timestamp *string

    Deny *[]Google_compute_firewall_deny_890

    Description *string

    Destination_ranges *[]string

    Direction *string

    Disabled *bool

    Enable_logging *bool

    Name string

    Network string

    Priority *int

    Project *string

    Self_link *string

    Source_ranges *[]string

    Source_service_accounts *[]string

    Source_tags *[]string

    Target_service_accounts *[]string

    Target_tags *[]string

}

// Google_compute_firewallHandler ...
type Google_compute_firewallHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_firewallHandler) Create(desired *Google_compute_firewall) (*Google_compute_firewall, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_firewall", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_firewallHandler) Read(externalID string) (*Google_compute_firewall, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_firewall", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_firewall{ Google_compute_firewall_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_firewallHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_firewall", externalID)
}

type Google_compute_forwarding_rule struct {

    Google_compute_forwarding_rule_id *string `lyra:"ignore"`

    Backend_service *string

    Creation_timestamp *string

    Description *string

    Ip_address *string

    Ip_protocol *string

    Ip_version *string

    Label_fingerprint *string

    Labels *map[string]string

    Load_balancing_scheme *string

    Name string

    Network *string

    Network_tier *string

    Port_range *string

    Ports *[]string

    Project *string

    Region *string

    Self_link *string

    Service_label *string

    Service_name *string

    Subnetwork *string

    Target *string

}

// Google_compute_forwarding_ruleHandler ...
type Google_compute_forwarding_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_forwarding_ruleHandler) Create(desired *Google_compute_forwarding_rule) (*Google_compute_forwarding_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_forwarding_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_forwarding_ruleHandler) Read(externalID string) (*Google_compute_forwarding_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_forwarding_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_forwarding_rule{ Google_compute_forwarding_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_forwarding_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_forwarding_rule", externalID)
}

type Google_compute_global_address struct {

    Google_compute_global_address_id *string `lyra:"ignore"`

    Address *string

    Address_type *string

    Creation_timestamp *string

    Description *string

    Ip_version *string

    Label_fingerprint *string

    Labels *map[string]string

    Name string

    Network *string

    Prefix_length *int

    Project *string

    Purpose *string

    Self_link *string

}

// Google_compute_global_addressHandler ...
type Google_compute_global_addressHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_global_addressHandler) Create(desired *Google_compute_global_address) (*Google_compute_global_address, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_global_address", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_global_addressHandler) Read(externalID string) (*Google_compute_global_address, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_global_address", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_global_address{ Google_compute_global_address_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_global_addressHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_global_address", externalID)
}

type Google_compute_global_forwarding_rule struct {

    Google_compute_global_forwarding_rule_id *string `lyra:"ignore"`

    Description *string

    Ip_address *string

    Ip_protocol *string

    Ip_version *string

    Label_fingerprint *string

    Labels *map[string]string

    Name string

    Port_range *string

    Project *string

    Region *string

    Self_link *string

    Target string

}

// Google_compute_global_forwarding_ruleHandler ...
type Google_compute_global_forwarding_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_global_forwarding_ruleHandler) Create(desired *Google_compute_global_forwarding_rule) (*Google_compute_global_forwarding_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_global_forwarding_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_global_forwarding_ruleHandler) Read(externalID string) (*Google_compute_global_forwarding_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_global_forwarding_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_global_forwarding_rule{ Google_compute_global_forwarding_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_global_forwarding_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_global_forwarding_rule", externalID)
}

type Google_compute_health_check_http_health_check_891 struct {

    Host *string

    Port *int

    Proxy_header *string

    Request_path *string

    Response *string

}

type Google_compute_health_check_https_health_check_892 struct {

    Host *string

    Port *int

    Proxy_header *string

    Request_path *string

    Response *string

}

type Google_compute_health_check_ssl_health_check_893 struct {

    Port *int

    Proxy_header *string

    Request *string

    Response *string

}

type Google_compute_health_check_tcp_health_check_894 struct {

    Port *int

    Proxy_header *string

    Request *string

    Response *string

}

type Google_compute_health_check struct {

    Google_compute_health_check_id *string `lyra:"ignore"`

    Check_interval_sec *int

    Creation_timestamp *string

    Description *string

    Healthy_threshold *int

    Http_health_check *[]Google_compute_health_check_http_health_check_891

    Https_health_check *[]Google_compute_health_check_https_health_check_892

    Name string

    Project *string

    Self_link *string

    Ssl_health_check *[]Google_compute_health_check_ssl_health_check_893

    Tcp_health_check *[]Google_compute_health_check_tcp_health_check_894

    Timeout_sec *int

    Type *string

    Unhealthy_threshold *int

}

// Google_compute_health_checkHandler ...
type Google_compute_health_checkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_health_checkHandler) Create(desired *Google_compute_health_check) (*Google_compute_health_check, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_health_check", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_health_checkHandler) Read(externalID string) (*Google_compute_health_check, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_health_check", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_health_check{ Google_compute_health_check_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_health_checkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_health_check", externalID)
}

type Google_compute_http_health_check struct {

    Google_compute_http_health_check_id *string `lyra:"ignore"`

    Check_interval_sec *int

    Creation_timestamp *string

    Description *string

    Healthy_threshold *int

    Host *string

    Name string

    Port *int

    Project *string

    Request_path *string

    Self_link *string

    Timeout_sec *int

    Unhealthy_threshold *int

}

// Google_compute_http_health_checkHandler ...
type Google_compute_http_health_checkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_http_health_checkHandler) Create(desired *Google_compute_http_health_check) (*Google_compute_http_health_check, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_http_health_check", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_http_health_checkHandler) Read(externalID string) (*Google_compute_http_health_check, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_http_health_check", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_http_health_check{ Google_compute_http_health_check_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_http_health_checkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_http_health_check", externalID)
}

type Google_compute_https_health_check struct {

    Google_compute_https_health_check_id *string `lyra:"ignore"`

    Check_interval_sec *int

    Creation_timestamp *string

    Description *string

    Healthy_threshold *int

    Host *string

    Name string

    Port *int

    Project *string

    Request_path *string

    Self_link *string

    Timeout_sec *int

    Unhealthy_threshold *int

}

// Google_compute_https_health_checkHandler ...
type Google_compute_https_health_checkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_https_health_checkHandler) Create(desired *Google_compute_https_health_check) (*Google_compute_https_health_check, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_https_health_check", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_https_health_checkHandler) Read(externalID string) (*Google_compute_https_health_check, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_https_health_check", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_https_health_check{ Google_compute_https_health_check_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_https_health_checkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_https_health_check", externalID)
}

type Google_compute_image_raw_disk_895 struct {

    Container_type *string

    Sha1 *string

    Source string

}

type Google_compute_image struct {

    Google_compute_image_id *string `lyra:"ignore"`

    Create_timeout *int

    Description *string

    Family *string

    Label_fingerprint *string

    Labels *map[string]string

    Licenses *[]string

    Name string

    Project *string

    Raw_disk *[]Google_compute_image_raw_disk_895

    Self_link *string

    Source_disk *string

}

// Google_compute_imageHandler ...
type Google_compute_imageHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_imageHandler) Create(desired *Google_compute_image) (*Google_compute_image, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_image", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_imageHandler) Read(externalID string) (*Google_compute_image, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_image", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_image{ Google_compute_image_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_imageHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_image", externalID)
}

type Google_compute_instance_attached_disk_896 struct {

    Device_name *string

    Disk_encryption_key_raw *string

    Disk_encryption_key_sha256 *string

    Mode *string

    Source string

}

type Google_compute_instance_boot_disk_897_initialize_params_898 struct {

    Image *string

    Size *int

    Type *string

}

type Google_compute_instance_boot_disk_897 struct {

    Auto_delete *bool

    Device_name *string

    Disk_encryption_key_raw *string

    Disk_encryption_key_sha256 *string

    Initialize_params *[]Google_compute_instance_boot_disk_897_initialize_params_898

    Source *string

}

type Google_compute_instance_disk_899 struct {

    Auto_delete *bool

    Device_name *string

    Disk *string

    Disk_encryption_key_raw *string

    Disk_encryption_key_sha256 *string

    Image *string

    Scratch *bool

    Size *int

    Type *string

}

type Google_compute_instance_guest_accelerator_900 struct {

    Count int

    Type string

}

type Google_compute_instance_network_901 struct {

    Address *string

    External_address *string

    Internal_address *string

    Name *string

    Source string

}

type Google_compute_instance_network_interface_902_access_config_903 struct {

    Assigned_nat_ip *string

    Nat_ip *string

    Network_tier *string

    Public_ptr_domain_name *string

}

type Google_compute_instance_network_interface_902_alias_ip_range_904 struct {

    Ip_cidr_range string

    Subnetwork_range_name *string

}

type Google_compute_instance_network_interface_902 struct {

    Access_config *[]Google_compute_instance_network_interface_902_access_config_903

    Address *string

    Alias_ip_range *[]Google_compute_instance_network_interface_902_alias_ip_range_904

    Name *string

    Network *string

    Network_ip *string

    Subnetwork *string

    Subnetwork_project *string

}

type Google_compute_instance_scheduling_905 struct {

    Automatic_restart *bool

    On_host_maintenance *string

    Preemptible *bool

}

type Google_compute_instance_scratch_disk_906 struct {

    Interface *string

}

type Google_compute_instance_service_account_907 struct {

    Email *string

    Scopes []string

}

type Google_compute_instance struct {

    Google_compute_instance_id *string `lyra:"ignore"`

    Allow_stopping_for_update *bool

    Attached_disk *[]Google_compute_instance_attached_disk_896

    Boot_disk []Google_compute_instance_boot_disk_897

    Can_ip_forward *bool

    Cpu_platform *string

    Create_timeout *int

    Deletion_protection *bool

    Description *string

    Disk *[]Google_compute_instance_disk_899

    Guest_accelerator *[]Google_compute_instance_guest_accelerator_900

    Instance_id *string

    Label_fingerprint *string

    Labels *map[string]string

    Machine_type string

    Metadata *map[string]string

    Metadata_fingerprint *string

    Metadata_startup_script *string

    Min_cpu_platform *string

    Name string

    Network *[]Google_compute_instance_network_901

    Network_interface []Google_compute_instance_network_interface_902

    Project *string

    Scheduling *[]Google_compute_instance_scheduling_905

    Scratch_disk *[]Google_compute_instance_scratch_disk_906

    Self_link *string

    Service_account *[]Google_compute_instance_service_account_907

    Tags *[]string

    Tags_fingerprint *string

    Zone *string

}

// Google_compute_instanceHandler ...
type Google_compute_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instanceHandler) Create(desired *Google_compute_instance) (*Google_compute_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_instanceHandler) Read(externalID string) (*Google_compute_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance{ Google_compute_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance", externalID)
}

type Google_compute_instance_from_template_attached_disk_908 struct {

    Device_name *string

    Disk_encryption_key_raw *string

    Disk_encryption_key_sha256 *string

    Mode *string

    Source string

}

type Google_compute_instance_from_template_boot_disk_909_initialize_params_910 struct {

    Image *string

    Size *int

    Type *string

}

type Google_compute_instance_from_template_boot_disk_909 struct {

    Auto_delete *bool

    Device_name *string

    Disk_encryption_key_raw *string

    Disk_encryption_key_sha256 *string

    Initialize_params *[]Google_compute_instance_from_template_boot_disk_909_initialize_params_910

    Source *string

}

type Google_compute_instance_from_template_guest_accelerator_911 struct {

    Count int

    Type string

}

type Google_compute_instance_from_template_network_interface_912_access_config_913 struct {

    Assigned_nat_ip *string

    Nat_ip *string

    Network_tier *string

    Public_ptr_domain_name *string

}

type Google_compute_instance_from_template_network_interface_912_alias_ip_range_914 struct {

    Ip_cidr_range string

    Subnetwork_range_name *string

}

type Google_compute_instance_from_template_network_interface_912 struct {

    Access_config *[]Google_compute_instance_from_template_network_interface_912_access_config_913

    Address *string

    Alias_ip_range *[]Google_compute_instance_from_template_network_interface_912_alias_ip_range_914

    Name *string

    Network *string

    Network_ip *string

    Subnetwork *string

    Subnetwork_project *string

}

type Google_compute_instance_from_template_scheduling_915 struct {

    Automatic_restart *bool

    On_host_maintenance *string

    Preemptible *bool

}

type Google_compute_instance_from_template_scratch_disk_916 struct {

    Interface *string

}

type Google_compute_instance_from_template_service_account_917 struct {

    Email *string

    Scopes []string

}

type Google_compute_instance_from_template struct {

    Google_compute_instance_from_template_id *string `lyra:"ignore"`

    Allow_stopping_for_update *bool

    Attached_disk *[]Google_compute_instance_from_template_attached_disk_908

    Boot_disk *[]Google_compute_instance_from_template_boot_disk_909

    Can_ip_forward *bool

    Cpu_platform *string

    Deletion_protection *bool

    Description *string

    Guest_accelerator *[]Google_compute_instance_from_template_guest_accelerator_911

    Instance_id *string

    Label_fingerprint *string

    Labels *map[string]string

    Machine_type *string

    Metadata *map[string]string

    Metadata_fingerprint *string

    Metadata_startup_script *string

    Min_cpu_platform *string

    Name string

    Network_interface *[]Google_compute_instance_from_template_network_interface_912

    Project *string

    Scheduling *[]Google_compute_instance_from_template_scheduling_915

    Scratch_disk *[]Google_compute_instance_from_template_scratch_disk_916

    Self_link *string

    Service_account *[]Google_compute_instance_from_template_service_account_917

    Source_instance_template string

    Tags *[]string

    Tags_fingerprint *string

    Zone *string

}

// Google_compute_instance_from_templateHandler ...
type Google_compute_instance_from_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_from_templateHandler) Create(desired *Google_compute_instance_from_template) (*Google_compute_instance_from_template, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_from_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_instance_from_templateHandler) Read(externalID string) (*Google_compute_instance_from_template, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_from_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_from_template{ Google_compute_instance_from_template_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_from_templateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_from_template", externalID)
}

type Google_compute_instance_group_named_port_918 struct {

    Name string

    Port int

}

type Google_compute_instance_group struct {

    Google_compute_instance_group_id *string `lyra:"ignore"`

    Description *string

    Instances *[]string

    Name string

    Named_port *[]Google_compute_instance_group_named_port_918

    Network *string

    Project *string

    Self_link *string

    Size *int

    Zone *string

}

// Google_compute_instance_groupHandler ...
type Google_compute_instance_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_groupHandler) Create(desired *Google_compute_instance_group) (*Google_compute_instance_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_instance_groupHandler) Read(externalID string) (*Google_compute_instance_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_group{ Google_compute_instance_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_group", externalID)
}

type Google_compute_instance_group_manager_auto_healing_policies_919 struct {

    Health_check string

    Initial_delay_sec int

}

type Google_compute_instance_group_manager_named_port_920 struct {

    Name string

    Port int

}

type Google_compute_instance_group_manager_rolling_update_policy_921 struct {

    Max_surge_fixed *int

    Max_surge_percent *int

    Max_unavailable_fixed *int

    Max_unavailable_percent *int

    Min_ready_sec *int

    Minimal_action string

    Type string

}

type Google_compute_instance_group_manager_version_922_target_size_923 struct {

    Fixed *int

    Percent *int

}

type Google_compute_instance_group_manager_version_922 struct {

    Instance_template string

    Name string

    Target_size *[]Google_compute_instance_group_manager_version_922_target_size_923

}

type Google_compute_instance_group_manager struct {

    Google_compute_instance_group_manager_id *string `lyra:"ignore"`

    Auto_healing_policies *[]Google_compute_instance_group_manager_auto_healing_policies_919

    Base_instance_name string

    Description *string

    Fingerprint *string

    Instance_group *string

    Instance_template *string

    Name string

    Named_port *[]Google_compute_instance_group_manager_named_port_920

    Project *string

    Rolling_update_policy *[]Google_compute_instance_group_manager_rolling_update_policy_921

    Self_link *string

    Target_pools *[]string

    Target_size *int

    Update_strategy *string

    Version *[]Google_compute_instance_group_manager_version_922

    Wait_for_instances *bool

    Zone *string

}

// Google_compute_instance_group_managerHandler ...
type Google_compute_instance_group_managerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_group_managerHandler) Create(desired *Google_compute_instance_group_manager) (*Google_compute_instance_group_manager, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_group_manager", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_instance_group_managerHandler) Read(externalID string) (*Google_compute_instance_group_manager, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_group_manager", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_group_manager{ Google_compute_instance_group_manager_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_group_managerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_group_manager", externalID)
}

type Google_compute_instance_template_disk_924_disk_encryption_key_925 struct {

    Kms_key_self_link *string

}

type Google_compute_instance_template_disk_924 struct {

    Auto_delete *bool

    Boot *bool

    Device_name *string

    Disk_encryption_key *[]Google_compute_instance_template_disk_924_disk_encryption_key_925

    Disk_name *string

    Disk_size_gb *int

    Disk_type *string

    Interface *string

    Mode *string

    Source *string

    Source_image *string

    Type *string

}

type Google_compute_instance_template_guest_accelerator_926 struct {

    Count int

    Type string

}

type Google_compute_instance_template_network_interface_927_access_config_928 struct {

    Assigned_nat_ip *string

    Nat_ip *string

    Network_tier *string

}

type Google_compute_instance_template_network_interface_927_alias_ip_range_929 struct {

    Ip_cidr_range string

    Subnetwork_range_name *string

}

type Google_compute_instance_template_network_interface_927 struct {

    Access_config *[]Google_compute_instance_template_network_interface_927_access_config_928

    Address *string

    Alias_ip_range *[]Google_compute_instance_template_network_interface_927_alias_ip_range_929

    Network *string

    Network_ip *string

    Subnetwork *string

    Subnetwork_project *string

}

type Google_compute_instance_template_scheduling_930 struct {

    Automatic_restart *bool

    On_host_maintenance *string

    Preemptible *bool

}

type Google_compute_instance_template_service_account_931 struct {

    Email *string

    Scopes []string

}

type Google_compute_instance_template struct {

    Google_compute_instance_template_id *string `lyra:"ignore"`

    Automatic_restart *bool

    Can_ip_forward *bool

    Description *string

    Disk []Google_compute_instance_template_disk_924

    Guest_accelerator *[]Google_compute_instance_template_guest_accelerator_926

    Instance_description *string

    Labels *map[string]string

    Machine_type string

    Metadata *map[string]string

    Metadata_fingerprint *string

    Metadata_startup_script *string

    Min_cpu_platform *string

    Name *string

    Name_prefix *string

    Network_interface *[]Google_compute_instance_template_network_interface_927

    On_host_maintenance *string

    Project *string

    Region *string

    Scheduling *[]Google_compute_instance_template_scheduling_930

    Self_link *string

    Service_account *[]Google_compute_instance_template_service_account_931

    Tags *[]string

    Tags_fingerprint *string

}

// Google_compute_instance_templateHandler ...
type Google_compute_instance_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_templateHandler) Create(desired *Google_compute_instance_template) (*Google_compute_instance_template, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_instance_templateHandler) Read(externalID string) (*Google_compute_instance_template, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_template{ Google_compute_instance_template_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_templateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_template", externalID)
}

type Google_compute_interconnect_attachment_private_interconnect_info_932 struct {

    Tag8021q *int

}

type Google_compute_interconnect_attachment struct {

    Google_compute_interconnect_attachment_id *string `lyra:"ignore"`

    Cloud_router_ip_address *string

    Creation_timestamp *string

    Customer_router_ip_address *string

    Description *string

    Google_reference_id *string

    Interconnect string

    Name string

    Private_interconnect_info *[]Google_compute_interconnect_attachment_private_interconnect_info_932

    Project *string

    Region *string

    Router string

    Self_link *string

}

// Google_compute_interconnect_attachmentHandler ...
type Google_compute_interconnect_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_interconnect_attachmentHandler) Create(desired *Google_compute_interconnect_attachment) (*Google_compute_interconnect_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_interconnect_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_interconnect_attachmentHandler) Read(externalID string) (*Google_compute_interconnect_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_interconnect_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_interconnect_attachment{ Google_compute_interconnect_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_interconnect_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_interconnect_attachment", externalID)
}

type Google_compute_network struct {

    Google_compute_network_id *string `lyra:"ignore"`

    Auto_create_subnetworks *bool

    Description *string

    Gateway_ipv4 *string

    Ipv4_range *string

    Name string

    Project *string

    Routing_mode *string

    Self_link *string

}

// Google_compute_networkHandler ...
type Google_compute_networkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_networkHandler) Create(desired *Google_compute_network) (*Google_compute_network, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_network", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_networkHandler) Read(externalID string) (*Google_compute_network, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_network", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_network{ Google_compute_network_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_networkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_network", externalID)
}

type Google_compute_network_peering struct {

    Google_compute_network_peering_id *string `lyra:"ignore"`

    Auto_create_routes *bool

    Name string

    Network string

    Peer_network string

    State *string

    State_details *string

}

// Google_compute_network_peeringHandler ...
type Google_compute_network_peeringHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_network_peeringHandler) Create(desired *Google_compute_network_peering) (*Google_compute_network_peering, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_network_peering", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_network_peeringHandler) Read(externalID string) (*Google_compute_network_peering, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_network_peering", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_network_peering{ Google_compute_network_peering_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_network_peeringHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_network_peering", externalID)
}

type Google_compute_project_metadata struct {

    Google_compute_project_metadata_id *string `lyra:"ignore"`

    Metadata map[string]string

    Project *string

}

// Google_compute_project_metadataHandler ...
type Google_compute_project_metadataHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_project_metadataHandler) Create(desired *Google_compute_project_metadata) (*Google_compute_project_metadata, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_project_metadata", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_project_metadataHandler) Read(externalID string) (*Google_compute_project_metadata, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_project_metadata", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_project_metadata{ Google_compute_project_metadata_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_project_metadataHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_project_metadata", externalID)
}

type Google_compute_project_metadata_item struct {

    Google_compute_project_metadata_item_id *string `lyra:"ignore"`

    Key string

    Project *string

    Value string

}

// Google_compute_project_metadata_itemHandler ...
type Google_compute_project_metadata_itemHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_project_metadata_itemHandler) Create(desired *Google_compute_project_metadata_item) (*Google_compute_project_metadata_item, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_project_metadata_item", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_project_metadata_itemHandler) Read(externalID string) (*Google_compute_project_metadata_item, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_project_metadata_item", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_project_metadata_item{ Google_compute_project_metadata_item_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_project_metadata_itemHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_project_metadata_item", externalID)
}

type Google_compute_region_autoscaler_autoscaling_policy_933_cpu_utilization_934 struct {

    Target float64

}

type Google_compute_region_autoscaler_autoscaling_policy_933_load_balancing_utilization_935 struct {

    Target float64

}

type Google_compute_region_autoscaler_autoscaling_policy_933_metric_936 struct {

    Name string

    Target float64

    Type string

}

type Google_compute_region_autoscaler_autoscaling_policy_933 struct {

    Cooldown_period *int

    Cpu_utilization *[]Google_compute_region_autoscaler_autoscaling_policy_933_cpu_utilization_934

    Load_balancing_utilization *[]Google_compute_region_autoscaler_autoscaling_policy_933_load_balancing_utilization_935

    Max_replicas int

    Metric *[]Google_compute_region_autoscaler_autoscaling_policy_933_metric_936

    Min_replicas int

}

type Google_compute_region_autoscaler struct {

    Google_compute_region_autoscaler_id *string `lyra:"ignore"`

    Autoscaling_policy []Google_compute_region_autoscaler_autoscaling_policy_933

    Creation_timestamp *string

    Description *string

    Name string

    Project *string

    Region *string

    Self_link *string

    Target string

}

// Google_compute_region_autoscalerHandler ...
type Google_compute_region_autoscalerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_autoscalerHandler) Create(desired *Google_compute_region_autoscaler) (*Google_compute_region_autoscaler, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_autoscaler", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_region_autoscalerHandler) Read(externalID string) (*Google_compute_region_autoscaler, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_autoscaler", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_autoscaler{ Google_compute_region_autoscaler_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_region_autoscalerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_autoscaler", externalID)
}

type Google_compute_region_backend_service_backend_937 struct {

    Description *string

    Group *string

}

type Google_compute_region_backend_service struct {

    Google_compute_region_backend_service_id *string `lyra:"ignore"`

    Backend *[]Google_compute_region_backend_service_backend_937

    Connection_draining_timeout_sec *int

    Description *string

    Fingerprint *string

    Health_checks []string

    Name string

    Project *string

    Protocol *string

    Region *string

    Self_link *string

    Session_affinity *string

    Timeout_sec *int

}

// Google_compute_region_backend_serviceHandler ...
type Google_compute_region_backend_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_backend_serviceHandler) Create(desired *Google_compute_region_backend_service) (*Google_compute_region_backend_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_backend_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_region_backend_serviceHandler) Read(externalID string) (*Google_compute_region_backend_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_backend_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_backend_service{ Google_compute_region_backend_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_region_backend_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_backend_service", externalID)
}

type Google_compute_region_disk_disk_encryption_key_938 struct {

    Raw_key *string

    Sha256 *string

}

type Google_compute_region_disk_source_snapshot_encryption_key_939 struct {

    Raw_key *string

    Sha256 *string

}

type Google_compute_region_disk struct {

    Google_compute_region_disk_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Disk_encryption_key *[]Google_compute_region_disk_disk_encryption_key_938

    Label_fingerprint *string

    Labels *map[string]string

    Last_attach_timestamp *string

    Last_detach_timestamp *string

    Name string

    Project *string

    Region *string

    Replica_zones []string

    Self_link *string

    Size *int

    Snapshot *string

    Source_snapshot_encryption_key *[]Google_compute_region_disk_source_snapshot_encryption_key_939

    Source_snapshot_id *string

    Type *string

    Users *[]string

}

// Google_compute_region_diskHandler ...
type Google_compute_region_diskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_diskHandler) Create(desired *Google_compute_region_disk) (*Google_compute_region_disk, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_disk", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_region_diskHandler) Read(externalID string) (*Google_compute_region_disk, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_disk", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_disk{ Google_compute_region_disk_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_region_diskHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_disk", externalID)
}

type Google_compute_region_instance_group_manager_auto_healing_policies_940 struct {

    Health_check string

    Initial_delay_sec int

}

type Google_compute_region_instance_group_manager_named_port_941 struct {

    Name string

    Port int

}

type Google_compute_region_instance_group_manager_rolling_update_policy_942 struct {

    Max_surge_fixed *int

    Max_surge_percent *int

    Max_unavailable_fixed *int

    Max_unavailable_percent *int

    Min_ready_sec *int

    Minimal_action string

    Type string

}

type Google_compute_region_instance_group_manager_version_943_target_size_944 struct {

    Fixed *int

    Percent *int

}

type Google_compute_region_instance_group_manager_version_943 struct {

    Instance_template string

    Name string

    Target_size *[]Google_compute_region_instance_group_manager_version_943_target_size_944

}

type Google_compute_region_instance_group_manager struct {

    Google_compute_region_instance_group_manager_id *string `lyra:"ignore"`

    Auto_healing_policies *[]Google_compute_region_instance_group_manager_auto_healing_policies_940

    Base_instance_name string

    Description *string

    Distribution_policy_zones *[]string

    Fingerprint *string

    Instance_group *string

    Instance_template *string

    Name string

    Named_port *[]Google_compute_region_instance_group_manager_named_port_941

    Project *string

    Region string

    Rolling_update_policy *[]Google_compute_region_instance_group_manager_rolling_update_policy_942

    Self_link *string

    Target_pools *[]string

    Target_size *int

    Update_strategy *string

    Version *[]Google_compute_region_instance_group_manager_version_943

    Wait_for_instances *bool

}

// Google_compute_region_instance_group_managerHandler ...
type Google_compute_region_instance_group_managerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_instance_group_managerHandler) Create(desired *Google_compute_region_instance_group_manager) (*Google_compute_region_instance_group_manager, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_instance_group_manager", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_region_instance_group_managerHandler) Read(externalID string) (*Google_compute_region_instance_group_manager, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_instance_group_manager", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_instance_group_manager{ Google_compute_region_instance_group_manager_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_region_instance_group_managerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_instance_group_manager", externalID)
}

type Google_compute_route struct {

    Google_compute_route_id *string `lyra:"ignore"`

    Description *string

    Dest_range string

    Name string

    Network string

    Next_hop_gateway *string

    Next_hop_instance *string

    Next_hop_instance_zone *string

    Next_hop_ip *string

    Next_hop_network *string

    Next_hop_vpn_tunnel *string

    Priority *int

    Project *string

    Self_link *string

    Tags *[]string

}

// Google_compute_routeHandler ...
type Google_compute_routeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_routeHandler) Create(desired *Google_compute_route) (*Google_compute_route, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_route", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_routeHandler) Read(externalID string) (*Google_compute_route, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_route", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_route{ Google_compute_route_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_routeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_route", externalID)
}

type Google_compute_router_bgp_945_advertised_ip_ranges_946 struct {

    Description *string

    Range *string

}

type Google_compute_router_bgp_945 struct {

    Advertise_mode *string

    Advertised_groups *[]string

    Advertised_ip_ranges *[]Google_compute_router_bgp_945_advertised_ip_ranges_946

    Asn int

}

type Google_compute_router struct {

    Google_compute_router_id *string `lyra:"ignore"`

    Bgp *[]Google_compute_router_bgp_945

    Creation_timestamp *string

    Description *string

    Name string

    Network string

    Project *string

    Region *string

    Self_link *string

}

// Google_compute_routerHandler ...
type Google_compute_routerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_routerHandler) Create(desired *Google_compute_router) (*Google_compute_router, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_routerHandler) Read(externalID string) (*Google_compute_router, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router{ Google_compute_router_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_routerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router", externalID)
}

type Google_compute_router_interface struct {

    Google_compute_router_interface_id *string `lyra:"ignore"`

    Ip_range *string

    Name string

    Project *string

    Region *string

    Router string

    Vpn_tunnel string

}

// Google_compute_router_interfaceHandler ...
type Google_compute_router_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_router_interfaceHandler) Create(desired *Google_compute_router_interface) (*Google_compute_router_interface, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_router_interfaceHandler) Read(externalID string) (*Google_compute_router_interface, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_interface{ Google_compute_router_interface_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_router_interfaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router_interface", externalID)
}

type Google_compute_router_nat_subnetwork_947 struct {

    Name string

    Secondary_ip_range_names *[]string

    Source_ip_ranges_to_nat *[]string

}

type Google_compute_router_nat struct {

    Google_compute_router_nat_id *string `lyra:"ignore"`

    Icmp_idle_timeout_sec *int

    Min_ports_per_vm *int

    Name string

    Nat_ip_allocate_option string

    Nat_ips *[]string

    Project *string

    Region *string

    Router string

    Source_subnetwork_ip_ranges_to_nat *string

    Subnetwork *[]Google_compute_router_nat_subnetwork_947

    Tcp_established_idle_timeout_sec *int

    Tcp_transitory_idle_timeout_sec *int

    Udp_idle_timeout_sec *int

}

// Google_compute_router_natHandler ...
type Google_compute_router_natHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_router_natHandler) Create(desired *Google_compute_router_nat) (*Google_compute_router_nat, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router_nat", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_router_natHandler) Read(externalID string) (*Google_compute_router_nat, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router_nat", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_nat{ Google_compute_router_nat_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_router_natHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router_nat", externalID)
}

type Google_compute_router_peer struct {

    Google_compute_router_peer_id *string `lyra:"ignore"`

    Advertised_route_priority *int

    Interface string

    Ip_address *string

    Name string

    Peer_asn int

    Peer_ip_address *string

    Project *string

    Region *string

    Router string

}

// Google_compute_router_peerHandler ...
type Google_compute_router_peerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_router_peerHandler) Create(desired *Google_compute_router_peer) (*Google_compute_router_peer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router_peer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_router_peerHandler) Read(externalID string) (*Google_compute_router_peer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router_peer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_peer{ Google_compute_router_peer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_router_peerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router_peer", externalID)
}

type Google_compute_security_policy_rule_948_match_949_config_950 struct {

    Src_ip_ranges []string

}

type Google_compute_security_policy_rule_948_match_949 struct {

    Config []Google_compute_security_policy_rule_948_match_949_config_950

    Versioned_expr string

}

type Google_compute_security_policy_rule_948 struct {

    Action string

    Description *string

    Match []Google_compute_security_policy_rule_948_match_949

    Preview *bool

    Priority int

}

type Google_compute_security_policy struct {

    Google_compute_security_policy_id *string `lyra:"ignore"`

    Description *string

    Fingerprint *string

    Name string

    Project *string

    Rule *[]Google_compute_security_policy_rule_948

    Self_link *string

}

// Google_compute_security_policyHandler ...
type Google_compute_security_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_security_policyHandler) Create(desired *Google_compute_security_policy) (*Google_compute_security_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_security_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_security_policyHandler) Read(externalID string) (*Google_compute_security_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_security_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_security_policy{ Google_compute_security_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_security_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_security_policy", externalID)
}

type Google_compute_shared_vpc_host_project struct {

    Google_compute_shared_vpc_host_project_id *string `lyra:"ignore"`

    Project string

}

// Google_compute_shared_vpc_host_projectHandler ...
type Google_compute_shared_vpc_host_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_shared_vpc_host_projectHandler) Create(desired *Google_compute_shared_vpc_host_project) (*Google_compute_shared_vpc_host_project, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_shared_vpc_host_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_shared_vpc_host_projectHandler) Read(externalID string) (*Google_compute_shared_vpc_host_project, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_shared_vpc_host_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_shared_vpc_host_project{ Google_compute_shared_vpc_host_project_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_shared_vpc_host_projectHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_shared_vpc_host_project", externalID)
}

type Google_compute_shared_vpc_service_project struct {

    Google_compute_shared_vpc_service_project_id *string `lyra:"ignore"`

    Host_project string

    Service_project string

}

// Google_compute_shared_vpc_service_projectHandler ...
type Google_compute_shared_vpc_service_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_shared_vpc_service_projectHandler) Create(desired *Google_compute_shared_vpc_service_project) (*Google_compute_shared_vpc_service_project, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_shared_vpc_service_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_shared_vpc_service_projectHandler) Read(externalID string) (*Google_compute_shared_vpc_service_project, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_shared_vpc_service_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_shared_vpc_service_project{ Google_compute_shared_vpc_service_project_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_shared_vpc_service_projectHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_shared_vpc_service_project", externalID)
}

type Google_compute_snapshot_snapshot_encryption_key_951 struct {

    Raw_key *string

    Sha256 *string

}

type Google_compute_snapshot_source_disk_encryption_key_952 struct {

    Raw_key *string

}

type Google_compute_snapshot struct {

    Google_compute_snapshot_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Disk_size_gb *int

    Label_fingerprint *string

    Labels *map[string]string

    Licenses *[]string

    Name string

    Project *string

    Self_link *string

    Snapshot_encryption_key *[]Google_compute_snapshot_snapshot_encryption_key_951

    Snapshot_encryption_key_raw *string

    Snapshot_encryption_key_sha256 *string

    Snapshot_id *int

    Source_disk string

    Source_disk_encryption_key *[]Google_compute_snapshot_source_disk_encryption_key_952

    Source_disk_encryption_key_raw *string

    Source_disk_encryption_key_sha256 *string

    Source_disk_link *string

    Storage_bytes *int

    Zone *string

}

// Google_compute_snapshotHandler ...
type Google_compute_snapshotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_snapshotHandler) Create(desired *Google_compute_snapshot) (*Google_compute_snapshot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_snapshot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_snapshotHandler) Read(externalID string) (*Google_compute_snapshot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_snapshot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_snapshot{ Google_compute_snapshot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_snapshotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_snapshot", externalID)
}

type Google_compute_ssl_certificate struct {

    Google_compute_ssl_certificate_id *string `lyra:"ignore"`

    Certificate string

    Certificate_id *int

    Creation_timestamp *string

    Description *string

    Name *string

    Name_prefix *string

    Private_key string

    Project *string

    Self_link *string

}

// Google_compute_ssl_certificateHandler ...
type Google_compute_ssl_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_ssl_certificateHandler) Create(desired *Google_compute_ssl_certificate) (*Google_compute_ssl_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_ssl_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_ssl_certificateHandler) Read(externalID string) (*Google_compute_ssl_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_ssl_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_ssl_certificate{ Google_compute_ssl_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_ssl_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_ssl_certificate", externalID)
}

type Google_compute_ssl_policy struct {

    Google_compute_ssl_policy_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Custom_features *[]string

    Description *string

    Enabled_features *[]string

    Fingerprint *string

    Min_tls_version *string

    Name string

    Profile *string

    Project *string

    Self_link *string

}

// Google_compute_ssl_policyHandler ...
type Google_compute_ssl_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_ssl_policyHandler) Create(desired *Google_compute_ssl_policy) (*Google_compute_ssl_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_ssl_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_ssl_policyHandler) Read(externalID string) (*Google_compute_ssl_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_ssl_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_ssl_policy{ Google_compute_ssl_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_ssl_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_ssl_policy", externalID)
}

type Google_compute_subnetwork_secondary_ip_range_953 struct {

    Ip_cidr_range string

    Range_name string

}

type Google_compute_subnetwork struct {

    Google_compute_subnetwork_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Enable_flow_logs *bool

    Fingerprint *string

    Gateway_address *string

    Ip_cidr_range string

    Name string

    Network string

    Private_ip_google_access *bool

    Project *string

    Region *string

    Secondary_ip_range *[]Google_compute_subnetwork_secondary_ip_range_953

    Self_link *string

}

// Google_compute_subnetworkHandler ...
type Google_compute_subnetworkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetworkHandler) Create(desired *Google_compute_subnetwork) (*Google_compute_subnetwork, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_subnetworkHandler) Read(externalID string) (*Google_compute_subnetwork, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork{ Google_compute_subnetwork_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetworkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork", externalID)
}

type Google_compute_subnetwork_iam_binding struct {

    Google_compute_subnetwork_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Members []string

    Project *string

    Region *string

    Role string

    Subnetwork string

}

// Google_compute_subnetwork_iam_bindingHandler ...
type Google_compute_subnetwork_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetwork_iam_bindingHandler) Create(desired *Google_compute_subnetwork_iam_binding) (*Google_compute_subnetwork_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_subnetwork_iam_bindingHandler) Read(externalID string) (*Google_compute_subnetwork_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_binding{ Google_compute_subnetwork_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetwork_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork_iam_binding", externalID)
}

type Google_compute_subnetwork_iam_member struct {

    Google_compute_subnetwork_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Member string

    Project *string

    Region *string

    Role string

    Subnetwork string

}

// Google_compute_subnetwork_iam_memberHandler ...
type Google_compute_subnetwork_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetwork_iam_memberHandler) Create(desired *Google_compute_subnetwork_iam_member) (*Google_compute_subnetwork_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_subnetwork_iam_memberHandler) Read(externalID string) (*Google_compute_subnetwork_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_member{ Google_compute_subnetwork_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetwork_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork_iam_member", externalID)
}

type Google_compute_subnetwork_iam_policy struct {

    Google_compute_subnetwork_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Policy_data string

    Project *string

    Region *string

    Subnetwork string

}

// Google_compute_subnetwork_iam_policyHandler ...
type Google_compute_subnetwork_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetwork_iam_policyHandler) Create(desired *Google_compute_subnetwork_iam_policy) (*Google_compute_subnetwork_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_subnetwork_iam_policyHandler) Read(externalID string) (*Google_compute_subnetwork_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_policy{ Google_compute_subnetwork_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetwork_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork_iam_policy", externalID)
}

type Google_compute_target_http_proxy struct {

    Google_compute_target_http_proxy_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Name string

    Project *string

    Proxy_id *int

    Self_link *string

    Url_map string

}

// Google_compute_target_http_proxyHandler ...
type Google_compute_target_http_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_http_proxyHandler) Create(desired *Google_compute_target_http_proxy) (*Google_compute_target_http_proxy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_http_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_target_http_proxyHandler) Read(externalID string) (*Google_compute_target_http_proxy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_http_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_http_proxy{ Google_compute_target_http_proxy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_target_http_proxyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_http_proxy", externalID)
}

type Google_compute_target_https_proxy struct {

    Google_compute_target_https_proxy_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Name string

    Project *string

    Proxy_id *int

    Quic_override *string

    Self_link *string

    Ssl_certificates []string

    Ssl_policy *string

    Url_map string

}

// Google_compute_target_https_proxyHandler ...
type Google_compute_target_https_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_https_proxyHandler) Create(desired *Google_compute_target_https_proxy) (*Google_compute_target_https_proxy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_https_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_target_https_proxyHandler) Read(externalID string) (*Google_compute_target_https_proxy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_https_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_https_proxy{ Google_compute_target_https_proxy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_target_https_proxyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_https_proxy", externalID)
}

type Google_compute_target_pool struct {

    Google_compute_target_pool_id *string `lyra:"ignore"`

    Backup_pool *string

    Description *string

    Failover_ratio *float64

    Health_checks *[]string

    Instances *[]string

    Name string

    Project *string

    Region *string

    Self_link *string

    Session_affinity *string

}

// Google_compute_target_poolHandler ...
type Google_compute_target_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_poolHandler) Create(desired *Google_compute_target_pool) (*Google_compute_target_pool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_target_poolHandler) Read(externalID string) (*Google_compute_target_pool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_pool{ Google_compute_target_pool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_target_poolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_pool", externalID)
}

type Google_compute_target_ssl_proxy struct {

    Google_compute_target_ssl_proxy_id *string `lyra:"ignore"`

    Backend_service string

    Creation_timestamp *string

    Description *string

    Name string

    Project *string

    Proxy_header *string

    Proxy_id *int

    Self_link *string

    Ssl_certificates []string

    Ssl_policy *string

}

// Google_compute_target_ssl_proxyHandler ...
type Google_compute_target_ssl_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_ssl_proxyHandler) Create(desired *Google_compute_target_ssl_proxy) (*Google_compute_target_ssl_proxy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_ssl_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_target_ssl_proxyHandler) Read(externalID string) (*Google_compute_target_ssl_proxy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_ssl_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_ssl_proxy{ Google_compute_target_ssl_proxy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_target_ssl_proxyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_ssl_proxy", externalID)
}

type Google_compute_target_tcp_proxy struct {

    Google_compute_target_tcp_proxy_id *string `lyra:"ignore"`

    Backend_service string

    Creation_timestamp *string

    Description *string

    Name string

    Project *string

    Proxy_header *string

    Proxy_id *int

    Self_link *string

}

// Google_compute_target_tcp_proxyHandler ...
type Google_compute_target_tcp_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_tcp_proxyHandler) Create(desired *Google_compute_target_tcp_proxy) (*Google_compute_target_tcp_proxy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_tcp_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_target_tcp_proxyHandler) Read(externalID string) (*Google_compute_target_tcp_proxy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_tcp_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_tcp_proxy{ Google_compute_target_tcp_proxy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_target_tcp_proxyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_tcp_proxy", externalID)
}

type Google_compute_url_map_host_rule_954 struct {

    Description *string

    Hosts []string

    Path_matcher string

}

type Google_compute_url_map_path_matcher_955_path_rule_956 struct {

    Paths []string

    Service string

}

type Google_compute_url_map_path_matcher_955 struct {

    Default_service string

    Description *string

    Name string

    Path_rule *[]Google_compute_url_map_path_matcher_955_path_rule_956

}

type Google_compute_url_map_test_957 struct {

    Description *string

    Host string

    Path string

    Service string

}

type Google_compute_url_map struct {

    Google_compute_url_map_id *string `lyra:"ignore"`

    Default_service string

    Description *string

    Fingerprint *string

    Host_rule *[]Google_compute_url_map_host_rule_954

    Map_id *string

    Name string

    Path_matcher *[]Google_compute_url_map_path_matcher_955

    Project *string

    Self_link *string

    Test *[]Google_compute_url_map_test_957

}

// Google_compute_url_mapHandler ...
type Google_compute_url_mapHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_url_mapHandler) Create(desired *Google_compute_url_map) (*Google_compute_url_map, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_url_map", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_url_mapHandler) Read(externalID string) (*Google_compute_url_map, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_url_map", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_url_map{ Google_compute_url_map_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_url_mapHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_url_map", externalID)
}

type Google_compute_vpn_gateway struct {

    Google_compute_vpn_gateway_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Name string

    Network string

    Project *string

    Region *string

    Self_link *string

}

// Google_compute_vpn_gatewayHandler ...
type Google_compute_vpn_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_vpn_gatewayHandler) Create(desired *Google_compute_vpn_gateway) (*Google_compute_vpn_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_vpn_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_vpn_gatewayHandler) Read(externalID string) (*Google_compute_vpn_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_vpn_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_vpn_gateway{ Google_compute_vpn_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_vpn_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_vpn_gateway", externalID)
}

type Google_compute_vpn_tunnel struct {

    Google_compute_vpn_tunnel_id *string `lyra:"ignore"`

    Creation_timestamp *string

    Description *string

    Detailed_status *string

    Ike_version *int

    Label_fingerprint *string

    Labels *map[string]string

    Local_traffic_selector *[]string

    Name string

    Peer_ip string

    Project *string

    Region *string

    Remote_traffic_selector *[]string

    Router *string

    Self_link *string

    Shared_secret string

    Shared_secret_hash *string

    Target_vpn_gateway string

}

// Google_compute_vpn_tunnelHandler ...
type Google_compute_vpn_tunnelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_vpn_tunnelHandler) Create(desired *Google_compute_vpn_tunnel) (*Google_compute_vpn_tunnel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_vpn_tunnel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_compute_vpn_tunnelHandler) Read(externalID string) (*Google_compute_vpn_tunnel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_vpn_tunnel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_vpn_tunnel{ Google_compute_vpn_tunnel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_compute_vpn_tunnelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_vpn_tunnel", externalID)
}

type Google_container_analysis_note_attestation_authority_958_hint_959 struct {

    Human_readable_name string

}

type Google_container_analysis_note_attestation_authority_958 struct {

    Hint []Google_container_analysis_note_attestation_authority_958_hint_959

}

type Google_container_analysis_note struct {

    Google_container_analysis_note_id *string `lyra:"ignore"`

    Attestation_authority []Google_container_analysis_note_attestation_authority_958

    Name string

    Project *string

}

// Google_container_analysis_noteHandler ...
type Google_container_analysis_noteHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_container_analysis_noteHandler) Create(desired *Google_container_analysis_note) (*Google_container_analysis_note, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_container_analysis_note", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_container_analysis_noteHandler) Read(externalID string) (*Google_container_analysis_note, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_container_analysis_note", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_container_analysis_note{ Google_container_analysis_note_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_container_analysis_noteHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_container_analysis_note", externalID)
}

type Google_container_cluster_addons_config_960_horizontal_pod_autoscaling_961 struct {

    Disabled *bool

}

type Google_container_cluster_addons_config_960_http_load_balancing_962 struct {

    Disabled *bool

}

type Google_container_cluster_addons_config_960_kubernetes_dashboard_963 struct {

    Disabled *bool

}

type Google_container_cluster_addons_config_960_network_policy_config_964 struct {

    Disabled *bool

}

type Google_container_cluster_addons_config_960 struct {

    Horizontal_pod_autoscaling *[]Google_container_cluster_addons_config_960_horizontal_pod_autoscaling_961

    Http_load_balancing *[]Google_container_cluster_addons_config_960_http_load_balancing_962

    Kubernetes_dashboard *[]Google_container_cluster_addons_config_960_kubernetes_dashboard_963

    Network_policy_config *[]Google_container_cluster_addons_config_960_network_policy_config_964

}

type Google_container_cluster_cluster_autoscaling_965_resource_limits_966 struct {

    Maximum *int

    Minimum *int

    Resource_type string

}

type Google_container_cluster_cluster_autoscaling_965 struct {

    Enabled bool

    Resource_limits *[]Google_container_cluster_cluster_autoscaling_965_resource_limits_966

}

type Google_container_cluster_ip_allocation_policy_967 struct {

    Cluster_ipv4_cidr_block *string

    Cluster_secondary_range_name *string

    Create_subnetwork *bool

    Services_ipv4_cidr_block *string

    Services_secondary_range_name *string

    Subnetwork_name *string

}

type Google_container_cluster_maintenance_policy_968_daily_maintenance_window_969 struct {

    Duration *string

    Start_time string

}

type Google_container_cluster_maintenance_policy_968 struct {

    Daily_maintenance_window []Google_container_cluster_maintenance_policy_968_daily_maintenance_window_969

}

type Google_container_cluster_master_auth_970_client_certificate_config_971 struct {

    Issue_client_certificate bool

}

type Google_container_cluster_master_auth_970 struct {

    Client_certificate *string

    Client_certificate_config *[]Google_container_cluster_master_auth_970_client_certificate_config_971

    Client_key *string

    Cluster_ca_certificate *string

    Password string

    Username string

}

type Google_container_cluster_master_authorized_networks_config_972_cidr_blocks_973 struct {

    Cidr_block string

    Display_name *string

}

type Google_container_cluster_master_authorized_networks_config_972 struct {

    Cidr_blocks *[]Google_container_cluster_master_authorized_networks_config_972_cidr_blocks_973

}

type Google_container_cluster_network_policy_974 struct {

    Enabled *bool

    Provider *string

}

type Google_container_cluster_node_config_975_guest_accelerator_976 struct {

    Count int

    Type string

}

type Google_container_cluster_node_config_975_taint_977 struct {

    Effect string

    Key string

    Value string

}

type Google_container_cluster_node_config_975_workload_metadata_config_978 struct {

    Node_metadata string

}

type Google_container_cluster_node_config_975 struct {

    Disk_size_gb *int

    Disk_type *string

    Guest_accelerator *[]Google_container_cluster_node_config_975_guest_accelerator_976

    Image_type *string

    Labels *map[string]string

    Local_ssd_count *int

    Machine_type *string

    Metadata *map[string]string

    Min_cpu_platform *string

    Oauth_scopes *[]string

    Preemptible *bool

    Service_account *string

    Tags *[]string

    Taint *[]Google_container_cluster_node_config_975_taint_977

    Workload_metadata_config *[]Google_container_cluster_node_config_975_workload_metadata_config_978

}

type Google_container_cluster_node_pool_979_autoscaling_980 struct {

    Max_node_count int

    Min_node_count int

}

type Google_container_cluster_node_pool_979_management_981 struct {

    Auto_repair *bool

    Auto_upgrade *bool

}

type Google_container_cluster_node_pool_979_node_config_982_guest_accelerator_983 struct {

    Count int

    Type string

}

type Google_container_cluster_node_pool_979_node_config_982_taint_984 struct {

    Effect string

    Key string

    Value string

}

type Google_container_cluster_node_pool_979_node_config_982_workload_metadata_config_985 struct {

    Node_metadata string

}

type Google_container_cluster_node_pool_979_node_config_982 struct {

    Disk_size_gb *int

    Disk_type *string

    Guest_accelerator *[]Google_container_cluster_node_pool_979_node_config_982_guest_accelerator_983

    Image_type *string

    Labels *map[string]string

    Local_ssd_count *int

    Machine_type *string

    Metadata *map[string]string

    Min_cpu_platform *string

    Oauth_scopes *[]string

    Preemptible *bool

    Service_account *string

    Tags *[]string

    Taint *[]Google_container_cluster_node_pool_979_node_config_982_taint_984

    Workload_metadata_config *[]Google_container_cluster_node_pool_979_node_config_982_workload_metadata_config_985

}

type Google_container_cluster_node_pool_979 struct {

    Autoscaling *[]Google_container_cluster_node_pool_979_autoscaling_980

    Initial_node_count *int

    Instance_group_urls *[]string

    Management *[]Google_container_cluster_node_pool_979_management_981

    Max_pods_per_node *int

    Name *string

    Name_prefix *string

    Node_config *[]Google_container_cluster_node_pool_979_node_config_982

    Node_count *int

    Version *string

}

type Google_container_cluster_pod_security_policy_config_986 struct {

    Enabled bool

}

type Google_container_cluster_private_cluster_config_987 struct {

    Enable_private_endpoint *bool

    Enable_private_nodes *bool

    Master_ipv4_cidr_block *string

    Private_endpoint *string

    Public_endpoint *string

}

type Google_container_cluster struct {

    Google_container_cluster_id *string `lyra:"ignore"`

    Additional_zones *[]string

    Addons_config *[]Google_container_cluster_addons_config_960

    Cluster_autoscaling *[]Google_container_cluster_cluster_autoscaling_965

    Cluster_ipv4_cidr *string

    Description *string

    Enable_binary_authorization *bool

    Enable_kubernetes_alpha *bool

    Enable_legacy_abac *bool

    Enable_tpu *bool

    Endpoint *string

    Initial_node_count *int

    Instance_group_urls *[]string

    Ip_allocation_policy *[]Google_container_cluster_ip_allocation_policy_967

    Logging_service *string

    Maintenance_policy *[]Google_container_cluster_maintenance_policy_968

    Master_auth *[]Google_container_cluster_master_auth_970

    Master_authorized_networks_config *[]Google_container_cluster_master_authorized_networks_config_972

    Master_ipv4_cidr_block *string

    Master_version *string

    Min_master_version *string

    Monitoring_service *string

    Name string

    Network *string

    Network_policy *[]Google_container_cluster_network_policy_974

    Node_config *[]Google_container_cluster_node_config_975

    Node_pool *[]Google_container_cluster_node_pool_979

    Node_version *string

    Pod_security_policy_config *[]Google_container_cluster_pod_security_policy_config_986

    Private_cluster *bool

    Private_cluster_config *[]Google_container_cluster_private_cluster_config_987

    Project *string

    Region *string

    Remove_default_node_pool *bool

    Resource_labels *map[string]string

    Subnetwork *string

    Zone *string

}

// Google_container_clusterHandler ...
type Google_container_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_container_clusterHandler) Create(desired *Google_container_cluster) (*Google_container_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_container_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_container_clusterHandler) Read(externalID string) (*Google_container_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_container_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_container_cluster{ Google_container_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_container_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_container_cluster", externalID)
}

type Google_container_node_pool_autoscaling_988 struct {

    Max_node_count int

    Min_node_count int

}

type Google_container_node_pool_management_989 struct {

    Auto_repair *bool

    Auto_upgrade *bool

}

type Google_container_node_pool_node_config_990_guest_accelerator_991 struct {

    Count int

    Type string

}

type Google_container_node_pool_node_config_990_taint_992 struct {

    Effect string

    Key string

    Value string

}

type Google_container_node_pool_node_config_990_workload_metadata_config_993 struct {

    Node_metadata string

}

type Google_container_node_pool_node_config_990 struct {

    Disk_size_gb *int

    Disk_type *string

    Guest_accelerator *[]Google_container_node_pool_node_config_990_guest_accelerator_991

    Image_type *string

    Labels *map[string]string

    Local_ssd_count *int

    Machine_type *string

    Metadata *map[string]string

    Min_cpu_platform *string

    Oauth_scopes *[]string

    Preemptible *bool

    Service_account *string

    Tags *[]string

    Taint *[]Google_container_node_pool_node_config_990_taint_992

    Workload_metadata_config *[]Google_container_node_pool_node_config_990_workload_metadata_config_993

}

type Google_container_node_pool struct {

    Google_container_node_pool_id *string `lyra:"ignore"`

    Autoscaling *[]Google_container_node_pool_autoscaling_988

    Cluster string

    Initial_node_count *int

    Instance_group_urls *[]string

    Management *[]Google_container_node_pool_management_989

    Max_pods_per_node *int

    Name *string

    Name_prefix *string

    Node_config *[]Google_container_node_pool_node_config_990

    Node_count *int

    Project *string

    Region *string

    Version *string

    Zone *string

}

// Google_container_node_poolHandler ...
type Google_container_node_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_container_node_poolHandler) Create(desired *Google_container_node_pool) (*Google_container_node_pool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_container_node_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_container_node_poolHandler) Read(externalID string) (*Google_container_node_pool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_container_node_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_container_node_pool{ Google_container_node_pool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_container_node_poolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_container_node_pool", externalID)
}

type Google_dataflow_job struct {

    Google_dataflow_job_id *string `lyra:"ignore"`

    Max_workers *int

    Name string

    On_delete *string

    Parameters *map[string]string

    Project *string

    Region *string

    State *string

    Temp_gcs_location string

    Template_gcs_path string

    Zone *string

}

// Google_dataflow_jobHandler ...
type Google_dataflow_jobHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dataflow_jobHandler) Create(desired *Google_dataflow_job) (*Google_dataflow_job, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dataflow_job", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_dataflow_jobHandler) Read(externalID string) (*Google_dataflow_job, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dataflow_job", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dataflow_job{ Google_dataflow_job_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_dataflow_jobHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dataflow_job", externalID)
}

type Google_dataproc_cluster_cluster_config_994_gce_cluster_config_995 struct {

    Internal_ip_only *bool

    Metadata *map[string]string

    Network *string

    Service_account *string

    Service_account_scopes *[]string

    Subnetwork *string

    Tags *[]string

    Zone *string

}

type Google_dataproc_cluster_cluster_config_994_initialization_action_996 struct {

    Script string

    Timeout_sec *int

}

type Google_dataproc_cluster_cluster_config_994_master_config_997_disk_config_998 struct {

    Boot_disk_size_gb *int

    Boot_disk_type *string

    Num_local_ssds *int

}

type Google_dataproc_cluster_cluster_config_994_master_config_997 struct {

    Disk_config *[]Google_dataproc_cluster_cluster_config_994_master_config_997_disk_config_998

    Instance_names *[]string

    Machine_type *string

    Num_instances *int

}

type Google_dataproc_cluster_cluster_config_994_preemptible_worker_config_999_disk_config_1000 struct {

    Boot_disk_size_gb *int

}

type Google_dataproc_cluster_cluster_config_994_preemptible_worker_config_999 struct {

    Disk_config *[]Google_dataproc_cluster_cluster_config_994_preemptible_worker_config_999_disk_config_1000

    Instance_names *[]string

    Num_instances *int

}

type Google_dataproc_cluster_cluster_config_994_software_config_1001 struct {

    Image_version *string

    Override_properties *map[string]string

    Properties *map[string]string

}

type Google_dataproc_cluster_cluster_config_994_worker_config_1002_disk_config_1003 struct {

    Boot_disk_size_gb *int

    Boot_disk_type *string

    Num_local_ssds *int

}

type Google_dataproc_cluster_cluster_config_994_worker_config_1002 struct {

    Disk_config *[]Google_dataproc_cluster_cluster_config_994_worker_config_1002_disk_config_1003

    Instance_names *[]string

    Machine_type *string

    Num_instances *int

}

type Google_dataproc_cluster_cluster_config_994 struct {

    Bucket *string

    Delete_autogen_bucket *bool

    Gce_cluster_config *[]Google_dataproc_cluster_cluster_config_994_gce_cluster_config_995

    Initialization_action *[]Google_dataproc_cluster_cluster_config_994_initialization_action_996

    Master_config *[]Google_dataproc_cluster_cluster_config_994_master_config_997

    Preemptible_worker_config *[]Google_dataproc_cluster_cluster_config_994_preemptible_worker_config_999

    Software_config *[]Google_dataproc_cluster_cluster_config_994_software_config_1001

    Staging_bucket *string

    Worker_config *[]Google_dataproc_cluster_cluster_config_994_worker_config_1002

}

type Google_dataproc_cluster struct {

    Google_dataproc_cluster_id *string `lyra:"ignore"`

    Cluster_config *[]Google_dataproc_cluster_cluster_config_994

    Labels *map[string]string

    Name string

    Project *string

    Region *string

}

// Google_dataproc_clusterHandler ...
type Google_dataproc_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dataproc_clusterHandler) Create(desired *Google_dataproc_cluster) (*Google_dataproc_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dataproc_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_dataproc_clusterHandler) Read(externalID string) (*Google_dataproc_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dataproc_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dataproc_cluster{ Google_dataproc_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_dataproc_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dataproc_cluster", externalID)
}

type Google_dataproc_job_hadoop_config_1004_logging_config_1005 struct {

    Driver_log_levels *map[string]string

}

type Google_dataproc_job_hadoop_config_1004 struct {

    Archive_uris *[]string

    Args *[]string

    File_uris *[]string

    Jar_file_uris *[]string

    Logging_config *[]Google_dataproc_job_hadoop_config_1004_logging_config_1005

    Main_class *string

    Main_jar_file_uri *string

    Properties *map[string]string

}

type Google_dataproc_job_hive_config_1006 struct {

    Continue_on_failure *bool

    Jar_file_uris *[]string

    Properties *map[string]string

    Query_file_uri *string

    Query_list *[]string

    Script_variables *map[string]string

}

type Google_dataproc_job_pig_config_1007_logging_config_1008 struct {

    Driver_log_levels *map[string]string

}

type Google_dataproc_job_pig_config_1007 struct {

    Continue_on_failure *bool

    Jar_file_uris *[]string

    Logging_config *[]Google_dataproc_job_pig_config_1007_logging_config_1008

    Properties *map[string]string

    Query_file_uri *string

    Query_list *[]string

    Script_variables *map[string]string

}

type Google_dataproc_job_placement_1009 struct {

    Cluster_name string

    Cluster_uuid *string

}

type Google_dataproc_job_pyspark_config_1010_logging_config_1011 struct {

    Driver_log_levels *map[string]string

}

type Google_dataproc_job_pyspark_config_1010 struct {

    Archive_uris *[]string

    Args *[]string

    File_uris *[]string

    Jar_file_uris *[]string

    Logging_config *[]Google_dataproc_job_pyspark_config_1010_logging_config_1011

    Main_python_file_uri string

    Properties *map[string]string

    Python_file_uris *[]string

}

type Google_dataproc_job_reference_1012 struct {

    Job_id *string

}

type Google_dataproc_job_scheduling_1013 struct {

    Max_failures_per_hour *int

}

type Google_dataproc_job_spark_config_1014_logging_config_1015 struct {

    Driver_log_levels *map[string]string

}

type Google_dataproc_job_spark_config_1014 struct {

    Archive_uris *[]string

    Args *[]string

    File_uris *[]string

    Jar_file_uris *[]string

    Logging_config *[]Google_dataproc_job_spark_config_1014_logging_config_1015

    Main_class *string

    Main_jar_file_uri *string

    Properties *map[string]string

}

type Google_dataproc_job_sparksql_config_1016_logging_config_1017 struct {

    Driver_log_levels *map[string]string

}

type Google_dataproc_job_sparksql_config_1016 struct {

    Jar_file_uris *[]string

    Logging_config *[]Google_dataproc_job_sparksql_config_1016_logging_config_1017

    Properties *map[string]string

    Query_file_uri *string

    Query_list *[]string

    Script_variables *map[string]string

}

type Google_dataproc_job_status_1018 struct {

    Details *string

    State *string

    State_start_time *string

    Substate *string

}

type Google_dataproc_job struct {

    Google_dataproc_job_id *string `lyra:"ignore"`

    Driver_controls_files_uri *string

    Driver_output_resource_uri *string

    Force_delete *bool

    Hadoop_config *[]Google_dataproc_job_hadoop_config_1004

    Hive_config *[]Google_dataproc_job_hive_config_1006

    Labels *map[string]string

    Pig_config *[]Google_dataproc_job_pig_config_1007

    Placement []Google_dataproc_job_placement_1009

    Project *string

    Pyspark_config *[]Google_dataproc_job_pyspark_config_1010

    Reference *[]Google_dataproc_job_reference_1012

    Region *string

    Scheduling *[]Google_dataproc_job_scheduling_1013

    Spark_config *[]Google_dataproc_job_spark_config_1014

    Sparksql_config *[]Google_dataproc_job_sparksql_config_1016

    Status *[]Google_dataproc_job_status_1018

}

// Google_dataproc_jobHandler ...
type Google_dataproc_jobHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dataproc_jobHandler) Create(desired *Google_dataproc_job) (*Google_dataproc_job, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dataproc_job", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_dataproc_jobHandler) Read(externalID string) (*Google_dataproc_job, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dataproc_job", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dataproc_job{ Google_dataproc_job_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_dataproc_jobHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dataproc_job", externalID)
}

type Google_dns_managed_zone struct {

    Google_dns_managed_zone_id *string `lyra:"ignore"`

    Description *string

    Dns_name string

    Labels *map[string]string

    Name string

    Name_servers *[]string

    Project *string

}

// Google_dns_managed_zoneHandler ...
type Google_dns_managed_zoneHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dns_managed_zoneHandler) Create(desired *Google_dns_managed_zone) (*Google_dns_managed_zone, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dns_managed_zone", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_dns_managed_zoneHandler) Read(externalID string) (*Google_dns_managed_zone, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dns_managed_zone", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dns_managed_zone{ Google_dns_managed_zone_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_dns_managed_zoneHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dns_managed_zone", externalID)
}

type Google_dns_record_set struct {

    Google_dns_record_set_id *string `lyra:"ignore"`

    Managed_zone string

    Name string

    Project *string

    Rrdatas []string

    Ttl int

    Type string

}

// Google_dns_record_setHandler ...
type Google_dns_record_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dns_record_setHandler) Create(desired *Google_dns_record_set) (*Google_dns_record_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dns_record_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_dns_record_setHandler) Read(externalID string) (*Google_dns_record_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dns_record_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dns_record_set{ Google_dns_record_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_dns_record_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dns_record_set", externalID)
}

type Google_endpoints_service_apis_1019_methods_1020 struct {

    Name *string

    Request_type *string

    Response_type *string

    Syntax *string

}

type Google_endpoints_service_apis_1019 struct {

    Methods *[]Google_endpoints_service_apis_1019_methods_1020

    Name *string

    Syntax *string

    Version *string

}

type Google_endpoints_service_endpoints_1021 struct {

    Address *string

    Name *string

}

type Google_endpoints_service struct {

    Google_endpoints_service_id *string `lyra:"ignore"`

    Apis *[]Google_endpoints_service_apis_1019

    Config_id *string

    Dns_address *string

    Endpoints *[]Google_endpoints_service_endpoints_1021

    Grpc_config *string

    Openapi_config *string

    Project *string

    Protoc_output *string

    Protoc_output_base64 *string

    Service_name string

}

// Google_endpoints_serviceHandler ...
type Google_endpoints_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_endpoints_serviceHandler) Create(desired *Google_endpoints_service) (*Google_endpoints_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_endpoints_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_endpoints_serviceHandler) Read(externalID string) (*Google_endpoints_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_endpoints_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_endpoints_service{ Google_endpoints_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_endpoints_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_endpoints_service", externalID)
}

type Google_filestore_instance_file_shares_1022 struct {

    Capacity_gb int

    Name string

}

type Google_filestore_instance_networks_1023 struct {

    Ip_addresses *[]string

    Modes []string

    Network string

    Reserved_ip_range *string

}

type Google_filestore_instance struct {

    Google_filestore_instance_id *string `lyra:"ignore"`

    Create_time *string

    Description *string

    Etag *string

    File_shares []Google_filestore_instance_file_shares_1022

    Labels *map[string]string

    Name string

    Networks []Google_filestore_instance_networks_1023

    Project *string

    Tier string

    Zone string

}

// Google_filestore_instanceHandler ...
type Google_filestore_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_filestore_instanceHandler) Create(desired *Google_filestore_instance) (*Google_filestore_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_filestore_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_filestore_instanceHandler) Read(externalID string) (*Google_filestore_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_filestore_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_filestore_instance{ Google_filestore_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_filestore_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_filestore_instance", externalID)
}

type Google_folder struct {

    Google_folder_id *string `lyra:"ignore"`

    Create_time *string

    Display_name string

    Lifecycle_state *string

    Name *string

    Parent string

}

// Google_folderHandler ...
type Google_folderHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folderHandler) Create(desired *Google_folder) (*Google_folder, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_folderHandler) Read(externalID string) (*Google_folder, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder{ Google_folder_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_folderHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder", externalID)
}

type Google_folder_iam_binding struct {

    Google_folder_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Folder string

    Members []string

    Role string

}

// Google_folder_iam_bindingHandler ...
type Google_folder_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_iam_bindingHandler) Create(desired *Google_folder_iam_binding) (*Google_folder_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_folder_iam_bindingHandler) Read(externalID string) (*Google_folder_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_binding{ Google_folder_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_folder_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_iam_binding", externalID)
}

type Google_folder_iam_member struct {

    Google_folder_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Folder string

    Member string

    Role string

}

// Google_folder_iam_memberHandler ...
type Google_folder_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_iam_memberHandler) Create(desired *Google_folder_iam_member) (*Google_folder_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_folder_iam_memberHandler) Read(externalID string) (*Google_folder_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_member{ Google_folder_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_folder_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_iam_member", externalID)
}

type Google_folder_iam_policy struct {

    Google_folder_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Folder string

    Policy_data string

}

// Google_folder_iam_policyHandler ...
type Google_folder_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_iam_policyHandler) Create(desired *Google_folder_iam_policy) (*Google_folder_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_folder_iam_policyHandler) Read(externalID string) (*Google_folder_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_policy{ Google_folder_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_folder_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_iam_policy", externalID)
}

type Google_folder_organization_policy_boolean_policy_1024 struct {

    Enforced bool

}

type Google_folder_organization_policy_list_policy_1025_allow_1026 struct {

    All *bool

    Values *[]string

}

type Google_folder_organization_policy_list_policy_1025_deny_1027 struct {

    All *bool

    Values *[]string

}

type Google_folder_organization_policy_list_policy_1025 struct {

    Allow *[]Google_folder_organization_policy_list_policy_1025_allow_1026

    Deny *[]Google_folder_organization_policy_list_policy_1025_deny_1027

    Suggested_value *string

}

type Google_folder_organization_policy_restore_policy_1028 struct {

    Default bool

}

type Google_folder_organization_policy struct {

    Google_folder_organization_policy_id *string `lyra:"ignore"`

    Boolean_policy *[]Google_folder_organization_policy_boolean_policy_1024

    Constraint string

    Etag *string

    Folder string

    List_policy *[]Google_folder_organization_policy_list_policy_1025

    Restore_policy *[]Google_folder_organization_policy_restore_policy_1028

    Update_time *string

    Version *int

}

// Google_folder_organization_policyHandler ...
type Google_folder_organization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_organization_policyHandler) Create(desired *Google_folder_organization_policy) (*Google_folder_organization_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_organization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_folder_organization_policyHandler) Read(externalID string) (*Google_folder_organization_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_organization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_organization_policy{ Google_folder_organization_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_folder_organization_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_organization_policy", externalID)
}

type Google_kms_crypto_key struct {

    Google_kms_crypto_key_id *string `lyra:"ignore"`

    Key_ring string

    Name string

    Rotation_period *string

    Self_link *string

}

// Google_kms_crypto_keyHandler ...
type Google_kms_crypto_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_crypto_keyHandler) Create(desired *Google_kms_crypto_key) (*Google_kms_crypto_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_crypto_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_kms_crypto_keyHandler) Read(externalID string) (*Google_kms_crypto_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_crypto_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key{ Google_kms_crypto_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_kms_crypto_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_crypto_key", externalID)
}

type Google_kms_crypto_key_iam_binding struct {

    Google_kms_crypto_key_iam_binding_id *string `lyra:"ignore"`

    Crypto_key_id string

    Etag *string

    Members []string

    Role string

}

// Google_kms_crypto_key_iam_bindingHandler ...
type Google_kms_crypto_key_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_crypto_key_iam_bindingHandler) Create(desired *Google_kms_crypto_key_iam_binding) (*Google_kms_crypto_key_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_crypto_key_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_kms_crypto_key_iam_bindingHandler) Read(externalID string) (*Google_kms_crypto_key_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_crypto_key_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key_iam_binding{ Google_kms_crypto_key_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_kms_crypto_key_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_crypto_key_iam_binding", externalID)
}

type Google_kms_crypto_key_iam_member struct {

    Google_kms_crypto_key_iam_member_id *string `lyra:"ignore"`

    Crypto_key_id string

    Etag *string

    Member string

    Role string

}

// Google_kms_crypto_key_iam_memberHandler ...
type Google_kms_crypto_key_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_crypto_key_iam_memberHandler) Create(desired *Google_kms_crypto_key_iam_member) (*Google_kms_crypto_key_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_crypto_key_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_kms_crypto_key_iam_memberHandler) Read(externalID string) (*Google_kms_crypto_key_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_crypto_key_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key_iam_member{ Google_kms_crypto_key_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_kms_crypto_key_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_crypto_key_iam_member", externalID)
}

type Google_kms_key_ring struct {

    Google_kms_key_ring_id *string `lyra:"ignore"`

    Location string

    Name string

    Project *string

    Self_link *string

}

// Google_kms_key_ringHandler ...
type Google_kms_key_ringHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ringHandler) Create(desired *Google_kms_key_ring) (*Google_kms_key_ring, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_kms_key_ringHandler) Read(externalID string) (*Google_kms_key_ring, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring{ Google_kms_key_ring_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ringHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring", externalID)
}

type Google_kms_key_ring_iam_binding struct {

    Google_kms_key_ring_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Key_ring_id string

    Members []string

    Role string

}

// Google_kms_key_ring_iam_bindingHandler ...
type Google_kms_key_ring_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ring_iam_bindingHandler) Create(desired *Google_kms_key_ring_iam_binding) (*Google_kms_key_ring_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_kms_key_ring_iam_bindingHandler) Read(externalID string) (*Google_kms_key_ring_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_binding{ Google_kms_key_ring_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ring_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring_iam_binding", externalID)
}

type Google_kms_key_ring_iam_member struct {

    Google_kms_key_ring_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Key_ring_id string

    Member string

    Role string

}

// Google_kms_key_ring_iam_memberHandler ...
type Google_kms_key_ring_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ring_iam_memberHandler) Create(desired *Google_kms_key_ring_iam_member) (*Google_kms_key_ring_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_kms_key_ring_iam_memberHandler) Read(externalID string) (*Google_kms_key_ring_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_member{ Google_kms_key_ring_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ring_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring_iam_member", externalID)
}

type Google_kms_key_ring_iam_policy struct {

    Google_kms_key_ring_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Key_ring_id string

    Policy_data string

}

// Google_kms_key_ring_iam_policyHandler ...
type Google_kms_key_ring_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ring_iam_policyHandler) Create(desired *Google_kms_key_ring_iam_policy) (*Google_kms_key_ring_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_kms_key_ring_iam_policyHandler) Read(externalID string) (*Google_kms_key_ring_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_policy{ Google_kms_key_ring_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ring_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring_iam_policy", externalID)
}

type Google_logging_billing_account_exclusion struct {

    Google_logging_billing_account_exclusion_id *string `lyra:"ignore"`

    Billing_account string

    Description *string

    Disabled *bool

    Filter string

    Name string

}

// Google_logging_billing_account_exclusionHandler ...
type Google_logging_billing_account_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_billing_account_exclusionHandler) Create(desired *Google_logging_billing_account_exclusion) (*Google_logging_billing_account_exclusion, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_billing_account_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_billing_account_exclusionHandler) Read(externalID string) (*Google_logging_billing_account_exclusion, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_billing_account_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_billing_account_exclusion{ Google_logging_billing_account_exclusion_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_billing_account_exclusionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_billing_account_exclusion", externalID)
}

type Google_logging_billing_account_sink struct {

    Google_logging_billing_account_sink_id *string `lyra:"ignore"`

    Billing_account string

    Destination string

    Filter *string

    Name string

    Writer_identity *string

}

// Google_logging_billing_account_sinkHandler ...
type Google_logging_billing_account_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_billing_account_sinkHandler) Create(desired *Google_logging_billing_account_sink) (*Google_logging_billing_account_sink, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_billing_account_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_billing_account_sinkHandler) Read(externalID string) (*Google_logging_billing_account_sink, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_billing_account_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_billing_account_sink{ Google_logging_billing_account_sink_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_billing_account_sinkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_billing_account_sink", externalID)
}

type Google_logging_folder_exclusion struct {

    Google_logging_folder_exclusion_id *string `lyra:"ignore"`

    Description *string

    Disabled *bool

    Filter string

    Folder string

    Name string

}

// Google_logging_folder_exclusionHandler ...
type Google_logging_folder_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_folder_exclusionHandler) Create(desired *Google_logging_folder_exclusion) (*Google_logging_folder_exclusion, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_folder_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_folder_exclusionHandler) Read(externalID string) (*Google_logging_folder_exclusion, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_folder_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_folder_exclusion{ Google_logging_folder_exclusion_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_folder_exclusionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_folder_exclusion", externalID)
}

type Google_logging_folder_sink struct {

    Google_logging_folder_sink_id *string `lyra:"ignore"`

    Destination string

    Filter *string

    Folder string

    Include_children *bool

    Name string

    Writer_identity *string

}

// Google_logging_folder_sinkHandler ...
type Google_logging_folder_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_folder_sinkHandler) Create(desired *Google_logging_folder_sink) (*Google_logging_folder_sink, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_folder_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_folder_sinkHandler) Read(externalID string) (*Google_logging_folder_sink, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_folder_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_folder_sink{ Google_logging_folder_sink_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_folder_sinkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_folder_sink", externalID)
}

type Google_logging_organization_exclusion struct {

    Google_logging_organization_exclusion_id *string `lyra:"ignore"`

    Description *string

    Disabled *bool

    Filter string

    Name string

    Org_id string

}

// Google_logging_organization_exclusionHandler ...
type Google_logging_organization_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_organization_exclusionHandler) Create(desired *Google_logging_organization_exclusion) (*Google_logging_organization_exclusion, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_organization_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_organization_exclusionHandler) Read(externalID string) (*Google_logging_organization_exclusion, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_organization_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_organization_exclusion{ Google_logging_organization_exclusion_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_organization_exclusionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_organization_exclusion", externalID)
}

type Google_logging_organization_sink struct {

    Google_logging_organization_sink_id *string `lyra:"ignore"`

    Destination string

    Filter *string

    Include_children *bool

    Name string

    Org_id string

    Writer_identity *string

}

// Google_logging_organization_sinkHandler ...
type Google_logging_organization_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_organization_sinkHandler) Create(desired *Google_logging_organization_sink) (*Google_logging_organization_sink, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_organization_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_organization_sinkHandler) Read(externalID string) (*Google_logging_organization_sink, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_organization_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_organization_sink{ Google_logging_organization_sink_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_organization_sinkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_organization_sink", externalID)
}

type Google_logging_project_exclusion struct {

    Google_logging_project_exclusion_id *string `lyra:"ignore"`

    Description *string

    Disabled *bool

    Filter string

    Name string

    Project *string

}

// Google_logging_project_exclusionHandler ...
type Google_logging_project_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_project_exclusionHandler) Create(desired *Google_logging_project_exclusion) (*Google_logging_project_exclusion, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_project_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_project_exclusionHandler) Read(externalID string) (*Google_logging_project_exclusion, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_project_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_project_exclusion{ Google_logging_project_exclusion_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_project_exclusionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_project_exclusion", externalID)
}

type Google_logging_project_sink struct {

    Google_logging_project_sink_id *string `lyra:"ignore"`

    Destination string

    Filter *string

    Name string

    Project *string

    Unique_writer_identity *bool

    Writer_identity *string

}

// Google_logging_project_sinkHandler ...
type Google_logging_project_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_project_sinkHandler) Create(desired *Google_logging_project_sink) (*Google_logging_project_sink, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_project_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_logging_project_sinkHandler) Read(externalID string) (*Google_logging_project_sink, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_project_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_project_sink{ Google_logging_project_sink_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_logging_project_sinkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_project_sink", externalID)
}

type Google_monitoring_alert_policy_conditions_1029_condition_absent_1030_aggregations_1031 struct {

    Alignment_period *string

    Cross_series_reducer *string

    Group_by_fields *[]string

    Per_series_aligner *string

}

type Google_monitoring_alert_policy_conditions_1029_condition_absent_1030_trigger_1032 struct {

    Count *int

    Percent *float64

}

type Google_monitoring_alert_policy_conditions_1029_condition_absent_1030 struct {

    Aggregations *[]Google_monitoring_alert_policy_conditions_1029_condition_absent_1030_aggregations_1031

    Duration string

    Filter *string

    Trigger *[]Google_monitoring_alert_policy_conditions_1029_condition_absent_1030_trigger_1032

}

type Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033_aggregations_1034 struct {

    Alignment_period *string

    Cross_series_reducer *string

    Group_by_fields *[]string

    Per_series_aligner *string

}

type Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033_denominator_aggregations_1035 struct {

    Alignment_period *string

    Cross_series_reducer *string

    Group_by_fields *[]string

    Per_series_aligner *string

}

type Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033_trigger_1036 struct {

    Count *int

    Percent *float64

}

type Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033 struct {

    Aggregations *[]Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033_aggregations_1034

    Comparison string

    Denominator_aggregations *[]Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033_denominator_aggregations_1035

    Denominator_filter *string

    Duration string

    Filter *string

    Threshold_value *float64

    Trigger *[]Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033_trigger_1036

}

type Google_monitoring_alert_policy_conditions_1029 struct {

    Condition_absent *[]Google_monitoring_alert_policy_conditions_1029_condition_absent_1030

    Condition_threshold *[]Google_monitoring_alert_policy_conditions_1029_condition_threshold_1033

    Display_name string

    Name *string

}

type Google_monitoring_alert_policy_creation_record_1037 struct {

    Mutate_time *string

    Mutated_by *string

}

type Google_monitoring_alert_policy struct {

    Google_monitoring_alert_policy_id *string `lyra:"ignore"`

    Combiner string

    Conditions []Google_monitoring_alert_policy_conditions_1029

    Creation_record *[]Google_monitoring_alert_policy_creation_record_1037

    Display_name string

    Enabled bool

    Labels *[]string

    Name *string

    Notification_channels *[]string

    Project *string

}

// Google_monitoring_alert_policyHandler ...
type Google_monitoring_alert_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_alert_policyHandler) Create(desired *Google_monitoring_alert_policy) (*Google_monitoring_alert_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_alert_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_monitoring_alert_policyHandler) Read(externalID string) (*Google_monitoring_alert_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_alert_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_alert_policy{ Google_monitoring_alert_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_monitoring_alert_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_alert_policy", externalID)
}

type Google_monitoring_group struct {

    Google_monitoring_group_id *string `lyra:"ignore"`

    Display_name string

    Filter string

    Is_cluster *bool

    Name *string

    Parent_name *string

    Project *string

}

// Google_monitoring_groupHandler ...
type Google_monitoring_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_groupHandler) Create(desired *Google_monitoring_group) (*Google_monitoring_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_monitoring_groupHandler) Read(externalID string) (*Google_monitoring_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_group{ Google_monitoring_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_monitoring_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_group", externalID)
}

type Google_monitoring_notification_channel struct {

    Google_monitoring_notification_channel_id *string `lyra:"ignore"`

    Description *string

    Display_name string

    Enabled *bool

    Labels *map[string]string

    Name *string

    Project *string

    Type string

    User_labels *map[string]string

    Verification_status *string

}

// Google_monitoring_notification_channelHandler ...
type Google_monitoring_notification_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_notification_channelHandler) Create(desired *Google_monitoring_notification_channel) (*Google_monitoring_notification_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_notification_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_monitoring_notification_channelHandler) Read(externalID string) (*Google_monitoring_notification_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_notification_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_notification_channel{ Google_monitoring_notification_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_monitoring_notification_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_notification_channel", externalID)
}

type Google_monitoring_uptime_check_config_content_matchers_1038 struct {

    Content *string

}

type Google_monitoring_uptime_check_config_http_check_1039_auth_info_1040 struct {

    Password *string

    Username *string

}

type Google_monitoring_uptime_check_config_http_check_1039 struct {

    Auth_info *[]Google_monitoring_uptime_check_config_http_check_1039_auth_info_1040

    Headers *map[string]string

    Mask_headers *bool

    Path *string

    Port *int

    Use_ssl *bool

}

type Google_monitoring_uptime_check_config_internal_checkers_1041 struct {

    Display_name *string

    Gcp_zone *string

    Name *string

    Network *string

    Peer_project_id *string

}

type Google_monitoring_uptime_check_config_monitored_resource_1042 struct {

    Labels map[string]string

    Type string

}

type Google_monitoring_uptime_check_config_resource_group_1043 struct {

    Group_id *string

    Resource_type *string

}

type Google_monitoring_uptime_check_config_tcp_check_1044 struct {

    Port int

}

type Google_monitoring_uptime_check_config struct {

    Google_monitoring_uptime_check_config_id *string `lyra:"ignore"`

    Content_matchers *[]Google_monitoring_uptime_check_config_content_matchers_1038

    Display_name string

    Http_check *[]Google_monitoring_uptime_check_config_http_check_1039

    Internal_checkers *[]Google_monitoring_uptime_check_config_internal_checkers_1041

    Is_internal *bool

    Monitored_resource *[]Google_monitoring_uptime_check_config_monitored_resource_1042

    Name *string

    Period *string

    Project *string

    Resource_group *[]Google_monitoring_uptime_check_config_resource_group_1043

    Selected_regions *[]string

    Tcp_check *[]Google_monitoring_uptime_check_config_tcp_check_1044

    Timeout string

}

// Google_monitoring_uptime_check_configHandler ...
type Google_monitoring_uptime_check_configHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_uptime_check_configHandler) Create(desired *Google_monitoring_uptime_check_config) (*Google_monitoring_uptime_check_config, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_uptime_check_config", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_monitoring_uptime_check_configHandler) Read(externalID string) (*Google_monitoring_uptime_check_config, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_uptime_check_config", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_uptime_check_config{ Google_monitoring_uptime_check_config_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_monitoring_uptime_check_configHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_uptime_check_config", externalID)
}

type Google_organization_iam_binding struct {

    Google_organization_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Members []string

    Org_id string

    Role string

}

// Google_organization_iam_bindingHandler ...
type Google_organization_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_bindingHandler) Create(desired *Google_organization_iam_binding) (*Google_organization_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_organization_iam_bindingHandler) Read(externalID string) (*Google_organization_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_binding{ Google_organization_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_binding", externalID)
}

type Google_organization_iam_custom_role struct {

    Google_organization_iam_custom_role_id *string `lyra:"ignore"`

    Deleted *bool

    Description *string

    Org_id string

    Permissions []string

    Role_id string

    Stage *string

    Title string

}

// Google_organization_iam_custom_roleHandler ...
type Google_organization_iam_custom_roleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_custom_roleHandler) Create(desired *Google_organization_iam_custom_role) (*Google_organization_iam_custom_role, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_custom_role", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_organization_iam_custom_roleHandler) Read(externalID string) (*Google_organization_iam_custom_role, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_custom_role", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_custom_role{ Google_organization_iam_custom_role_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_custom_roleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_custom_role", externalID)
}

type Google_organization_iam_member struct {

    Google_organization_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Member string

    Org_id string

    Role string

}

// Google_organization_iam_memberHandler ...
type Google_organization_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_memberHandler) Create(desired *Google_organization_iam_member) (*Google_organization_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_organization_iam_memberHandler) Read(externalID string) (*Google_organization_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_member{ Google_organization_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_member", externalID)
}

type Google_organization_iam_policy struct {

    Google_organization_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Org_id string

    Policy_data string

}

// Google_organization_iam_policyHandler ...
type Google_organization_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_policyHandler) Create(desired *Google_organization_iam_policy) (*Google_organization_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_organization_iam_policyHandler) Read(externalID string) (*Google_organization_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_policy{ Google_organization_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_policy", externalID)
}

type Google_organization_policy_boolean_policy_1045 struct {

    Enforced bool

}

type Google_organization_policy_list_policy_1046_allow_1047 struct {

    All *bool

    Values *[]string

}

type Google_organization_policy_list_policy_1046_deny_1048 struct {

    All *bool

    Values *[]string

}

type Google_organization_policy_list_policy_1046 struct {

    Allow *[]Google_organization_policy_list_policy_1046_allow_1047

    Deny *[]Google_organization_policy_list_policy_1046_deny_1048

    Suggested_value *string

}

type Google_organization_policy_restore_policy_1049 struct {

    Default bool

}

type Google_organization_policy struct {

    Google_organization_policy_id *string `lyra:"ignore"`

    Boolean_policy *[]Google_organization_policy_boolean_policy_1045

    Constraint string

    Etag *string

    List_policy *[]Google_organization_policy_list_policy_1046

    Org_id string

    Restore_policy *[]Google_organization_policy_restore_policy_1049

    Update_time *string

    Version *int

}

// Google_organization_policyHandler ...
type Google_organization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_policyHandler) Create(desired *Google_organization_policy) (*Google_organization_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_organization_policyHandler) Read(externalID string) (*Google_organization_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_policy{ Google_organization_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_organization_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_policy", externalID)
}

type Google_project_app_engine_1050_feature_settings_1051 struct {

    Split_health_checks *bool

}

type Google_project_app_engine_1050_url_dispatch_rule_1052 struct {

    Domain *string

    Path *string

    Service *string

}

type Google_project_app_engine_1050 struct {

    Auth_domain *string

    Code_bucket *string

    Default_bucket *string

    Default_hostname *string

    Feature_settings *[]Google_project_app_engine_1050_feature_settings_1051

    Gcr_domain *string

    Location_id *string

    Name *string

    Serving_status *string

    Url_dispatch_rule *[]Google_project_app_engine_1050_url_dispatch_rule_1052

}

type Google_project struct {

    Google_project_id *string `lyra:"ignore"`

    App_engine *[]Google_project_app_engine_1050

    Auto_create_network *bool

    Billing_account *string

    Folder_id *string

    Labels *map[string]string

    Name string

    Number *string

    Org_id *string

    Policy_data *string

    Policy_etag *string

    Project_id string

    Skip_delete *bool

}

// Google_projectHandler ...
type Google_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_projectHandler) Create(desired *Google_project) (*Google_project, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_projectHandler) Read(externalID string) (*Google_project, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project{ Google_project_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_projectHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project", externalID)
}

type Google_project_iam_binding struct {

    Google_project_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Members []string

    Project *string

    Role string

}

// Google_project_iam_bindingHandler ...
type Google_project_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_bindingHandler) Create(desired *Google_project_iam_binding) (*Google_project_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_iam_bindingHandler) Read(externalID string) (*Google_project_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_binding{ Google_project_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_binding", externalID)
}

type Google_project_iam_custom_role struct {

    Google_project_iam_custom_role_id *string `lyra:"ignore"`

    Deleted *bool

    Description *string

    Permissions []string

    Project *string

    Role_id string

    Stage *string

    Title string

}

// Google_project_iam_custom_roleHandler ...
type Google_project_iam_custom_roleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_custom_roleHandler) Create(desired *Google_project_iam_custom_role) (*Google_project_iam_custom_role, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_custom_role", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_iam_custom_roleHandler) Read(externalID string) (*Google_project_iam_custom_role, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_custom_role", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_custom_role{ Google_project_iam_custom_role_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_iam_custom_roleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_custom_role", externalID)
}

type Google_project_iam_member struct {

    Google_project_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Member string

    Project *string

    Role string

}

// Google_project_iam_memberHandler ...
type Google_project_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_memberHandler) Create(desired *Google_project_iam_member) (*Google_project_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_iam_memberHandler) Read(externalID string) (*Google_project_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_member{ Google_project_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_member", externalID)
}

type Google_project_iam_policy struct {

    Google_project_iam_policy_id *string `lyra:"ignore"`

    Authoritative *bool

    Disable_project *bool

    Etag *string

    Policy_data string

    Project *string

    Restore_policy *string

}

// Google_project_iam_policyHandler ...
type Google_project_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_policyHandler) Create(desired *Google_project_iam_policy) (*Google_project_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_iam_policyHandler) Read(externalID string) (*Google_project_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_policy{ Google_project_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_policy", externalID)
}

type Google_project_organization_policy_boolean_policy_1053 struct {

    Enforced bool

}

type Google_project_organization_policy_list_policy_1054_allow_1055 struct {

    All *bool

    Values *[]string

}

type Google_project_organization_policy_list_policy_1054_deny_1056 struct {

    All *bool

    Values *[]string

}

type Google_project_organization_policy_list_policy_1054 struct {

    Allow *[]Google_project_organization_policy_list_policy_1054_allow_1055

    Deny *[]Google_project_organization_policy_list_policy_1054_deny_1056

    Suggested_value *string

}

type Google_project_organization_policy_restore_policy_1057 struct {

    Default bool

}

type Google_project_organization_policy struct {

    Google_project_organization_policy_id *string `lyra:"ignore"`

    Boolean_policy *[]Google_project_organization_policy_boolean_policy_1053

    Constraint string

    Etag *string

    List_policy *[]Google_project_organization_policy_list_policy_1054

    Project string

    Restore_policy *[]Google_project_organization_policy_restore_policy_1057

    Update_time *string

    Version *int

}

// Google_project_organization_policyHandler ...
type Google_project_organization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_organization_policyHandler) Create(desired *Google_project_organization_policy) (*Google_project_organization_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_organization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_organization_policyHandler) Read(externalID string) (*Google_project_organization_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_organization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_organization_policy{ Google_project_organization_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_organization_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_organization_policy", externalID)
}

type Google_project_service struct {

    Google_project_service_id *string `lyra:"ignore"`

    Disable_on_destroy *bool

    Project *string

    Service string

}

// Google_project_serviceHandler ...
type Google_project_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_serviceHandler) Create(desired *Google_project_service) (*Google_project_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_serviceHandler) Read(externalID string) (*Google_project_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_service{ Google_project_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_service", externalID)
}

type Google_project_services struct {

    Google_project_services_id *string `lyra:"ignore"`

    Disable_on_destroy *bool

    Project *string

    Services []string

}

// Google_project_servicesHandler ...
type Google_project_servicesHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_servicesHandler) Create(desired *Google_project_services) (*Google_project_services, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_services", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_servicesHandler) Read(externalID string) (*Google_project_services, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_services", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_services{ Google_project_services_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_servicesHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_services", externalID)
}

type Google_project_usage_export_bucket struct {

    Google_project_usage_export_bucket_id *string `lyra:"ignore"`

    Bucket_name string

    Prefix *string

    Project *string

}

// Google_project_usage_export_bucketHandler ...
type Google_project_usage_export_bucketHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_usage_export_bucketHandler) Create(desired *Google_project_usage_export_bucket) (*Google_project_usage_export_bucket, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_usage_export_bucket", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_project_usage_export_bucketHandler) Read(externalID string) (*Google_project_usage_export_bucket, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_usage_export_bucket", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_usage_export_bucket{ Google_project_usage_export_bucket_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_project_usage_export_bucketHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_usage_export_bucket", externalID)
}

type Google_pubsub_subscription_push_config_1058 struct {

    Attributes *map[string]string

    Push_endpoint string

}

type Google_pubsub_subscription struct {

    Google_pubsub_subscription_id *string `lyra:"ignore"`

    Ack_deadline_seconds *int

    Name string

    Path *string

    Project *string

    Push_config *[]Google_pubsub_subscription_push_config_1058

    Topic string

}

// Google_pubsub_subscriptionHandler ...
type Google_pubsub_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscriptionHandler) Create(desired *Google_pubsub_subscription) (*Google_pubsub_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_subscriptionHandler) Read(externalID string) (*Google_pubsub_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription{ Google_pubsub_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription", externalID)
}

type Google_pubsub_subscription_iam_binding struct {

    Google_pubsub_subscription_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Members []string

    Project *string

    Role string

    Subscription string

}

// Google_pubsub_subscription_iam_bindingHandler ...
type Google_pubsub_subscription_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscription_iam_bindingHandler) Create(desired *Google_pubsub_subscription_iam_binding) (*Google_pubsub_subscription_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_subscription_iam_bindingHandler) Read(externalID string) (*Google_pubsub_subscription_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_binding{ Google_pubsub_subscription_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscription_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription_iam_binding", externalID)
}

type Google_pubsub_subscription_iam_member struct {

    Google_pubsub_subscription_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Member string

    Project *string

    Role string

    Subscription string

}

// Google_pubsub_subscription_iam_memberHandler ...
type Google_pubsub_subscription_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscription_iam_memberHandler) Create(desired *Google_pubsub_subscription_iam_member) (*Google_pubsub_subscription_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_subscription_iam_memberHandler) Read(externalID string) (*Google_pubsub_subscription_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_member{ Google_pubsub_subscription_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscription_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription_iam_member", externalID)
}

type Google_pubsub_subscription_iam_policy struct {

    Google_pubsub_subscription_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Policy_data string

    Project *string

    Subscription string

}

// Google_pubsub_subscription_iam_policyHandler ...
type Google_pubsub_subscription_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscription_iam_policyHandler) Create(desired *Google_pubsub_subscription_iam_policy) (*Google_pubsub_subscription_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_subscription_iam_policyHandler) Read(externalID string) (*Google_pubsub_subscription_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_policy{ Google_pubsub_subscription_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscription_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription_iam_policy", externalID)
}

type Google_pubsub_topic struct {

    Google_pubsub_topic_id *string `lyra:"ignore"`

    Name string

    Project *string

}

// Google_pubsub_topicHandler ...
type Google_pubsub_topicHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topicHandler) Create(desired *Google_pubsub_topic) (*Google_pubsub_topic, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_topicHandler) Read(externalID string) (*Google_pubsub_topic, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic{ Google_pubsub_topic_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topicHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic", externalID)
}

type Google_pubsub_topic_iam_binding struct {

    Google_pubsub_topic_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Members []string

    Project *string

    Role string

    Topic string

}

// Google_pubsub_topic_iam_bindingHandler ...
type Google_pubsub_topic_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topic_iam_bindingHandler) Create(desired *Google_pubsub_topic_iam_binding) (*Google_pubsub_topic_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_topic_iam_bindingHandler) Read(externalID string) (*Google_pubsub_topic_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_binding{ Google_pubsub_topic_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topic_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic_iam_binding", externalID)
}

type Google_pubsub_topic_iam_member struct {

    Google_pubsub_topic_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Member string

    Project *string

    Role string

    Topic string

}

// Google_pubsub_topic_iam_memberHandler ...
type Google_pubsub_topic_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topic_iam_memberHandler) Create(desired *Google_pubsub_topic_iam_member) (*Google_pubsub_topic_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_topic_iam_memberHandler) Read(externalID string) (*Google_pubsub_topic_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_member{ Google_pubsub_topic_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topic_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic_iam_member", externalID)
}

type Google_pubsub_topic_iam_policy struct {

    Google_pubsub_topic_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Policy_data string

    Project *string

    Topic string

}

// Google_pubsub_topic_iam_policyHandler ...
type Google_pubsub_topic_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topic_iam_policyHandler) Create(desired *Google_pubsub_topic_iam_policy) (*Google_pubsub_topic_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_pubsub_topic_iam_policyHandler) Read(externalID string) (*Google_pubsub_topic_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_policy{ Google_pubsub_topic_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topic_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic_iam_policy", externalID)
}

type Google_redis_instance struct {

    Google_redis_instance_id *string `lyra:"ignore"`

    Alternative_location_id *string

    Authorized_network *string

    Create_time *string

    Current_location_id *string

    Display_name *string

    Host *string

    Labels *map[string]string

    Location_id *string

    Memory_size_gb int

    Name string

    Port *int

    Project *string

    Redis_configs *map[string]string

    Redis_version *string

    Region *string

    Reserved_ip_range *string

    Tier *string

}

// Google_redis_instanceHandler ...
type Google_redis_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_redis_instanceHandler) Create(desired *Google_redis_instance) (*Google_redis_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_redis_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_redis_instanceHandler) Read(externalID string) (*Google_redis_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_redis_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_redis_instance{ Google_redis_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_redis_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_redis_instance", externalID)
}

type Google_resource_manager_lien struct {

    Google_resource_manager_lien_id *string `lyra:"ignore"`

    Create_time *string

    Name *string

    Origin string

    Parent string

    Reason string

    Restrictions []string

}

// Google_resource_manager_lienHandler ...
type Google_resource_manager_lienHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_resource_manager_lienHandler) Create(desired *Google_resource_manager_lien) (*Google_resource_manager_lien, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_resource_manager_lien", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_resource_manager_lienHandler) Read(externalID string) (*Google_resource_manager_lien, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_resource_manager_lien", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_resource_manager_lien{ Google_resource_manager_lien_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_resource_manager_lienHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_resource_manager_lien", externalID)
}

type Google_runtimeconfig_config struct {

    Google_runtimeconfig_config_id *string `lyra:"ignore"`

    Description *string

    Name string

    Project *string

}

// Google_runtimeconfig_configHandler ...
type Google_runtimeconfig_configHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_runtimeconfig_configHandler) Create(desired *Google_runtimeconfig_config) (*Google_runtimeconfig_config, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_runtimeconfig_config", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_runtimeconfig_configHandler) Read(externalID string) (*Google_runtimeconfig_config, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_runtimeconfig_config", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_runtimeconfig_config{ Google_runtimeconfig_config_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_runtimeconfig_configHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_runtimeconfig_config", externalID)
}

type Google_runtimeconfig_variable struct {

    Google_runtimeconfig_variable_id *string `lyra:"ignore"`

    Name string

    Parent string

    Project *string

    Text *string

    Update_time *string

    Value *string

}

// Google_runtimeconfig_variableHandler ...
type Google_runtimeconfig_variableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_runtimeconfig_variableHandler) Create(desired *Google_runtimeconfig_variable) (*Google_runtimeconfig_variable, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_runtimeconfig_variable", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_runtimeconfig_variableHandler) Read(externalID string) (*Google_runtimeconfig_variable, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_runtimeconfig_variable", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_runtimeconfig_variable{ Google_runtimeconfig_variable_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_runtimeconfig_variableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_runtimeconfig_variable", externalID)
}

type Google_service_account struct {

    Google_service_account_id *string `lyra:"ignore"`

    Account_id string

    Display_name *string

    Email *string

    Name *string

    Policy_data *string

    Project *string

    Unique_id *string

}

// Google_service_accountHandler ...
type Google_service_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_accountHandler) Create(desired *Google_service_account) (*Google_service_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_service_accountHandler) Read(externalID string) (*Google_service_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account{ Google_service_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_service_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account", externalID)
}

type Google_service_account_iam_binding struct {

    Google_service_account_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Members []string

    Role string

    Service_account_id string

}

// Google_service_account_iam_bindingHandler ...
type Google_service_account_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_iam_bindingHandler) Create(desired *Google_service_account_iam_binding) (*Google_service_account_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_service_account_iam_bindingHandler) Read(externalID string) (*Google_service_account_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_binding{ Google_service_account_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_service_account_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_iam_binding", externalID)
}

type Google_service_account_iam_member struct {

    Google_service_account_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Member string

    Role string

    Service_account_id string

}

// Google_service_account_iam_memberHandler ...
type Google_service_account_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_iam_memberHandler) Create(desired *Google_service_account_iam_member) (*Google_service_account_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_service_account_iam_memberHandler) Read(externalID string) (*Google_service_account_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_member{ Google_service_account_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_service_account_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_iam_member", externalID)
}

type Google_service_account_iam_policy struct {

    Google_service_account_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Policy_data string

    Service_account_id string

}

// Google_service_account_iam_policyHandler ...
type Google_service_account_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_iam_policyHandler) Create(desired *Google_service_account_iam_policy) (*Google_service_account_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_service_account_iam_policyHandler) Read(externalID string) (*Google_service_account_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_policy{ Google_service_account_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_service_account_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_iam_policy", externalID)
}

type Google_service_account_key struct {

    Google_service_account_key_id *string `lyra:"ignore"`

    Key_algorithm *string

    Name *string

    Pgp_key *string

    Private_key *string

    Private_key_encrypted *string

    Private_key_fingerprint *string

    Private_key_type *string

    Public_key *string

    Public_key_type *string

    Service_account_id string

    Valid_after *string

    Valid_before *string

}

// Google_service_account_keyHandler ...
type Google_service_account_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_keyHandler) Create(desired *Google_service_account_key) (*Google_service_account_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_service_account_keyHandler) Read(externalID string) (*Google_service_account_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_key{ Google_service_account_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_service_account_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_key", externalID)
}

type Google_sourcerepo_repository struct {

    Google_sourcerepo_repository_id *string `lyra:"ignore"`

    Name string

    Project *string

    Size *int

    Url *string

}

// Google_sourcerepo_repositoryHandler ...
type Google_sourcerepo_repositoryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sourcerepo_repositoryHandler) Create(desired *Google_sourcerepo_repository) (*Google_sourcerepo_repository, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sourcerepo_repository", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_sourcerepo_repositoryHandler) Read(externalID string) (*Google_sourcerepo_repository, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sourcerepo_repository", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sourcerepo_repository{ Google_sourcerepo_repository_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_sourcerepo_repositoryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sourcerepo_repository", externalID)
}

type Google_spanner_database struct {

    Google_spanner_database_id *string `lyra:"ignore"`

    Ddl *[]string

    Instance string

    Name string

    Project *string

    State *string

}

// Google_spanner_databaseHandler ...
type Google_spanner_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_databaseHandler) Create(desired *Google_spanner_database) (*Google_spanner_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_databaseHandler) Read(externalID string) (*Google_spanner_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database{ Google_spanner_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database", externalID)
}

type Google_spanner_database_iam_binding struct {

    Google_spanner_database_iam_binding_id *string `lyra:"ignore"`

    Database string

    Etag *string

    Instance string

    Members []string

    Project *string

    Role string

}

// Google_spanner_database_iam_bindingHandler ...
type Google_spanner_database_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_database_iam_bindingHandler) Create(desired *Google_spanner_database_iam_binding) (*Google_spanner_database_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_database_iam_bindingHandler) Read(externalID string) (*Google_spanner_database_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_binding{ Google_spanner_database_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_database_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database_iam_binding", externalID)
}

type Google_spanner_database_iam_member struct {

    Google_spanner_database_iam_member_id *string `lyra:"ignore"`

    Database string

    Etag *string

    Instance string

    Member string

    Project *string

    Role string

}

// Google_spanner_database_iam_memberHandler ...
type Google_spanner_database_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_database_iam_memberHandler) Create(desired *Google_spanner_database_iam_member) (*Google_spanner_database_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_database_iam_memberHandler) Read(externalID string) (*Google_spanner_database_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_member{ Google_spanner_database_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_database_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database_iam_member", externalID)
}

type Google_spanner_database_iam_policy struct {

    Google_spanner_database_iam_policy_id *string `lyra:"ignore"`

    Database string

    Etag *string

    Instance string

    Policy_data string

    Project *string

}

// Google_spanner_database_iam_policyHandler ...
type Google_spanner_database_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_database_iam_policyHandler) Create(desired *Google_spanner_database_iam_policy) (*Google_spanner_database_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_database_iam_policyHandler) Read(externalID string) (*Google_spanner_database_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_policy{ Google_spanner_database_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_database_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database_iam_policy", externalID)
}

type Google_spanner_instance struct {

    Google_spanner_instance_id *string `lyra:"ignore"`

    Config string

    Display_name string

    Labels *map[string]string

    Name *string

    Num_nodes *int

    Project *string

    State *string

}

// Google_spanner_instanceHandler ...
type Google_spanner_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instanceHandler) Create(desired *Google_spanner_instance) (*Google_spanner_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_instanceHandler) Read(externalID string) (*Google_spanner_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance{ Google_spanner_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance", externalID)
}

type Google_spanner_instance_iam_binding struct {

    Google_spanner_instance_iam_binding_id *string `lyra:"ignore"`

    Etag *string

    Instance string

    Members []string

    Project *string

    Role string

}

// Google_spanner_instance_iam_bindingHandler ...
type Google_spanner_instance_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instance_iam_bindingHandler) Create(desired *Google_spanner_instance_iam_binding) (*Google_spanner_instance_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_instance_iam_bindingHandler) Read(externalID string) (*Google_spanner_instance_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_binding{ Google_spanner_instance_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_instance_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance_iam_binding", externalID)
}

type Google_spanner_instance_iam_member struct {

    Google_spanner_instance_iam_member_id *string `lyra:"ignore"`

    Etag *string

    Instance string

    Member string

    Project *string

    Role string

}

// Google_spanner_instance_iam_memberHandler ...
type Google_spanner_instance_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instance_iam_memberHandler) Create(desired *Google_spanner_instance_iam_member) (*Google_spanner_instance_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_instance_iam_memberHandler) Read(externalID string) (*Google_spanner_instance_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_member{ Google_spanner_instance_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_instance_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance_iam_member", externalID)
}

type Google_spanner_instance_iam_policy struct {

    Google_spanner_instance_iam_policy_id *string `lyra:"ignore"`

    Etag *string

    Instance string

    Policy_data string

    Project *string

}

// Google_spanner_instance_iam_policyHandler ...
type Google_spanner_instance_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instance_iam_policyHandler) Create(desired *Google_spanner_instance_iam_policy) (*Google_spanner_instance_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_spanner_instance_iam_policyHandler) Read(externalID string) (*Google_spanner_instance_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_policy{ Google_spanner_instance_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_spanner_instance_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance_iam_policy", externalID)
}

type Google_sql_database struct {

    Google_sql_database_id *string `lyra:"ignore"`

    Charset *string

    Collation *string

    Instance string

    Name string

    Project *string

    Self_link *string

}

// Google_sql_databaseHandler ...
type Google_sql_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_databaseHandler) Create(desired *Google_sql_database) (*Google_sql_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_sql_databaseHandler) Read(externalID string) (*Google_sql_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_database{ Google_sql_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_sql_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_database", externalID)
}

type Google_sql_database_instance_ip_address_1059 struct {

    Ip_address *string

    Time_to_retire *string

}

type Google_sql_database_instance_replica_configuration_1060 struct {

    Ca_certificate *string

    Client_certificate *string

    Client_key *string

    Connect_retry_interval *int

    Dump_file_path *string

    Failover_target *bool

    Master_heartbeat_period *int

    Password *string

    Ssl_cipher *string

    Username *string

    Verify_server_certificate *bool

}

type Google_sql_database_instance_server_ca_cert_1061 struct {

    Cert *string

    Common_name *string

    Create_time *string

    Expiration_time *string

    Sha1_fingerprint *string

}

type Google_sql_database_instance_settings_1062_backup_configuration_1063 struct {

    Binary_log_enabled *bool

    Enabled *bool

    Start_time *string

}

type Google_sql_database_instance_settings_1062_database_flags_1064 struct {

    Name *string

    Value *string

}

type Google_sql_database_instance_settings_1062_ip_configuration_1065_authorized_networks_1066 struct {

    Expiration_time *string

    Name *string

    Value *string

}

type Google_sql_database_instance_settings_1062_ip_configuration_1065 struct {

    Authorized_networks *[]Google_sql_database_instance_settings_1062_ip_configuration_1065_authorized_networks_1066

    Ipv4_enabled *bool

    Private_network *string

    Require_ssl *bool

}

type Google_sql_database_instance_settings_1062_location_preference_1067 struct {

    Follow_gae_application *string

    Zone *string

}

type Google_sql_database_instance_settings_1062_maintenance_window_1068 struct {

    Day *int

    Hour *int

    Update_track *string

}

type Google_sql_database_instance_settings_1062 struct {

    Activation_policy *string

    Authorized_gae_applications *[]string

    Availability_type *string

    Backup_configuration *[]Google_sql_database_instance_settings_1062_backup_configuration_1063

    Crash_safe_replication *bool

    Database_flags *[]Google_sql_database_instance_settings_1062_database_flags_1064

    Disk_autoresize *bool

    Disk_size *int

    Disk_type *string

    Ip_configuration *[]Google_sql_database_instance_settings_1062_ip_configuration_1065

    Location_preference *[]Google_sql_database_instance_settings_1062_location_preference_1067

    Maintenance_window *[]Google_sql_database_instance_settings_1062_maintenance_window_1068

    Pricing_plan *string

    Replication_type *string

    Tier string

    User_labels *map[string]string

    Version *int

}

type Google_sql_database_instance struct {

    Google_sql_database_instance_id *string `lyra:"ignore"`

    Connection_name *string

    Database_version *string

    First_ip_address *string

    Ip_address *[]Google_sql_database_instance_ip_address_1059

    Master_instance_name *string

    Name *string

    Project *string

    Region *string

    Replica_configuration *[]Google_sql_database_instance_replica_configuration_1060

    Self_link *string

    Server_ca_cert *[]Google_sql_database_instance_server_ca_cert_1061

    Service_account_email_address *string

    Settings []Google_sql_database_instance_settings_1062

}

// Google_sql_database_instanceHandler ...
type Google_sql_database_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_database_instanceHandler) Create(desired *Google_sql_database_instance) (*Google_sql_database_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_database_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_sql_database_instanceHandler) Read(externalID string) (*Google_sql_database_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_database_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_database_instance{ Google_sql_database_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_sql_database_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_database_instance", externalID)
}

type Google_sql_ssl_cert struct {

    Google_sql_ssl_cert_id *string `lyra:"ignore"`

    Cert *string

    Cert_serial_number *string

    Common_name string

    Create_time *string

    Expiration_time *string

    Instance string

    Private_key *string

    Server_ca_cert *string

    Sha1_fingerprint *string

}

// Google_sql_ssl_certHandler ...
type Google_sql_ssl_certHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_ssl_certHandler) Create(desired *Google_sql_ssl_cert) (*Google_sql_ssl_cert, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_ssl_cert", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_sql_ssl_certHandler) Read(externalID string) (*Google_sql_ssl_cert, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_ssl_cert", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_ssl_cert{ Google_sql_ssl_cert_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_sql_ssl_certHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_ssl_cert", externalID)
}

type Google_sql_user struct {

    Google_sql_user_id *string `lyra:"ignore"`

    Host *string

    Instance string

    Name string

    Password *string

    Project *string

}

// Google_sql_userHandler ...
type Google_sql_userHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_userHandler) Create(desired *Google_sql_user) (*Google_sql_user, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_user", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_sql_userHandler) Read(externalID string) (*Google_sql_user, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_user", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_user{ Google_sql_user_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_sql_userHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_user", externalID)
}

type Google_storage_bucket_cors_1069 struct {

    Max_age_seconds *int

    Method *[]string

    Origin *[]string

    Response_header *[]string

}

type Google_storage_bucket_encryption_1070 struct {

    Default_kms_key_name string

}

type Google_storage_bucket_lifecycle_rule_1071_action_1072 struct {

    Storage_class *string

    Type string

}

type Google_storage_bucket_lifecycle_rule_1071_condition_1073 struct {

    Age *int

    Created_before *string

    Is_live *bool

    Matches_storage_class *[]string

    Num_newer_versions *int

}

type Google_storage_bucket_lifecycle_rule_1071 struct {

    Action []Google_storage_bucket_lifecycle_rule_1071_action_1072

    Condition []Google_storage_bucket_lifecycle_rule_1071_condition_1073

}

type Google_storage_bucket_logging_1074 struct {

    Log_bucket string

    Log_object_prefix *string

}

type Google_storage_bucket_versioning_1075 struct {

    Enabled *bool

}

type Google_storage_bucket_website_1076 struct {

    Main_page_suffix *string

    Not_found_page *string

}

type Google_storage_bucket struct {

    Google_storage_bucket_id *string `lyra:"ignore"`

    Cors *[]Google_storage_bucket_cors_1069

    Encryption *[]Google_storage_bucket_encryption_1070

    Force_destroy *bool

    Labels *map[string]string

    Lifecycle_rule *[]Google_storage_bucket_lifecycle_rule_1071

    Location *string

    Logging *[]Google_storage_bucket_logging_1074

    Name string

    Predefined_acl *string

    Project *string

    Self_link *string

    Storage_class *string

    Url *string

    Versioning *[]Google_storage_bucket_versioning_1075

    Website *[]Google_storage_bucket_website_1076

}

// Google_storage_bucketHandler ...
type Google_storage_bucketHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucketHandler) Create(desired *Google_storage_bucket) (*Google_storage_bucket, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_bucketHandler) Read(externalID string) (*Google_storage_bucket, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket{ Google_storage_bucket_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_bucketHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket", externalID)
}

type Google_storage_bucket_acl struct {

    Google_storage_bucket_acl_id *string `lyra:"ignore"`

    Bucket string

    Default_acl *string

    Predefined_acl *string

    Role_entity *[]string

}

// Google_storage_bucket_aclHandler ...
type Google_storage_bucket_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_aclHandler) Create(desired *Google_storage_bucket_acl) (*Google_storage_bucket_acl, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_bucket_aclHandler) Read(externalID string) (*Google_storage_bucket_acl, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_acl{ Google_storage_bucket_acl_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_aclHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_acl", externalID)
}

type Google_storage_bucket_iam_binding struct {

    Google_storage_bucket_iam_binding_id *string `lyra:"ignore"`

    Bucket string

    Etag *string

    Members []string

    Role string

}

// Google_storage_bucket_iam_bindingHandler ...
type Google_storage_bucket_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_iam_bindingHandler) Create(desired *Google_storage_bucket_iam_binding) (*Google_storage_bucket_iam_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_bucket_iam_bindingHandler) Read(externalID string) (*Google_storage_bucket_iam_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_binding{ Google_storage_bucket_iam_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_iam_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_iam_binding", externalID)
}

type Google_storage_bucket_iam_member struct {

    Google_storage_bucket_iam_member_id *string `lyra:"ignore"`

    Bucket string

    Etag *string

    Member string

    Role string

}

// Google_storage_bucket_iam_memberHandler ...
type Google_storage_bucket_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_iam_memberHandler) Create(desired *Google_storage_bucket_iam_member) (*Google_storage_bucket_iam_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_bucket_iam_memberHandler) Read(externalID string) (*Google_storage_bucket_iam_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_member{ Google_storage_bucket_iam_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_iam_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_iam_member", externalID)
}

type Google_storage_bucket_iam_policy struct {

    Google_storage_bucket_iam_policy_id *string `lyra:"ignore"`

    Bucket string

    Etag *string

    Policy_data string

}

// Google_storage_bucket_iam_policyHandler ...
type Google_storage_bucket_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_iam_policyHandler) Create(desired *Google_storage_bucket_iam_policy) (*Google_storage_bucket_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_bucket_iam_policyHandler) Read(externalID string) (*Google_storage_bucket_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_policy{ Google_storage_bucket_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_iam_policy", externalID)
}

type Google_storage_bucket_object struct {

    Google_storage_bucket_object_id *string `lyra:"ignore"`

    Bucket string

    Cache_control *string

    Content *string

    Content_disposition *string

    Content_encoding *string

    Content_language *string

    Content_type *string

    Crc32c *string

    Detect_md5hash *string

    Md5hash *string

    Name string

    Predefined_acl *string

    Source *string

    Storage_class *string

}

// Google_storage_bucket_objectHandler ...
type Google_storage_bucket_objectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_objectHandler) Create(desired *Google_storage_bucket_object) (*Google_storage_bucket_object, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_object", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_bucket_objectHandler) Read(externalID string) (*Google_storage_bucket_object, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_object", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_object{ Google_storage_bucket_object_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_objectHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_object", externalID)
}

type Google_storage_default_object_access_control_project_team_1077 struct {

    Project_number *string

    Team *string

}

type Google_storage_default_object_access_control struct {

    Google_storage_default_object_access_control_id *string `lyra:"ignore"`

    Bucket string

    Domain *string

    Email *string

    Entity string

    Entity_id *string

    Generation *int

    Object *string

    Project_team *[]Google_storage_default_object_access_control_project_team_1077

    Role string

}

// Google_storage_default_object_access_controlHandler ...
type Google_storage_default_object_access_controlHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_default_object_access_controlHandler) Create(desired *Google_storage_default_object_access_control) (*Google_storage_default_object_access_control, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_default_object_access_control", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_default_object_access_controlHandler) Read(externalID string) (*Google_storage_default_object_access_control, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_default_object_access_control", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_default_object_access_control{ Google_storage_default_object_access_control_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_default_object_access_controlHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_default_object_access_control", externalID)
}

type Google_storage_default_object_acl struct {

    Google_storage_default_object_acl_id *string `lyra:"ignore"`

    Bucket string

    Role_entity *[]string

}

// Google_storage_default_object_aclHandler ...
type Google_storage_default_object_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_default_object_aclHandler) Create(desired *Google_storage_default_object_acl) (*Google_storage_default_object_acl, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_default_object_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_default_object_aclHandler) Read(externalID string) (*Google_storage_default_object_acl, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_default_object_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_default_object_acl{ Google_storage_default_object_acl_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_default_object_aclHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_default_object_acl", externalID)
}

type Google_storage_notification struct {

    Google_storage_notification_id *string `lyra:"ignore"`

    Bucket string

    Custom_attributes *map[string]string

    Event_types *[]string

    Object_name_prefix *string

    Payload_format string

    Self_link *string

    Topic string

}

// Google_storage_notificationHandler ...
type Google_storage_notificationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_notificationHandler) Create(desired *Google_storage_notification) (*Google_storage_notification, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_notification", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_notificationHandler) Read(externalID string) (*Google_storage_notification, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_notification", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_notification{ Google_storage_notification_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_notificationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_notification", externalID)
}

type Google_storage_object_access_control_project_team_1078 struct {

    Project_number *string

    Team *string

}

type Google_storage_object_access_control struct {

    Google_storage_object_access_control_id *string `lyra:"ignore"`

    Bucket string

    Domain *string

    Email *string

    Entity string

    Entity_id *string

    Generation *int

    Object string

    Project_team *[]Google_storage_object_access_control_project_team_1078

    Role string

}

// Google_storage_object_access_controlHandler ...
type Google_storage_object_access_controlHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_object_access_controlHandler) Create(desired *Google_storage_object_access_control) (*Google_storage_object_access_control, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_object_access_control", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_object_access_controlHandler) Read(externalID string) (*Google_storage_object_access_control, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_object_access_control", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_object_access_control{ Google_storage_object_access_control_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_object_access_controlHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_object_access_control", externalID)
}

type Google_storage_object_acl struct {

    Google_storage_object_acl_id *string `lyra:"ignore"`

    Bucket string

    Object string

    Predefined_acl *string

    Role_entity *[]string

}

// Google_storage_object_aclHandler ...
type Google_storage_object_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_object_aclHandler) Create(desired *Google_storage_object_acl) (*Google_storage_object_acl, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_object_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Google_storage_object_aclHandler) Read(externalID string) (*Google_storage_object_acl, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_object_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_object_acl{ Google_storage_object_acl_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Google_storage_object_aclHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_object_acl", externalID)
}
