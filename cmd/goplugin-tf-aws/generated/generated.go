// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package generated

import (
	"sync"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/terraform"
	"github.com/lyraproj/lyra/pkg/bridge"
	"github.com/lyraproj/puppet-evaluator/eval"
	"github.com/lyraproj/servicesdk/service"
)

var once sync.Once
var Config *terraform.ResourceConfig

func configureProvider(p *schema.Provider) {
	once.Do(func() {
		if Config == nil {
			Config = &terraform.ResourceConfig{
				Config: map[string]interface{}{},
			}
		}
		err := p.Configure(Config)
		if err != nil {
			panic(err)
		}
	})
}

func Initialize(sb *service.ServerBuilder, p *schema.Provider) {
    var evs []eval.Type
    evs = sb.RegisterTypes("TerraformAws", Aws_acm_certificate{})
    sb.RegisterHandler("TerraformAws::Aws_acm_certificateHandler", &Aws_acm_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_acm_certificate_validation{})
    sb.RegisterHandler("TerraformAws::Aws_acm_certificate_validationHandler", &Aws_acm_certificate_validationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_acmpca_certificate_authority{})
    sb.RegisterHandler("TerraformAws::Aws_acmpca_certificate_authorityHandler", &Aws_acmpca_certificate_authorityHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_alb{})
    sb.RegisterHandler("TerraformAws::Aws_albHandler", &Aws_albHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_alb_listener{})
    sb.RegisterHandler("TerraformAws::Aws_alb_listenerHandler", &Aws_alb_listenerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_alb_listener_certificate{})
    sb.RegisterHandler("TerraformAws::Aws_alb_listener_certificateHandler", &Aws_alb_listener_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_alb_listener_rule{})
    sb.RegisterHandler("TerraformAws::Aws_alb_listener_ruleHandler", &Aws_alb_listener_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_alb_target_group{})
    sb.RegisterHandler("TerraformAws::Aws_alb_target_groupHandler", &Aws_alb_target_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_alb_target_group_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_alb_target_group_attachmentHandler", &Aws_alb_target_group_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ami{})
    sb.RegisterHandler("TerraformAws::Aws_amiHandler", &Aws_amiHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ami_copy{})
    sb.RegisterHandler("TerraformAws::Aws_ami_copyHandler", &Aws_ami_copyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ami_from_instance{})
    sb.RegisterHandler("TerraformAws::Aws_ami_from_instanceHandler", &Aws_ami_from_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ami_launch_permission{})
    sb.RegisterHandler("TerraformAws::Aws_ami_launch_permissionHandler", &Aws_ami_launch_permissionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_account{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_accountHandler", &Aws_api_gateway_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_api_key{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_api_keyHandler", &Aws_api_gateway_api_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_authorizer{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_authorizerHandler", &Aws_api_gateway_authorizerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_base_path_mapping{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_base_path_mappingHandler", &Aws_api_gateway_base_path_mappingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_client_certificate{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_client_certificateHandler", &Aws_api_gateway_client_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_deployment{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_deploymentHandler", &Aws_api_gateway_deploymentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_documentation_part{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_documentation_partHandler", &Aws_api_gateway_documentation_partHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_documentation_version{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_documentation_versionHandler", &Aws_api_gateway_documentation_versionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_domain_name{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_domain_nameHandler", &Aws_api_gateway_domain_nameHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_gateway_response{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_gateway_responseHandler", &Aws_api_gateway_gateway_responseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_integration{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_integrationHandler", &Aws_api_gateway_integrationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_integration_response{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_integration_responseHandler", &Aws_api_gateway_integration_responseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_method{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_methodHandler", &Aws_api_gateway_methodHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_method_response{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_method_responseHandler", &Aws_api_gateway_method_responseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_method_settings{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_method_settingsHandler", &Aws_api_gateway_method_settingsHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_model{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_modelHandler", &Aws_api_gateway_modelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_request_validator{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_request_validatorHandler", &Aws_api_gateway_request_validatorHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_resource{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_resourceHandler", &Aws_api_gateway_resourceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_rest_api{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_rest_apiHandler", &Aws_api_gateway_rest_apiHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_stage{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_stageHandler", &Aws_api_gateway_stageHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_usage_plan{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_usage_planHandler", &Aws_api_gateway_usage_planHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_usage_plan_key{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_usage_plan_keyHandler", &Aws_api_gateway_usage_plan_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_api_gateway_vpc_link{})
    sb.RegisterHandler("TerraformAws::Aws_api_gateway_vpc_linkHandler", &Aws_api_gateway_vpc_linkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_app_cookie_stickiness_policy{})
    sb.RegisterHandler("TerraformAws::Aws_app_cookie_stickiness_policyHandler", &Aws_app_cookie_stickiness_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appautoscaling_policy{})
    sb.RegisterHandler("TerraformAws::Aws_appautoscaling_policyHandler", &Aws_appautoscaling_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appautoscaling_scheduled_action{})
    sb.RegisterHandler("TerraformAws::Aws_appautoscaling_scheduled_actionHandler", &Aws_appautoscaling_scheduled_actionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appautoscaling_target{})
    sb.RegisterHandler("TerraformAws::Aws_appautoscaling_targetHandler", &Aws_appautoscaling_targetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appmesh_mesh{})
    sb.RegisterHandler("TerraformAws::Aws_appmesh_meshHandler", &Aws_appmesh_meshHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appmesh_route{})
    sb.RegisterHandler("TerraformAws::Aws_appmesh_routeHandler", &Aws_appmesh_routeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appmesh_virtual_node{})
    sb.RegisterHandler("TerraformAws::Aws_appmesh_virtual_nodeHandler", &Aws_appmesh_virtual_nodeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appmesh_virtual_router{})
    sb.RegisterHandler("TerraformAws::Aws_appmesh_virtual_routerHandler", &Aws_appmesh_virtual_routerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appsync_api_key{})
    sb.RegisterHandler("TerraformAws::Aws_appsync_api_keyHandler", &Aws_appsync_api_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appsync_datasource{})
    sb.RegisterHandler("TerraformAws::Aws_appsync_datasourceHandler", &Aws_appsync_datasourceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_appsync_graphql_api{})
    sb.RegisterHandler("TerraformAws::Aws_appsync_graphql_apiHandler", &Aws_appsync_graphql_apiHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_athena_database{})
    sb.RegisterHandler("TerraformAws::Aws_athena_databaseHandler", &Aws_athena_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_athena_named_query{})
    sb.RegisterHandler("TerraformAws::Aws_athena_named_queryHandler", &Aws_athena_named_queryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_autoscaling_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_autoscaling_attachmentHandler", &Aws_autoscaling_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_autoscaling_group{})
    sb.RegisterHandler("TerraformAws::Aws_autoscaling_groupHandler", &Aws_autoscaling_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_autoscaling_lifecycle_hook{})
    sb.RegisterHandler("TerraformAws::Aws_autoscaling_lifecycle_hookHandler", &Aws_autoscaling_lifecycle_hookHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_autoscaling_notification{})
    sb.RegisterHandler("TerraformAws::Aws_autoscaling_notificationHandler", &Aws_autoscaling_notificationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_autoscaling_policy{})
    sb.RegisterHandler("TerraformAws::Aws_autoscaling_policyHandler", &Aws_autoscaling_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_autoscaling_schedule{})
    sb.RegisterHandler("TerraformAws::Aws_autoscaling_scheduleHandler", &Aws_autoscaling_scheduleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_batch_compute_environment{})
    sb.RegisterHandler("TerraformAws::Aws_batch_compute_environmentHandler", &Aws_batch_compute_environmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_batch_job_definition{})
    sb.RegisterHandler("TerraformAws::Aws_batch_job_definitionHandler", &Aws_batch_job_definitionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_batch_job_queue{})
    sb.RegisterHandler("TerraformAws::Aws_batch_job_queueHandler", &Aws_batch_job_queueHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_budgets_budget{})
    sb.RegisterHandler("TerraformAws::Aws_budgets_budgetHandler", &Aws_budgets_budgetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloud9_environment_ec2{})
    sb.RegisterHandler("TerraformAws::Aws_cloud9_environment_ec2Handler", &Aws_cloud9_environment_ec2Handler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudformation_stack{})
    sb.RegisterHandler("TerraformAws::Aws_cloudformation_stackHandler", &Aws_cloudformation_stackHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudfront_distribution{})
    sb.RegisterHandler("TerraformAws::Aws_cloudfront_distributionHandler", &Aws_cloudfront_distributionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudfront_origin_access_identity{})
    sb.RegisterHandler("TerraformAws::Aws_cloudfront_origin_access_identityHandler", &Aws_cloudfront_origin_access_identityHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudfront_public_key{})
    sb.RegisterHandler("TerraformAws::Aws_cloudfront_public_keyHandler", &Aws_cloudfront_public_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudhsm_v2_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_cloudhsm_v2_clusterHandler", &Aws_cloudhsm_v2_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudhsm_v2_hsm{})
    sb.RegisterHandler("TerraformAws::Aws_cloudhsm_v2_hsmHandler", &Aws_cloudhsm_v2_hsmHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudtrail{})
    sb.RegisterHandler("TerraformAws::Aws_cloudtrailHandler", &Aws_cloudtrailHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_dashboard{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_dashboardHandler", &Aws_cloudwatch_dashboardHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_event_permission{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_event_permissionHandler", &Aws_cloudwatch_event_permissionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_event_rule{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_event_ruleHandler", &Aws_cloudwatch_event_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_event_target{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_event_targetHandler", &Aws_cloudwatch_event_targetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_log_destination{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_log_destinationHandler", &Aws_cloudwatch_log_destinationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_log_destination_policy{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_log_destination_policyHandler", &Aws_cloudwatch_log_destination_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_log_group{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_log_groupHandler", &Aws_cloudwatch_log_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_log_metric_filter{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_log_metric_filterHandler", &Aws_cloudwatch_log_metric_filterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_log_resource_policy{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_log_resource_policyHandler", &Aws_cloudwatch_log_resource_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_log_stream{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_log_streamHandler", &Aws_cloudwatch_log_streamHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_log_subscription_filter{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_log_subscription_filterHandler", &Aws_cloudwatch_log_subscription_filterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cloudwatch_metric_alarm{})
    sb.RegisterHandler("TerraformAws::Aws_cloudwatch_metric_alarmHandler", &Aws_cloudwatch_metric_alarmHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codebuild_project{})
    sb.RegisterHandler("TerraformAws::Aws_codebuild_projectHandler", &Aws_codebuild_projectHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codebuild_webhook{})
    sb.RegisterHandler("TerraformAws::Aws_codebuild_webhookHandler", &Aws_codebuild_webhookHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codecommit_repository{})
    sb.RegisterHandler("TerraformAws::Aws_codecommit_repositoryHandler", &Aws_codecommit_repositoryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codecommit_trigger{})
    sb.RegisterHandler("TerraformAws::Aws_codecommit_triggerHandler", &Aws_codecommit_triggerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codedeploy_app{})
    sb.RegisterHandler("TerraformAws::Aws_codedeploy_appHandler", &Aws_codedeploy_appHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codedeploy_deployment_config{})
    sb.RegisterHandler("TerraformAws::Aws_codedeploy_deployment_configHandler", &Aws_codedeploy_deployment_configHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codedeploy_deployment_group{})
    sb.RegisterHandler("TerraformAws::Aws_codedeploy_deployment_groupHandler", &Aws_codedeploy_deployment_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codepipeline{})
    sb.RegisterHandler("TerraformAws::Aws_codepipelineHandler", &Aws_codepipelineHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_codepipeline_webhook{})
    sb.RegisterHandler("TerraformAws::Aws_codepipeline_webhookHandler", &Aws_codepipeline_webhookHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_identity_pool{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_identity_poolHandler", &Aws_cognito_identity_poolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_identity_pool_roles_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_identity_pool_roles_attachmentHandler", &Aws_cognito_identity_pool_roles_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_identity_provider{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_identity_providerHandler", &Aws_cognito_identity_providerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_resource_server{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_resource_serverHandler", &Aws_cognito_resource_serverHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_user_group{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_user_groupHandler", &Aws_cognito_user_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_user_pool{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_user_poolHandler", &Aws_cognito_user_poolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_user_pool_client{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_user_pool_clientHandler", &Aws_cognito_user_pool_clientHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_cognito_user_pool_domain{})
    sb.RegisterHandler("TerraformAws::Aws_cognito_user_pool_domainHandler", &Aws_cognito_user_pool_domainHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_config_aggregate_authorization{})
    sb.RegisterHandler("TerraformAws::Aws_config_aggregate_authorizationHandler", &Aws_config_aggregate_authorizationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_config_config_rule{})
    sb.RegisterHandler("TerraformAws::Aws_config_config_ruleHandler", &Aws_config_config_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_config_configuration_aggregator{})
    sb.RegisterHandler("TerraformAws::Aws_config_configuration_aggregatorHandler", &Aws_config_configuration_aggregatorHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_config_configuration_recorder{})
    sb.RegisterHandler("TerraformAws::Aws_config_configuration_recorderHandler", &Aws_config_configuration_recorderHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_config_configuration_recorder_status{})
    sb.RegisterHandler("TerraformAws::Aws_config_configuration_recorder_statusHandler", &Aws_config_configuration_recorder_statusHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_config_delivery_channel{})
    sb.RegisterHandler("TerraformAws::Aws_config_delivery_channelHandler", &Aws_config_delivery_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_customer_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_customer_gatewayHandler", &Aws_customer_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_datasync_agent{})
    sb.RegisterHandler("TerraformAws::Aws_datasync_agentHandler", &Aws_datasync_agentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_datasync_location_efs{})
    sb.RegisterHandler("TerraformAws::Aws_datasync_location_efsHandler", &Aws_datasync_location_efsHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_datasync_location_nfs{})
    sb.RegisterHandler("TerraformAws::Aws_datasync_location_nfsHandler", &Aws_datasync_location_nfsHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_datasync_location_s3{})
    sb.RegisterHandler("TerraformAws::Aws_datasync_location_s3Handler", &Aws_datasync_location_s3Handler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_datasync_task{})
    sb.RegisterHandler("TerraformAws::Aws_datasync_taskHandler", &Aws_datasync_taskHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dax_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_dax_clusterHandler", &Aws_dax_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dax_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_dax_parameter_groupHandler", &Aws_dax_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dax_subnet_group{})
    sb.RegisterHandler("TerraformAws::Aws_dax_subnet_groupHandler", &Aws_dax_subnet_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_cluster_snapshot{})
    sb.RegisterHandler("TerraformAws::Aws_db_cluster_snapshotHandler", &Aws_db_cluster_snapshotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_event_subscription{})
    sb.RegisterHandler("TerraformAws::Aws_db_event_subscriptionHandler", &Aws_db_event_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_instance{})
    sb.RegisterHandler("TerraformAws::Aws_db_instanceHandler", &Aws_db_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_option_group{})
    sb.RegisterHandler("TerraformAws::Aws_db_option_groupHandler", &Aws_db_option_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_db_parameter_groupHandler", &Aws_db_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_security_group{})
    sb.RegisterHandler("TerraformAws::Aws_db_security_groupHandler", &Aws_db_security_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_snapshot{})
    sb.RegisterHandler("TerraformAws::Aws_db_snapshotHandler", &Aws_db_snapshotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_db_subnet_group{})
    sb.RegisterHandler("TerraformAws::Aws_db_subnet_groupHandler", &Aws_db_subnet_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_default_network_acl{})
    sb.RegisterHandler("TerraformAws::Aws_default_network_aclHandler", &Aws_default_network_aclHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_default_route_table{})
    sb.RegisterHandler("TerraformAws::Aws_default_route_tableHandler", &Aws_default_route_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_default_security_group{})
    sb.RegisterHandler("TerraformAws::Aws_default_security_groupHandler", &Aws_default_security_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_default_subnet{})
    sb.RegisterHandler("TerraformAws::Aws_default_subnetHandler", &Aws_default_subnetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_default_vpc{})
    sb.RegisterHandler("TerraformAws::Aws_default_vpcHandler", &Aws_default_vpcHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_default_vpc_dhcp_options{})
    sb.RegisterHandler("TerraformAws::Aws_default_vpc_dhcp_optionsHandler", &Aws_default_vpc_dhcp_optionsHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_devicefarm_project{})
    sb.RegisterHandler("TerraformAws::Aws_devicefarm_projectHandler", &Aws_devicefarm_projectHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_directory_service_conditional_forwarder{})
    sb.RegisterHandler("TerraformAws::Aws_directory_service_conditional_forwarderHandler", &Aws_directory_service_conditional_forwarderHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_directory_service_directory{})
    sb.RegisterHandler("TerraformAws::Aws_directory_service_directoryHandler", &Aws_directory_service_directoryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dlm_lifecycle_policy{})
    sb.RegisterHandler("TerraformAws::Aws_dlm_lifecycle_policyHandler", &Aws_dlm_lifecycle_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dms_certificate{})
    sb.RegisterHandler("TerraformAws::Aws_dms_certificateHandler", &Aws_dms_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dms_endpoint{})
    sb.RegisterHandler("TerraformAws::Aws_dms_endpointHandler", &Aws_dms_endpointHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dms_replication_instance{})
    sb.RegisterHandler("TerraformAws::Aws_dms_replication_instanceHandler", &Aws_dms_replication_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dms_replication_subnet_group{})
    sb.RegisterHandler("TerraformAws::Aws_dms_replication_subnet_groupHandler", &Aws_dms_replication_subnet_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dms_replication_task{})
    sb.RegisterHandler("TerraformAws::Aws_dms_replication_taskHandler", &Aws_dms_replication_taskHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_docdb_cluster_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_docdb_cluster_parameter_groupHandler", &Aws_docdb_cluster_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_docdb_subnet_group{})
    sb.RegisterHandler("TerraformAws::Aws_docdb_subnet_groupHandler", &Aws_docdb_subnet_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_bgp_peer{})
    sb.RegisterHandler("TerraformAws::Aws_dx_bgp_peerHandler", &Aws_dx_bgp_peerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_connection{})
    sb.RegisterHandler("TerraformAws::Aws_dx_connectionHandler", &Aws_dx_connectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_connection_association{})
    sb.RegisterHandler("TerraformAws::Aws_dx_connection_associationHandler", &Aws_dx_connection_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_dx_gatewayHandler", &Aws_dx_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_gateway_association{})
    sb.RegisterHandler("TerraformAws::Aws_dx_gateway_associationHandler", &Aws_dx_gateway_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_hosted_private_virtual_interface{})
    sb.RegisterHandler("TerraformAws::Aws_dx_hosted_private_virtual_interfaceHandler", &Aws_dx_hosted_private_virtual_interfaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_hosted_private_virtual_interface_accepter{})
    sb.RegisterHandler("TerraformAws::Aws_dx_hosted_private_virtual_interface_accepterHandler", &Aws_dx_hosted_private_virtual_interface_accepterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_hosted_public_virtual_interface{})
    sb.RegisterHandler("TerraformAws::Aws_dx_hosted_public_virtual_interfaceHandler", &Aws_dx_hosted_public_virtual_interfaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_hosted_public_virtual_interface_accepter{})
    sb.RegisterHandler("TerraformAws::Aws_dx_hosted_public_virtual_interface_accepterHandler", &Aws_dx_hosted_public_virtual_interface_accepterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_lag{})
    sb.RegisterHandler("TerraformAws::Aws_dx_lagHandler", &Aws_dx_lagHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_private_virtual_interface{})
    sb.RegisterHandler("TerraformAws::Aws_dx_private_virtual_interfaceHandler", &Aws_dx_private_virtual_interfaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dx_public_virtual_interface{})
    sb.RegisterHandler("TerraformAws::Aws_dx_public_virtual_interfaceHandler", &Aws_dx_public_virtual_interfaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dynamodb_global_table{})
    sb.RegisterHandler("TerraformAws::Aws_dynamodb_global_tableHandler", &Aws_dynamodb_global_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dynamodb_table{})
    sb.RegisterHandler("TerraformAws::Aws_dynamodb_tableHandler", &Aws_dynamodb_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_dynamodb_table_item{})
    sb.RegisterHandler("TerraformAws::Aws_dynamodb_table_itemHandler", &Aws_dynamodb_table_itemHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ebs_snapshot{})
    sb.RegisterHandler("TerraformAws::Aws_ebs_snapshotHandler", &Aws_ebs_snapshotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ebs_snapshot_copy{})
    sb.RegisterHandler("TerraformAws::Aws_ebs_snapshot_copyHandler", &Aws_ebs_snapshot_copyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ebs_volume{})
    sb.RegisterHandler("TerraformAws::Aws_ebs_volumeHandler", &Aws_ebs_volumeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_capacity_reservation{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_capacity_reservationHandler", &Aws_ec2_capacity_reservationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_fleet{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_fleetHandler", &Aws_ec2_fleetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_transit_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_transit_gatewayHandler", &Aws_ec2_transit_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_transit_gateway_route{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_transit_gateway_routeHandler", &Aws_ec2_transit_gateway_routeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_transit_gateway_route_table{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_transit_gateway_route_tableHandler", &Aws_ec2_transit_gateway_route_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_transit_gateway_route_table_association{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_transit_gateway_route_table_associationHandler", &Aws_ec2_transit_gateway_route_table_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_transit_gateway_route_table_propagation{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_transit_gateway_route_table_propagationHandler", &Aws_ec2_transit_gateway_route_table_propagationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ec2_transit_gateway_vpc_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_ec2_transit_gateway_vpc_attachmentHandler", &Aws_ec2_transit_gateway_vpc_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ecr_lifecycle_policy{})
    sb.RegisterHandler("TerraformAws::Aws_ecr_lifecycle_policyHandler", &Aws_ecr_lifecycle_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ecr_repository{})
    sb.RegisterHandler("TerraformAws::Aws_ecr_repositoryHandler", &Aws_ecr_repositoryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ecr_repository_policy{})
    sb.RegisterHandler("TerraformAws::Aws_ecr_repository_policyHandler", &Aws_ecr_repository_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ecs_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_ecs_clusterHandler", &Aws_ecs_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ecs_service{})
    sb.RegisterHandler("TerraformAws::Aws_ecs_serviceHandler", &Aws_ecs_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ecs_task_definition{})
    sb.RegisterHandler("TerraformAws::Aws_ecs_task_definitionHandler", &Aws_ecs_task_definitionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_efs_file_system{})
    sb.RegisterHandler("TerraformAws::Aws_efs_file_systemHandler", &Aws_efs_file_systemHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_efs_mount_target{})
    sb.RegisterHandler("TerraformAws::Aws_efs_mount_targetHandler", &Aws_efs_mount_targetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_egress_only_internet_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_egress_only_internet_gatewayHandler", &Aws_egress_only_internet_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_eip{})
    sb.RegisterHandler("TerraformAws::Aws_eipHandler", &Aws_eipHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_eip_association{})
    sb.RegisterHandler("TerraformAws::Aws_eip_associationHandler", &Aws_eip_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_eks_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_eks_clusterHandler", &Aws_eks_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elastic_beanstalk_application{})
    sb.RegisterHandler("TerraformAws::Aws_elastic_beanstalk_applicationHandler", &Aws_elastic_beanstalk_applicationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elastic_beanstalk_application_version{})
    sb.RegisterHandler("TerraformAws::Aws_elastic_beanstalk_application_versionHandler", &Aws_elastic_beanstalk_application_versionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elastic_beanstalk_configuration_template{})
    sb.RegisterHandler("TerraformAws::Aws_elastic_beanstalk_configuration_templateHandler", &Aws_elastic_beanstalk_configuration_templateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elastic_beanstalk_environment{})
    sb.RegisterHandler("TerraformAws::Aws_elastic_beanstalk_environmentHandler", &Aws_elastic_beanstalk_environmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elasticache_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_elasticache_clusterHandler", &Aws_elasticache_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elasticache_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_elasticache_parameter_groupHandler", &Aws_elasticache_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elasticache_replication_group{})
    sb.RegisterHandler("TerraformAws::Aws_elasticache_replication_groupHandler", &Aws_elasticache_replication_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elasticache_security_group{})
    sb.RegisterHandler("TerraformAws::Aws_elasticache_security_groupHandler", &Aws_elasticache_security_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elasticache_subnet_group{})
    sb.RegisterHandler("TerraformAws::Aws_elasticache_subnet_groupHandler", &Aws_elasticache_subnet_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elasticsearch_domain{})
    sb.RegisterHandler("TerraformAws::Aws_elasticsearch_domainHandler", &Aws_elasticsearch_domainHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elasticsearch_domain_policy{})
    sb.RegisterHandler("TerraformAws::Aws_elasticsearch_domain_policyHandler", &Aws_elasticsearch_domain_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elastictranscoder_pipeline{})
    sb.RegisterHandler("TerraformAws::Aws_elastictranscoder_pipelineHandler", &Aws_elastictranscoder_pipelineHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elastictranscoder_preset{})
    sb.RegisterHandler("TerraformAws::Aws_elastictranscoder_presetHandler", &Aws_elastictranscoder_presetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elb{})
    sb.RegisterHandler("TerraformAws::Aws_elbHandler", &Aws_elbHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_elb_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_elb_attachmentHandler", &Aws_elb_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_emr_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_emr_clusterHandler", &Aws_emr_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_emr_instance_group{})
    sb.RegisterHandler("TerraformAws::Aws_emr_instance_groupHandler", &Aws_emr_instance_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_emr_security_configuration{})
    sb.RegisterHandler("TerraformAws::Aws_emr_security_configurationHandler", &Aws_emr_security_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_flow_log{})
    sb.RegisterHandler("TerraformAws::Aws_flow_logHandler", &Aws_flow_logHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_gamelift_alias{})
    sb.RegisterHandler("TerraformAws::Aws_gamelift_aliasHandler", &Aws_gamelift_aliasHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_gamelift_build{})
    sb.RegisterHandler("TerraformAws::Aws_gamelift_buildHandler", &Aws_gamelift_buildHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_gamelift_fleet{})
    sb.RegisterHandler("TerraformAws::Aws_gamelift_fleetHandler", &Aws_gamelift_fleetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_gamelift_game_session_queue{})
    sb.RegisterHandler("TerraformAws::Aws_gamelift_game_session_queueHandler", &Aws_gamelift_game_session_queueHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glacier_vault{})
    sb.RegisterHandler("TerraformAws::Aws_glacier_vaultHandler", &Aws_glacier_vaultHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glacier_vault_lock{})
    sb.RegisterHandler("TerraformAws::Aws_glacier_vault_lockHandler", &Aws_glacier_vault_lockHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_globalaccelerator_accelerator{})
    sb.RegisterHandler("TerraformAws::Aws_globalaccelerator_acceleratorHandler", &Aws_globalaccelerator_acceleratorHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_catalog_database{})
    sb.RegisterHandler("TerraformAws::Aws_glue_catalog_databaseHandler", &Aws_glue_catalog_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_catalog_table{})
    sb.RegisterHandler("TerraformAws::Aws_glue_catalog_tableHandler", &Aws_glue_catalog_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_classifier{})
    sb.RegisterHandler("TerraformAws::Aws_glue_classifierHandler", &Aws_glue_classifierHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_connection{})
    sb.RegisterHandler("TerraformAws::Aws_glue_connectionHandler", &Aws_glue_connectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_crawler{})
    sb.RegisterHandler("TerraformAws::Aws_glue_crawlerHandler", &Aws_glue_crawlerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_job{})
    sb.RegisterHandler("TerraformAws::Aws_glue_jobHandler", &Aws_glue_jobHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_security_configuration{})
    sb.RegisterHandler("TerraformAws::Aws_glue_security_configurationHandler", &Aws_glue_security_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_glue_trigger{})
    sb.RegisterHandler("TerraformAws::Aws_glue_triggerHandler", &Aws_glue_triggerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_guardduty_detector{})
    sb.RegisterHandler("TerraformAws::Aws_guardduty_detectorHandler", &Aws_guardduty_detectorHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_guardduty_ipset{})
    sb.RegisterHandler("TerraformAws::Aws_guardduty_ipsetHandler", &Aws_guardduty_ipsetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_guardduty_member{})
    sb.RegisterHandler("TerraformAws::Aws_guardduty_memberHandler", &Aws_guardduty_memberHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_guardduty_threatintelset{})
    sb.RegisterHandler("TerraformAws::Aws_guardduty_threatintelsetHandler", &Aws_guardduty_threatintelsetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_access_key{})
    sb.RegisterHandler("TerraformAws::Aws_iam_access_keyHandler", &Aws_iam_access_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_account_alias{})
    sb.RegisterHandler("TerraformAws::Aws_iam_account_aliasHandler", &Aws_iam_account_aliasHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_account_password_policy{})
    sb.RegisterHandler("TerraformAws::Aws_iam_account_password_policyHandler", &Aws_iam_account_password_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_group{})
    sb.RegisterHandler("TerraformAws::Aws_iam_groupHandler", &Aws_iam_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_group_membership{})
    sb.RegisterHandler("TerraformAws::Aws_iam_group_membershipHandler", &Aws_iam_group_membershipHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_group_policy{})
    sb.RegisterHandler("TerraformAws::Aws_iam_group_policyHandler", &Aws_iam_group_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_group_policy_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_iam_group_policy_attachmentHandler", &Aws_iam_group_policy_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_instance_profile{})
    sb.RegisterHandler("TerraformAws::Aws_iam_instance_profileHandler", &Aws_iam_instance_profileHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_openid_connect_provider{})
    sb.RegisterHandler("TerraformAws::Aws_iam_openid_connect_providerHandler", &Aws_iam_openid_connect_providerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_policy{})
    sb.RegisterHandler("TerraformAws::Aws_iam_policyHandler", &Aws_iam_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_policy_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_iam_policy_attachmentHandler", &Aws_iam_policy_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_role{})
    sb.RegisterHandler("TerraformAws::Aws_iam_roleHandler", &Aws_iam_roleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_role_policy{})
    sb.RegisterHandler("TerraformAws::Aws_iam_role_policyHandler", &Aws_iam_role_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_role_policy_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_iam_role_policy_attachmentHandler", &Aws_iam_role_policy_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_saml_provider{})
    sb.RegisterHandler("TerraformAws::Aws_iam_saml_providerHandler", &Aws_iam_saml_providerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_server_certificate{})
    sb.RegisterHandler("TerraformAws::Aws_iam_server_certificateHandler", &Aws_iam_server_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_service_linked_role{})
    sb.RegisterHandler("TerraformAws::Aws_iam_service_linked_roleHandler", &Aws_iam_service_linked_roleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_user{})
    sb.RegisterHandler("TerraformAws::Aws_iam_userHandler", &Aws_iam_userHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_user_group_membership{})
    sb.RegisterHandler("TerraformAws::Aws_iam_user_group_membershipHandler", &Aws_iam_user_group_membershipHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_user_login_profile{})
    sb.RegisterHandler("TerraformAws::Aws_iam_user_login_profileHandler", &Aws_iam_user_login_profileHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_user_policy{})
    sb.RegisterHandler("TerraformAws::Aws_iam_user_policyHandler", &Aws_iam_user_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_user_policy_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_iam_user_policy_attachmentHandler", &Aws_iam_user_policy_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iam_user_ssh_key{})
    sb.RegisterHandler("TerraformAws::Aws_iam_user_ssh_keyHandler", &Aws_iam_user_ssh_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_inspector_assessment_target{})
    sb.RegisterHandler("TerraformAws::Aws_inspector_assessment_targetHandler", &Aws_inspector_assessment_targetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_inspector_assessment_template{})
    sb.RegisterHandler("TerraformAws::Aws_inspector_assessment_templateHandler", &Aws_inspector_assessment_templateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_inspector_resource_group{})
    sb.RegisterHandler("TerraformAws::Aws_inspector_resource_groupHandler", &Aws_inspector_resource_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_instance{})
    sb.RegisterHandler("TerraformAws::Aws_instanceHandler", &Aws_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_internet_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_internet_gatewayHandler", &Aws_internet_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iot_certificate{})
    sb.RegisterHandler("TerraformAws::Aws_iot_certificateHandler", &Aws_iot_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iot_policy{})
    sb.RegisterHandler("TerraformAws::Aws_iot_policyHandler", &Aws_iot_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iot_policy_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_iot_policy_attachmentHandler", &Aws_iot_policy_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iot_thing{})
    sb.RegisterHandler("TerraformAws::Aws_iot_thingHandler", &Aws_iot_thingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iot_thing_principal_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_iot_thing_principal_attachmentHandler", &Aws_iot_thing_principal_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iot_thing_type{})
    sb.RegisterHandler("TerraformAws::Aws_iot_thing_typeHandler", &Aws_iot_thing_typeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_iot_topic_rule{})
    sb.RegisterHandler("TerraformAws::Aws_iot_topic_ruleHandler", &Aws_iot_topic_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_key_pair{})
    sb.RegisterHandler("TerraformAws::Aws_key_pairHandler", &Aws_key_pairHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_kinesis_analytics_application{})
    sb.RegisterHandler("TerraformAws::Aws_kinesis_analytics_applicationHandler", &Aws_kinesis_analytics_applicationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_kinesis_firehose_delivery_stream{})
    sb.RegisterHandler("TerraformAws::Aws_kinesis_firehose_delivery_streamHandler", &Aws_kinesis_firehose_delivery_streamHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_kinesis_stream{})
    sb.RegisterHandler("TerraformAws::Aws_kinesis_streamHandler", &Aws_kinesis_streamHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_kms_alias{})
    sb.RegisterHandler("TerraformAws::Aws_kms_aliasHandler", &Aws_kms_aliasHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_kms_grant{})
    sb.RegisterHandler("TerraformAws::Aws_kms_grantHandler", &Aws_kms_grantHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_kms_key{})
    sb.RegisterHandler("TerraformAws::Aws_kms_keyHandler", &Aws_kms_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lambda_alias{})
    sb.RegisterHandler("TerraformAws::Aws_lambda_aliasHandler", &Aws_lambda_aliasHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lambda_event_source_mapping{})
    sb.RegisterHandler("TerraformAws::Aws_lambda_event_source_mappingHandler", &Aws_lambda_event_source_mappingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lambda_function{})
    sb.RegisterHandler("TerraformAws::Aws_lambda_functionHandler", &Aws_lambda_functionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lambda_layer_version{})
    sb.RegisterHandler("TerraformAws::Aws_lambda_layer_versionHandler", &Aws_lambda_layer_versionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lambda_permission{})
    sb.RegisterHandler("TerraformAws::Aws_lambda_permissionHandler", &Aws_lambda_permissionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_launch_configuration{})
    sb.RegisterHandler("TerraformAws::Aws_launch_configurationHandler", &Aws_launch_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_launch_template{})
    sb.RegisterHandler("TerraformAws::Aws_launch_templateHandler", &Aws_launch_templateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb{})
    sb.RegisterHandler("TerraformAws::Aws_lbHandler", &Aws_lbHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb_cookie_stickiness_policy{})
    sb.RegisterHandler("TerraformAws::Aws_lb_cookie_stickiness_policyHandler", &Aws_lb_cookie_stickiness_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb_listener{})
    sb.RegisterHandler("TerraformAws::Aws_lb_listenerHandler", &Aws_lb_listenerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb_listener_certificate{})
    sb.RegisterHandler("TerraformAws::Aws_lb_listener_certificateHandler", &Aws_lb_listener_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb_listener_rule{})
    sb.RegisterHandler("TerraformAws::Aws_lb_listener_ruleHandler", &Aws_lb_listener_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb_ssl_negotiation_policy{})
    sb.RegisterHandler("TerraformAws::Aws_lb_ssl_negotiation_policyHandler", &Aws_lb_ssl_negotiation_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb_target_group{})
    sb.RegisterHandler("TerraformAws::Aws_lb_target_groupHandler", &Aws_lb_target_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lb_target_group_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_lb_target_group_attachmentHandler", &Aws_lb_target_group_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_licensemanager_association{})
    sb.RegisterHandler("TerraformAws::Aws_licensemanager_associationHandler", &Aws_licensemanager_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_licensemanager_license_configuration{})
    sb.RegisterHandler("TerraformAws::Aws_licensemanager_license_configurationHandler", &Aws_licensemanager_license_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lightsail_domain{})
    sb.RegisterHandler("TerraformAws::Aws_lightsail_domainHandler", &Aws_lightsail_domainHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lightsail_instance{})
    sb.RegisterHandler("TerraformAws::Aws_lightsail_instanceHandler", &Aws_lightsail_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lightsail_key_pair{})
    sb.RegisterHandler("TerraformAws::Aws_lightsail_key_pairHandler", &Aws_lightsail_key_pairHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lightsail_static_ip{})
    sb.RegisterHandler("TerraformAws::Aws_lightsail_static_ipHandler", &Aws_lightsail_static_ipHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_lightsail_static_ip_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_lightsail_static_ip_attachmentHandler", &Aws_lightsail_static_ip_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_load_balancer_backend_server_policy{})
    sb.RegisterHandler("TerraformAws::Aws_load_balancer_backend_server_policyHandler", &Aws_load_balancer_backend_server_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_load_balancer_listener_policy{})
    sb.RegisterHandler("TerraformAws::Aws_load_balancer_listener_policyHandler", &Aws_load_balancer_listener_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_load_balancer_policy{})
    sb.RegisterHandler("TerraformAws::Aws_load_balancer_policyHandler", &Aws_load_balancer_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_macie_member_account_association{})
    sb.RegisterHandler("TerraformAws::Aws_macie_member_account_associationHandler", &Aws_macie_member_account_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_macie_s3_bucket_association{})
    sb.RegisterHandler("TerraformAws::Aws_macie_s3_bucket_associationHandler", &Aws_macie_s3_bucket_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_main_route_table_association{})
    sb.RegisterHandler("TerraformAws::Aws_main_route_table_associationHandler", &Aws_main_route_table_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_media_package_channel{})
    sb.RegisterHandler("TerraformAws::Aws_media_package_channelHandler", &Aws_media_package_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_media_store_container{})
    sb.RegisterHandler("TerraformAws::Aws_media_store_containerHandler", &Aws_media_store_containerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_media_store_container_policy{})
    sb.RegisterHandler("TerraformAws::Aws_media_store_container_policyHandler", &Aws_media_store_container_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_mq_broker{})
    sb.RegisterHandler("TerraformAws::Aws_mq_brokerHandler", &Aws_mq_brokerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_mq_configuration{})
    sb.RegisterHandler("TerraformAws::Aws_mq_configurationHandler", &Aws_mq_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_nat_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_nat_gatewayHandler", &Aws_nat_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_neptune_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_neptune_clusterHandler", &Aws_neptune_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_neptune_cluster_instance{})
    sb.RegisterHandler("TerraformAws::Aws_neptune_cluster_instanceHandler", &Aws_neptune_cluster_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_neptune_cluster_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_neptune_cluster_parameter_groupHandler", &Aws_neptune_cluster_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_neptune_cluster_snapshot{})
    sb.RegisterHandler("TerraformAws::Aws_neptune_cluster_snapshotHandler", &Aws_neptune_cluster_snapshotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_neptune_event_subscription{})
    sb.RegisterHandler("TerraformAws::Aws_neptune_event_subscriptionHandler", &Aws_neptune_event_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_neptune_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_neptune_parameter_groupHandler", &Aws_neptune_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_neptune_subnet_group{})
    sb.RegisterHandler("TerraformAws::Aws_neptune_subnet_groupHandler", &Aws_neptune_subnet_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_network_acl{})
    sb.RegisterHandler("TerraformAws::Aws_network_aclHandler", &Aws_network_aclHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_network_acl_rule{})
    sb.RegisterHandler("TerraformAws::Aws_network_acl_ruleHandler", &Aws_network_acl_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_network_interface{})
    sb.RegisterHandler("TerraformAws::Aws_network_interfaceHandler", &Aws_network_interfaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_network_interface_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_network_interface_attachmentHandler", &Aws_network_interface_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_network_interface_sg_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_network_interface_sg_attachmentHandler", &Aws_network_interface_sg_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_application{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_applicationHandler", &Aws_opsworks_applicationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_custom_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_custom_layerHandler", &Aws_opsworks_custom_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_ganglia_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_ganglia_layerHandler", &Aws_opsworks_ganglia_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_haproxy_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_haproxy_layerHandler", &Aws_opsworks_haproxy_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_instance{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_instanceHandler", &Aws_opsworks_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_java_app_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_java_app_layerHandler", &Aws_opsworks_java_app_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_memcached_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_memcached_layerHandler", &Aws_opsworks_memcached_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_mysql_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_mysql_layerHandler", &Aws_opsworks_mysql_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_nodejs_app_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_nodejs_app_layerHandler", &Aws_opsworks_nodejs_app_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_permission{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_permissionHandler", &Aws_opsworks_permissionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_php_app_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_php_app_layerHandler", &Aws_opsworks_php_app_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_rails_app_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_rails_app_layerHandler", &Aws_opsworks_rails_app_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_rds_db_instance{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_rds_db_instanceHandler", &Aws_opsworks_rds_db_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_stack{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_stackHandler", &Aws_opsworks_stackHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_static_web_layer{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_static_web_layerHandler", &Aws_opsworks_static_web_layerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_opsworks_user_profile{})
    sb.RegisterHandler("TerraformAws::Aws_opsworks_user_profileHandler", &Aws_opsworks_user_profileHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_organizations_account{})
    sb.RegisterHandler("TerraformAws::Aws_organizations_accountHandler", &Aws_organizations_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_organizations_organization{})
    sb.RegisterHandler("TerraformAws::Aws_organizations_organizationHandler", &Aws_organizations_organizationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_organizations_policy{})
    sb.RegisterHandler("TerraformAws::Aws_organizations_policyHandler", &Aws_organizations_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_organizations_policy_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_organizations_policy_attachmentHandler", &Aws_organizations_policy_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_adm_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_adm_channelHandler", &Aws_pinpoint_adm_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_apns_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_apns_channelHandler", &Aws_pinpoint_apns_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_apns_sandbox_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_apns_sandbox_channelHandler", &Aws_pinpoint_apns_sandbox_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_apns_voip_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_apns_voip_channelHandler", &Aws_pinpoint_apns_voip_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_apns_voip_sandbox_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_apns_voip_sandbox_channelHandler", &Aws_pinpoint_apns_voip_sandbox_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_app{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_appHandler", &Aws_pinpoint_appHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_baidu_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_baidu_channelHandler", &Aws_pinpoint_baidu_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_email_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_email_channelHandler", &Aws_pinpoint_email_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_event_stream{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_event_streamHandler", &Aws_pinpoint_event_streamHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_gcm_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_gcm_channelHandler", &Aws_pinpoint_gcm_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_pinpoint_sms_channel{})
    sb.RegisterHandler("TerraformAws::Aws_pinpoint_sms_channelHandler", &Aws_pinpoint_sms_channelHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_placement_group{})
    sb.RegisterHandler("TerraformAws::Aws_placement_groupHandler", &Aws_placement_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_proxy_protocol_policy{})
    sb.RegisterHandler("TerraformAws::Aws_proxy_protocol_policyHandler", &Aws_proxy_protocol_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ram_resource_share{})
    sb.RegisterHandler("TerraformAws::Aws_ram_resource_shareHandler", &Aws_ram_resource_shareHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_rds_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_rds_clusterHandler", &Aws_rds_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_rds_cluster_endpoint{})
    sb.RegisterHandler("TerraformAws::Aws_rds_cluster_endpointHandler", &Aws_rds_cluster_endpointHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_rds_cluster_instance{})
    sb.RegisterHandler("TerraformAws::Aws_rds_cluster_instanceHandler", &Aws_rds_cluster_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_rds_cluster_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_rds_cluster_parameter_groupHandler", &Aws_rds_cluster_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_rds_global_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_rds_global_clusterHandler", &Aws_rds_global_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_redshift_cluster{})
    sb.RegisterHandler("TerraformAws::Aws_redshift_clusterHandler", &Aws_redshift_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_redshift_event_subscription{})
    sb.RegisterHandler("TerraformAws::Aws_redshift_event_subscriptionHandler", &Aws_redshift_event_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_redshift_parameter_group{})
    sb.RegisterHandler("TerraformAws::Aws_redshift_parameter_groupHandler", &Aws_redshift_parameter_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_redshift_security_group{})
    sb.RegisterHandler("TerraformAws::Aws_redshift_security_groupHandler", &Aws_redshift_security_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_redshift_snapshot_copy_grant{})
    sb.RegisterHandler("TerraformAws::Aws_redshift_snapshot_copy_grantHandler", &Aws_redshift_snapshot_copy_grantHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_redshift_subnet_group{})
    sb.RegisterHandler("TerraformAws::Aws_redshift_subnet_groupHandler", &Aws_redshift_subnet_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_resourcegroups_group{})
    sb.RegisterHandler("TerraformAws::Aws_resourcegroups_groupHandler", &Aws_resourcegroups_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route{})
    sb.RegisterHandler("TerraformAws::Aws_routeHandler", &Aws_routeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route53_delegation_set{})
    sb.RegisterHandler("TerraformAws::Aws_route53_delegation_setHandler", &Aws_route53_delegation_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route53_health_check{})
    sb.RegisterHandler("TerraformAws::Aws_route53_health_checkHandler", &Aws_route53_health_checkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route53_query_log{})
    sb.RegisterHandler("TerraformAws::Aws_route53_query_logHandler", &Aws_route53_query_logHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route53_record{})
    sb.RegisterHandler("TerraformAws::Aws_route53_recordHandler", &Aws_route53_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route53_zone{})
    sb.RegisterHandler("TerraformAws::Aws_route53_zoneHandler", &Aws_route53_zoneHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route53_zone_association{})
    sb.RegisterHandler("TerraformAws::Aws_route53_zone_associationHandler", &Aws_route53_zone_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route_table{})
    sb.RegisterHandler("TerraformAws::Aws_route_tableHandler", &Aws_route_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_route_table_association{})
    sb.RegisterHandler("TerraformAws::Aws_route_table_associationHandler", &Aws_route_table_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_account_public_access_block{})
    sb.RegisterHandler("TerraformAws::Aws_s3_account_public_access_blockHandler", &Aws_s3_account_public_access_blockHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_bucket{})
    sb.RegisterHandler("TerraformAws::Aws_s3_bucketHandler", &Aws_s3_bucketHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_bucket_inventory{})
    sb.RegisterHandler("TerraformAws::Aws_s3_bucket_inventoryHandler", &Aws_s3_bucket_inventoryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_bucket_metric{})
    sb.RegisterHandler("TerraformAws::Aws_s3_bucket_metricHandler", &Aws_s3_bucket_metricHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_bucket_notification{})
    sb.RegisterHandler("TerraformAws::Aws_s3_bucket_notificationHandler", &Aws_s3_bucket_notificationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_bucket_object{})
    sb.RegisterHandler("TerraformAws::Aws_s3_bucket_objectHandler", &Aws_s3_bucket_objectHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_bucket_policy{})
    sb.RegisterHandler("TerraformAws::Aws_s3_bucket_policyHandler", &Aws_s3_bucket_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_s3_bucket_public_access_block{})
    sb.RegisterHandler("TerraformAws::Aws_s3_bucket_public_access_blockHandler", &Aws_s3_bucket_public_access_blockHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sagemaker_notebook_instance{})
    sb.RegisterHandler("TerraformAws::Aws_sagemaker_notebook_instanceHandler", &Aws_sagemaker_notebook_instanceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_secretsmanager_secret{})
    sb.RegisterHandler("TerraformAws::Aws_secretsmanager_secretHandler", &Aws_secretsmanager_secretHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_secretsmanager_secret_version{})
    sb.RegisterHandler("TerraformAws::Aws_secretsmanager_secret_versionHandler", &Aws_secretsmanager_secret_versionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_security_group{})
    sb.RegisterHandler("TerraformAws::Aws_security_groupHandler", &Aws_security_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_security_group_rule{})
    sb.RegisterHandler("TerraformAws::Aws_security_group_ruleHandler", &Aws_security_group_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_securityhub_account{})
    sb.RegisterHandler("TerraformAws::Aws_securityhub_accountHandler", &Aws_securityhub_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_securityhub_product_subscription{})
    sb.RegisterHandler("TerraformAws::Aws_securityhub_product_subscriptionHandler", &Aws_securityhub_product_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_securityhub_standards_subscription{})
    sb.RegisterHandler("TerraformAws::Aws_securityhub_standards_subscriptionHandler", &Aws_securityhub_standards_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_service_discovery_http_namespace{})
    sb.RegisterHandler("TerraformAws::Aws_service_discovery_http_namespaceHandler", &Aws_service_discovery_http_namespaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_service_discovery_private_dns_namespace{})
    sb.RegisterHandler("TerraformAws::Aws_service_discovery_private_dns_namespaceHandler", &Aws_service_discovery_private_dns_namespaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_service_discovery_public_dns_namespace{})
    sb.RegisterHandler("TerraformAws::Aws_service_discovery_public_dns_namespaceHandler", &Aws_service_discovery_public_dns_namespaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_service_discovery_service{})
    sb.RegisterHandler("TerraformAws::Aws_service_discovery_serviceHandler", &Aws_service_discovery_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_servicecatalog_portfolio{})
    sb.RegisterHandler("TerraformAws::Aws_servicecatalog_portfolioHandler", &Aws_servicecatalog_portfolioHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_active_receipt_rule_set{})
    sb.RegisterHandler("TerraformAws::Aws_ses_active_receipt_rule_setHandler", &Aws_ses_active_receipt_rule_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_configuration_set{})
    sb.RegisterHandler("TerraformAws::Aws_ses_configuration_setHandler", &Aws_ses_configuration_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_domain_dkim{})
    sb.RegisterHandler("TerraformAws::Aws_ses_domain_dkimHandler", &Aws_ses_domain_dkimHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_domain_identity{})
    sb.RegisterHandler("TerraformAws::Aws_ses_domain_identityHandler", &Aws_ses_domain_identityHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_domain_identity_verification{})
    sb.RegisterHandler("TerraformAws::Aws_ses_domain_identity_verificationHandler", &Aws_ses_domain_identity_verificationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_domain_mail_from{})
    sb.RegisterHandler("TerraformAws::Aws_ses_domain_mail_fromHandler", &Aws_ses_domain_mail_fromHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_event_destination{})
    sb.RegisterHandler("TerraformAws::Aws_ses_event_destinationHandler", &Aws_ses_event_destinationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_identity_notification_topic{})
    sb.RegisterHandler("TerraformAws::Aws_ses_identity_notification_topicHandler", &Aws_ses_identity_notification_topicHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_receipt_filter{})
    sb.RegisterHandler("TerraformAws::Aws_ses_receipt_filterHandler", &Aws_ses_receipt_filterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_receipt_rule{})
    sb.RegisterHandler("TerraformAws::Aws_ses_receipt_ruleHandler", &Aws_ses_receipt_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_receipt_rule_set{})
    sb.RegisterHandler("TerraformAws::Aws_ses_receipt_rule_setHandler", &Aws_ses_receipt_rule_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ses_template{})
    sb.RegisterHandler("TerraformAws::Aws_ses_templateHandler", &Aws_ses_templateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sfn_activity{})
    sb.RegisterHandler("TerraformAws::Aws_sfn_activityHandler", &Aws_sfn_activityHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sfn_state_machine{})
    sb.RegisterHandler("TerraformAws::Aws_sfn_state_machineHandler", &Aws_sfn_state_machineHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_simpledb_domain{})
    sb.RegisterHandler("TerraformAws::Aws_simpledb_domainHandler", &Aws_simpledb_domainHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_snapshot_create_volume_permission{})
    sb.RegisterHandler("TerraformAws::Aws_snapshot_create_volume_permissionHandler", &Aws_snapshot_create_volume_permissionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sns_platform_application{})
    sb.RegisterHandler("TerraformAws::Aws_sns_platform_applicationHandler", &Aws_sns_platform_applicationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sns_sms_preferences{})
    sb.RegisterHandler("TerraformAws::Aws_sns_sms_preferencesHandler", &Aws_sns_sms_preferencesHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sns_topic{})
    sb.RegisterHandler("TerraformAws::Aws_sns_topicHandler", &Aws_sns_topicHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sns_topic_policy{})
    sb.RegisterHandler("TerraformAws::Aws_sns_topic_policyHandler", &Aws_sns_topic_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sns_topic_subscription{})
    sb.RegisterHandler("TerraformAws::Aws_sns_topic_subscriptionHandler", &Aws_sns_topic_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_spot_datafeed_subscription{})
    sb.RegisterHandler("TerraformAws::Aws_spot_datafeed_subscriptionHandler", &Aws_spot_datafeed_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_spot_fleet_request{})
    sb.RegisterHandler("TerraformAws::Aws_spot_fleet_requestHandler", &Aws_spot_fleet_requestHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_spot_instance_request{})
    sb.RegisterHandler("TerraformAws::Aws_spot_instance_requestHandler", &Aws_spot_instance_requestHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sqs_queue{})
    sb.RegisterHandler("TerraformAws::Aws_sqs_queueHandler", &Aws_sqs_queueHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_sqs_queue_policy{})
    sb.RegisterHandler("TerraformAws::Aws_sqs_queue_policyHandler", &Aws_sqs_queue_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_activation{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_activationHandler", &Aws_ssm_activationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_association{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_associationHandler", &Aws_ssm_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_document{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_documentHandler", &Aws_ssm_documentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_maintenance_window{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_maintenance_windowHandler", &Aws_ssm_maintenance_windowHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_maintenance_window_target{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_maintenance_window_targetHandler", &Aws_ssm_maintenance_window_targetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_maintenance_window_task{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_maintenance_window_taskHandler", &Aws_ssm_maintenance_window_taskHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_parameter{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_parameterHandler", &Aws_ssm_parameterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_patch_baseline{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_patch_baselineHandler", &Aws_ssm_patch_baselineHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_patch_group{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_patch_groupHandler", &Aws_ssm_patch_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_ssm_resource_data_sync{})
    sb.RegisterHandler("TerraformAws::Aws_ssm_resource_data_syncHandler", &Aws_ssm_resource_data_syncHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_storagegateway_cache{})
    sb.RegisterHandler("TerraformAws::Aws_storagegateway_cacheHandler", &Aws_storagegateway_cacheHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_storagegateway_cached_iscsi_volume{})
    sb.RegisterHandler("TerraformAws::Aws_storagegateway_cached_iscsi_volumeHandler", &Aws_storagegateway_cached_iscsi_volumeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_storagegateway_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_storagegateway_gatewayHandler", &Aws_storagegateway_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_storagegateway_nfs_file_share{})
    sb.RegisterHandler("TerraformAws::Aws_storagegateway_nfs_file_shareHandler", &Aws_storagegateway_nfs_file_shareHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_storagegateway_smb_file_share{})
    sb.RegisterHandler("TerraformAws::Aws_storagegateway_smb_file_shareHandler", &Aws_storagegateway_smb_file_shareHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_storagegateway_upload_buffer{})
    sb.RegisterHandler("TerraformAws::Aws_storagegateway_upload_bufferHandler", &Aws_storagegateway_upload_bufferHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_storagegateway_working_storage{})
    sb.RegisterHandler("TerraformAws::Aws_storagegateway_working_storageHandler", &Aws_storagegateway_working_storageHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_subnet{})
    sb.RegisterHandler("TerraformAws::Aws_subnetHandler", &Aws_subnetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_swf_domain{})
    sb.RegisterHandler("TerraformAws::Aws_swf_domainHandler", &Aws_swf_domainHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_transfer_server{})
    sb.RegisterHandler("TerraformAws::Aws_transfer_serverHandler", &Aws_transfer_serverHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_transfer_ssh_key{})
    sb.RegisterHandler("TerraformAws::Aws_transfer_ssh_keyHandler", &Aws_transfer_ssh_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_transfer_user{})
    sb.RegisterHandler("TerraformAws::Aws_transfer_userHandler", &Aws_transfer_userHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_volume_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_volume_attachmentHandler", &Aws_volume_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc{})
    sb.RegisterHandler("TerraformAws::Aws_vpcHandler", &Aws_vpcHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_dhcp_options{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_dhcp_optionsHandler", &Aws_vpc_dhcp_optionsHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_dhcp_options_association{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_dhcp_options_associationHandler", &Aws_vpc_dhcp_options_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_endpoint{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_endpointHandler", &Aws_vpc_endpointHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_endpoint_connection_notification{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_endpoint_connection_notificationHandler", &Aws_vpc_endpoint_connection_notificationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_endpoint_route_table_association{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_endpoint_route_table_associationHandler", &Aws_vpc_endpoint_route_table_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_endpoint_service{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_endpoint_serviceHandler", &Aws_vpc_endpoint_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_endpoint_service_allowed_principal{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_endpoint_service_allowed_principalHandler", &Aws_vpc_endpoint_service_allowed_principalHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_endpoint_subnet_association{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_endpoint_subnet_associationHandler", &Aws_vpc_endpoint_subnet_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_ipv4_cidr_block_association{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_ipv4_cidr_block_associationHandler", &Aws_vpc_ipv4_cidr_block_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_peering_connection{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_peering_connectionHandler", &Aws_vpc_peering_connectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_peering_connection_accepter{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_peering_connection_accepterHandler", &Aws_vpc_peering_connection_accepterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpc_peering_connection_options{})
    sb.RegisterHandler("TerraformAws::Aws_vpc_peering_connection_optionsHandler", &Aws_vpc_peering_connection_optionsHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpn_connection{})
    sb.RegisterHandler("TerraformAws::Aws_vpn_connectionHandler", &Aws_vpn_connectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpn_connection_route{})
    sb.RegisterHandler("TerraformAws::Aws_vpn_connection_routeHandler", &Aws_vpn_connection_routeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpn_gateway{})
    sb.RegisterHandler("TerraformAws::Aws_vpn_gatewayHandler", &Aws_vpn_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpn_gateway_attachment{})
    sb.RegisterHandler("TerraformAws::Aws_vpn_gateway_attachmentHandler", &Aws_vpn_gateway_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_vpn_gateway_route_propagation{})
    sb.RegisterHandler("TerraformAws::Aws_vpn_gateway_route_propagationHandler", &Aws_vpn_gateway_route_propagationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_byte_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_waf_byte_match_setHandler", &Aws_waf_byte_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_geo_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_waf_geo_match_setHandler", &Aws_waf_geo_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_ipset{})
    sb.RegisterHandler("TerraformAws::Aws_waf_ipsetHandler", &Aws_waf_ipsetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_rate_based_rule{})
    sb.RegisterHandler("TerraformAws::Aws_waf_rate_based_ruleHandler", &Aws_waf_rate_based_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_regex_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_waf_regex_match_setHandler", &Aws_waf_regex_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_regex_pattern_set{})
    sb.RegisterHandler("TerraformAws::Aws_waf_regex_pattern_setHandler", &Aws_waf_regex_pattern_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_rule{})
    sb.RegisterHandler("TerraformAws::Aws_waf_ruleHandler", &Aws_waf_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_rule_group{})
    sb.RegisterHandler("TerraformAws::Aws_waf_rule_groupHandler", &Aws_waf_rule_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_size_constraint_set{})
    sb.RegisterHandler("TerraformAws::Aws_waf_size_constraint_setHandler", &Aws_waf_size_constraint_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_sql_injection_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_waf_sql_injection_match_setHandler", &Aws_waf_sql_injection_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_web_acl{})
    sb.RegisterHandler("TerraformAws::Aws_waf_web_aclHandler", &Aws_waf_web_aclHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_waf_xss_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_waf_xss_match_setHandler", &Aws_waf_xss_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_byte_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_byte_match_setHandler", &Aws_wafregional_byte_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_geo_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_geo_match_setHandler", &Aws_wafregional_geo_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_ipset{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_ipsetHandler", &Aws_wafregional_ipsetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_rate_based_rule{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_rate_based_ruleHandler", &Aws_wafregional_rate_based_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_regex_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_regex_match_setHandler", &Aws_wafregional_regex_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_regex_pattern_set{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_regex_pattern_setHandler", &Aws_wafregional_regex_pattern_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_rule{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_ruleHandler", &Aws_wafregional_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_rule_group{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_rule_groupHandler", &Aws_wafregional_rule_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_size_constraint_set{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_size_constraint_setHandler", &Aws_wafregional_size_constraint_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_sql_injection_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_sql_injection_match_setHandler", &Aws_wafregional_sql_injection_match_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_web_acl{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_web_aclHandler", &Aws_wafregional_web_aclHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_web_acl_association{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_web_acl_associationHandler", &Aws_wafregional_web_acl_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAws", Aws_wafregional_xss_match_set{})
    sb.RegisterHandler("TerraformAws::Aws_wafregional_xss_match_setHandler", &Aws_wafregional_xss_match_setHandler{provider: p}, evs[0])
}


type Aws_acm_certificate_domain_validation_options_1 struct {

    Domain_name *string

    Resource_record_name *string

    Resource_record_type *string

    Resource_record_value *string

}

type Aws_acm_certificate struct {

    Aws_acm_certificate_id *string `lyra:"ignore"`

    Arn *string

    Certificate_body *string

    Certificate_chain *string

    Domain_name *string

    Domain_validation_options *[]Aws_acm_certificate_domain_validation_options_1

    Private_key *string

    Subject_alternative_names *[]string

    Tags *map[string]string

    Validation_emails *[]string

    Validation_method *string

}

// Aws_acm_certificateHandler ...
type Aws_acm_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_acm_certificateHandler) Create(desired *Aws_acm_certificate) (*Aws_acm_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_acm_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_acm_certificateHandler) Read(externalID string) (*Aws_acm_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_acm_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_acm_certificate{ Aws_acm_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_acm_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_acm_certificate", externalID)
}

type Aws_acm_certificate_validation struct {

    Aws_acm_certificate_validation_id *string `lyra:"ignore"`

    Certificate_arn string

    Validation_record_fqdns *[]string

}

// Aws_acm_certificate_validationHandler ...
type Aws_acm_certificate_validationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_acm_certificate_validationHandler) Create(desired *Aws_acm_certificate_validation) (*Aws_acm_certificate_validation, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_acm_certificate_validation", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_acm_certificate_validationHandler) Read(externalID string) (*Aws_acm_certificate_validation, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_acm_certificate_validation", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_acm_certificate_validation{ Aws_acm_certificate_validation_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_acm_certificate_validationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_acm_certificate_validation", externalID)
}

type Aws_acmpca_certificate_authority_certificate_authority_configuration_2_subject_3 struct {

    Common_name *string

    Country *string

    Distinguished_name_qualifier *string

    Generation_qualifier *string

    Given_name *string

    Initials *string

    Locality *string

    Organization *string

    Organizational_unit *string

    Pseudonym *string

    State *string

    Surname *string

    Title *string

}

type Aws_acmpca_certificate_authority_certificate_authority_configuration_2 struct {

    Key_algorithm string

    Signing_algorithm string

    Subject []Aws_acmpca_certificate_authority_certificate_authority_configuration_2_subject_3

}

type Aws_acmpca_certificate_authority_revocation_configuration_4_crl_configuration_5 struct {

    Custom_cname *string

    Enabled *bool

    Expiration_in_days int

    S3_bucket_name *string

}

type Aws_acmpca_certificate_authority_revocation_configuration_4 struct {

    Crl_configuration *[]Aws_acmpca_certificate_authority_revocation_configuration_4_crl_configuration_5

}

type Aws_acmpca_certificate_authority struct {

    Aws_acmpca_certificate_authority_id *string `lyra:"ignore"`

    Arn *string

    Certificate *string

    Certificate_authority_configuration []Aws_acmpca_certificate_authority_certificate_authority_configuration_2

    Certificate_chain *string

    Certificate_signing_request *string

    Enabled *bool

    Not_after *string

    Not_before *string

    Revocation_configuration *[]Aws_acmpca_certificate_authority_revocation_configuration_4

    Serial *string

    Status *string

    Tags *map[string]string

    Type *string

}

// Aws_acmpca_certificate_authorityHandler ...
type Aws_acmpca_certificate_authorityHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_acmpca_certificate_authorityHandler) Create(desired *Aws_acmpca_certificate_authority) (*Aws_acmpca_certificate_authority, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_acmpca_certificate_authority", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_acmpca_certificate_authorityHandler) Read(externalID string) (*Aws_acmpca_certificate_authority, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_acmpca_certificate_authority", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_acmpca_certificate_authority{ Aws_acmpca_certificate_authority_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_acmpca_certificate_authorityHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_acmpca_certificate_authority", externalID)
}

type Aws_alb_access_logs_6 struct {

    Bucket string

    Enabled *bool

    Prefix *string

}

type Aws_alb_subnet_mapping_7 struct {

    Allocation_id *string

    Subnet_id string

}

type Aws_alb struct {

    Aws_alb_id *string `lyra:"ignore"`

    Access_logs *[]Aws_alb_access_logs_6

    Arn *string

    Arn_suffix *string

    Dns_name *string

    Enable_cross_zone_load_balancing *bool

    Enable_deletion_protection *bool

    Enable_http2 *bool

    Idle_timeout *int

    Internal *bool

    Ip_address_type *string

    Load_balancer_type *string

    Name *string

    Name_prefix *string

    Security_groups *[]string

    Subnet_mapping *[]Aws_alb_subnet_mapping_7

    Subnets *[]string

    Tags *map[string]string

    Vpc_id *string

    Zone_id *string

}

// Aws_albHandler ...
type Aws_albHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_albHandler) Create(desired *Aws_alb) (*Aws_alb, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_alb", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_albHandler) Read(externalID string) (*Aws_alb, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_alb", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_alb{ Aws_alb_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_albHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_alb", externalID)
}

type Aws_alb_listener_default_action_8_authenticate_cognito_9 struct {

    Authentication_request_extra_params *map[string]string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    User_pool_arn string

    User_pool_client_id string

    User_pool_domain string

}

type Aws_alb_listener_default_action_8_authenticate_oidc_10 struct {

    Authentication_request_extra_params *map[string]string

    Authorization_endpoint string

    Client_id string

    Client_secret string

    Issuer string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    Token_endpoint string

    User_info_endpoint string

}

type Aws_alb_listener_default_action_8_fixed_response_11 struct {

    Content_type string

    Message_body *string

    Status_code *string

}

type Aws_alb_listener_default_action_8_redirect_12 struct {

    Host *string

    Path *string

    Port *string

    Protocol *string

    Query *string

    Status_code string

}

type Aws_alb_listener_default_action_8 struct {

    Authenticate_cognito *[]Aws_alb_listener_default_action_8_authenticate_cognito_9

    Authenticate_oidc *[]Aws_alb_listener_default_action_8_authenticate_oidc_10

    Fixed_response *[]Aws_alb_listener_default_action_8_fixed_response_11

    Order *int

    Redirect *[]Aws_alb_listener_default_action_8_redirect_12

    Target_group_arn *string

    Type string

}

type Aws_alb_listener struct {

    Aws_alb_listener_id *string `lyra:"ignore"`

    Arn *string

    Certificate_arn *string

    Default_action []Aws_alb_listener_default_action_8

    Load_balancer_arn string

    Port int

    Protocol *string

    Ssl_policy *string

}

// Aws_alb_listenerHandler ...
type Aws_alb_listenerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_alb_listenerHandler) Create(desired *Aws_alb_listener) (*Aws_alb_listener, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_alb_listener", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_alb_listenerHandler) Read(externalID string) (*Aws_alb_listener, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_alb_listener", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_alb_listener{ Aws_alb_listener_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_alb_listenerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_alb_listener", externalID)
}

type Aws_alb_listener_certificate struct {

    Aws_alb_listener_certificate_id *string `lyra:"ignore"`

    Certificate_arn string

    Listener_arn string

}

// Aws_alb_listener_certificateHandler ...
type Aws_alb_listener_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_alb_listener_certificateHandler) Create(desired *Aws_alb_listener_certificate) (*Aws_alb_listener_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_alb_listener_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_alb_listener_certificateHandler) Read(externalID string) (*Aws_alb_listener_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_alb_listener_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_alb_listener_certificate{ Aws_alb_listener_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_alb_listener_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_alb_listener_certificate", externalID)
}

type Aws_alb_listener_rule_action_13_authenticate_cognito_14 struct {

    Authentication_request_extra_params *map[string]string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    User_pool_arn string

    User_pool_client_id string

    User_pool_domain string

}

type Aws_alb_listener_rule_action_13_authenticate_oidc_15 struct {

    Authentication_request_extra_params *map[string]string

    Authorization_endpoint string

    Client_id string

    Client_secret string

    Issuer string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    Token_endpoint string

    User_info_endpoint string

}

type Aws_alb_listener_rule_action_13_fixed_response_16 struct {

    Content_type string

    Message_body *string

    Status_code *string

}

type Aws_alb_listener_rule_action_13_redirect_17 struct {

    Host *string

    Path *string

    Port *string

    Protocol *string

    Query *string

    Status_code string

}

type Aws_alb_listener_rule_action_13 struct {

    Authenticate_cognito *[]Aws_alb_listener_rule_action_13_authenticate_cognito_14

    Authenticate_oidc *[]Aws_alb_listener_rule_action_13_authenticate_oidc_15

    Fixed_response *[]Aws_alb_listener_rule_action_13_fixed_response_16

    Order *int

    Redirect *[]Aws_alb_listener_rule_action_13_redirect_17

    Target_group_arn *string

    Type string

}

type Aws_alb_listener_rule_condition_18 struct {

    Field *string

    Values *[]string

}

type Aws_alb_listener_rule struct {

    Aws_alb_listener_rule_id *string `lyra:"ignore"`

    Action []Aws_alb_listener_rule_action_13

    Arn *string

    Condition []Aws_alb_listener_rule_condition_18

    Listener_arn string

    Priority *int

}

// Aws_alb_listener_ruleHandler ...
type Aws_alb_listener_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_alb_listener_ruleHandler) Create(desired *Aws_alb_listener_rule) (*Aws_alb_listener_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_alb_listener_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_alb_listener_ruleHandler) Read(externalID string) (*Aws_alb_listener_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_alb_listener_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_alb_listener_rule{ Aws_alb_listener_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_alb_listener_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_alb_listener_rule", externalID)
}

type Aws_alb_target_group_health_check_19 struct {

    Healthy_threshold *int

    Interval *int

    Matcher *string

    Path *string

    Port *string

    Protocol *string

    Timeout *int

    Unhealthy_threshold *int

}

type Aws_alb_target_group_stickiness_20 struct {

    Cookie_duration *int

    Enabled *bool

    Type string

}

type Aws_alb_target_group struct {

    Aws_alb_target_group_id *string `lyra:"ignore"`

    Arn *string

    Arn_suffix *string

    Deregistration_delay *int

    Health_check *[]Aws_alb_target_group_health_check_19

    Name *string

    Name_prefix *string

    Port *int

    Protocol *string

    Proxy_protocol_v2 *bool

    Slow_start *int

    Stickiness *[]Aws_alb_target_group_stickiness_20

    Tags *map[string]string

    Target_type *string

    Vpc_id *string

}

// Aws_alb_target_groupHandler ...
type Aws_alb_target_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_alb_target_groupHandler) Create(desired *Aws_alb_target_group) (*Aws_alb_target_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_alb_target_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_alb_target_groupHandler) Read(externalID string) (*Aws_alb_target_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_alb_target_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_alb_target_group{ Aws_alb_target_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_alb_target_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_alb_target_group", externalID)
}

type Aws_alb_target_group_attachment struct {

    Aws_alb_target_group_attachment_id *string `lyra:"ignore"`

    Availability_zone *string

    Port *int

    Target_group_arn string

    Target_id string

}

// Aws_alb_target_group_attachmentHandler ...
type Aws_alb_target_group_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_alb_target_group_attachmentHandler) Create(desired *Aws_alb_target_group_attachment) (*Aws_alb_target_group_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_alb_target_group_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_alb_target_group_attachmentHandler) Read(externalID string) (*Aws_alb_target_group_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_alb_target_group_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_alb_target_group_attachment{ Aws_alb_target_group_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_alb_target_group_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_alb_target_group_attachment", externalID)
}

type Aws_ami_ebs_block_device_21 struct {

    Delete_on_termination *bool

    Device_name string

    Encrypted *bool

    Iops *int

    Snapshot_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_ami_ephemeral_block_device_22 struct {

    Device_name string

    Virtual_name string

}

type Aws_ami struct {

    Aws_ami_id *string `lyra:"ignore"`

    Architecture *string

    Description *string

    Ebs_block_device *[]Aws_ami_ebs_block_device_21

    Ena_support *bool

    Ephemeral_block_device *[]Aws_ami_ephemeral_block_device_22

    Image_location *string

    Kernel_id *string

    Manage_ebs_snapshots *bool

    Name string

    Ramdisk_id *string

    Root_device_name *string

    Root_snapshot_id *string

    Sriov_net_support *string

    Tags *map[string]string

    Virtualization_type *string

}

// Aws_amiHandler ...
type Aws_amiHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_amiHandler) Create(desired *Aws_ami) (*Aws_ami, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ami", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_amiHandler) Read(externalID string) (*Aws_ami, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ami", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ami{ Aws_ami_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_amiHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ami", externalID)
}

type Aws_ami_copy_ebs_block_device_23 struct {

    Delete_on_termination *bool

    Device_name *string

    Encrypted *bool

    Iops *int

    Snapshot_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_ami_copy_ephemeral_block_device_24 struct {

    Device_name *string

    Virtual_name *string

}

type Aws_ami_copy struct {

    Aws_ami_copy_id *string `lyra:"ignore"`

    Architecture *string

    Description *string

    Ebs_block_device *[]Aws_ami_copy_ebs_block_device_23

    Ena_support *bool

    Encrypted *bool

    Ephemeral_block_device *[]Aws_ami_copy_ephemeral_block_device_24

    Image_location *string

    Kernel_id *string

    Kms_key_id *string

    Manage_ebs_snapshots *bool

    Name string

    Ramdisk_id *string

    Root_device_name *string

    Root_snapshot_id *string

    Source_ami_id string

    Source_ami_region string

    Sriov_net_support *string

    Tags *map[string]string

    Virtualization_type *string

}

// Aws_ami_copyHandler ...
type Aws_ami_copyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ami_copyHandler) Create(desired *Aws_ami_copy) (*Aws_ami_copy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ami_copy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ami_copyHandler) Read(externalID string) (*Aws_ami_copy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ami_copy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ami_copy{ Aws_ami_copy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ami_copyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ami_copy", externalID)
}

type Aws_ami_from_instance_ebs_block_device_25 struct {

    Delete_on_termination *bool

    Device_name *string

    Encrypted *bool

    Iops *int

    Snapshot_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_ami_from_instance_ephemeral_block_device_26 struct {

    Device_name *string

    Virtual_name *string

}

type Aws_ami_from_instance struct {

    Aws_ami_from_instance_id *string `lyra:"ignore"`

    Architecture *string

    Description *string

    Ebs_block_device *[]Aws_ami_from_instance_ebs_block_device_25

    Ena_support *bool

    Ephemeral_block_device *[]Aws_ami_from_instance_ephemeral_block_device_26

    Image_location *string

    Kernel_id *string

    Manage_ebs_snapshots *bool

    Name string

    Ramdisk_id *string

    Root_device_name *string

    Root_snapshot_id *string

    Snapshot_without_reboot *bool

    Source_instance_id string

    Sriov_net_support *string

    Tags *map[string]string

    Virtualization_type *string

}

// Aws_ami_from_instanceHandler ...
type Aws_ami_from_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ami_from_instanceHandler) Create(desired *Aws_ami_from_instance) (*Aws_ami_from_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ami_from_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ami_from_instanceHandler) Read(externalID string) (*Aws_ami_from_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ami_from_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ami_from_instance{ Aws_ami_from_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ami_from_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ami_from_instance", externalID)
}

type Aws_ami_launch_permission struct {

    Aws_ami_launch_permission_id *string `lyra:"ignore"`

    Account_id string

    Image_id string

}

// Aws_ami_launch_permissionHandler ...
type Aws_ami_launch_permissionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ami_launch_permissionHandler) Create(desired *Aws_ami_launch_permission) (*Aws_ami_launch_permission, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ami_launch_permission", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ami_launch_permissionHandler) Read(externalID string) (*Aws_ami_launch_permission, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ami_launch_permission", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ami_launch_permission{ Aws_ami_launch_permission_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ami_launch_permissionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ami_launch_permission", externalID)
}

type Aws_api_gateway_account_throttle_settings_27 struct {

    Burst_limit *int

    Rate_limit *float64

}

type Aws_api_gateway_account struct {

    Aws_api_gateway_account_id *string `lyra:"ignore"`

    Cloudwatch_role_arn *string

    Throttle_settings *[]Aws_api_gateway_account_throttle_settings_27

}

// Aws_api_gateway_accountHandler ...
type Aws_api_gateway_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_accountHandler) Create(desired *Aws_api_gateway_account) (*Aws_api_gateway_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_accountHandler) Read(externalID string) (*Aws_api_gateway_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_account{ Aws_api_gateway_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_account", externalID)
}

type Aws_api_gateway_api_key_stage_key_28 struct {

    Rest_api_id string

    Stage_name string

}

type Aws_api_gateway_api_key struct {

    Aws_api_gateway_api_key_id *string `lyra:"ignore"`

    Created_date *string

    Description *string

    Enabled *bool

    Last_updated_date *string

    Name string

    Stage_key *[]Aws_api_gateway_api_key_stage_key_28

    Value *string

}

// Aws_api_gateway_api_keyHandler ...
type Aws_api_gateway_api_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_api_keyHandler) Create(desired *Aws_api_gateway_api_key) (*Aws_api_gateway_api_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_api_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_api_keyHandler) Read(externalID string) (*Aws_api_gateway_api_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_api_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_api_key{ Aws_api_gateway_api_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_api_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_api_key", externalID)
}

type Aws_api_gateway_authorizer struct {

    Aws_api_gateway_authorizer_id *string `lyra:"ignore"`

    Authorizer_credentials *string

    Authorizer_result_ttl_in_seconds *int

    Authorizer_uri *string

    Identity_source *string

    Identity_validation_expression *string

    Name string

    Provider_arns *[]string

    Rest_api_id string

    Type *string

}

// Aws_api_gateway_authorizerHandler ...
type Aws_api_gateway_authorizerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_authorizerHandler) Create(desired *Aws_api_gateway_authorizer) (*Aws_api_gateway_authorizer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_authorizer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_authorizerHandler) Read(externalID string) (*Aws_api_gateway_authorizer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_authorizer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_authorizer{ Aws_api_gateway_authorizer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_authorizerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_authorizer", externalID)
}

type Aws_api_gateway_base_path_mapping struct {

    Aws_api_gateway_base_path_mapping_id *string `lyra:"ignore"`

    Api_id string

    Base_path *string

    Domain_name string

    Stage_name *string

}

// Aws_api_gateway_base_path_mappingHandler ...
type Aws_api_gateway_base_path_mappingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_base_path_mappingHandler) Create(desired *Aws_api_gateway_base_path_mapping) (*Aws_api_gateway_base_path_mapping, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_base_path_mapping", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_base_path_mappingHandler) Read(externalID string) (*Aws_api_gateway_base_path_mapping, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_base_path_mapping", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_base_path_mapping{ Aws_api_gateway_base_path_mapping_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_base_path_mappingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_base_path_mapping", externalID)
}

type Aws_api_gateway_client_certificate struct {

    Aws_api_gateway_client_certificate_id *string `lyra:"ignore"`

    Created_date *string

    Description *string

    Expiration_date *string

    Pem_encoded_certificate *string

}

// Aws_api_gateway_client_certificateHandler ...
type Aws_api_gateway_client_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_client_certificateHandler) Create(desired *Aws_api_gateway_client_certificate) (*Aws_api_gateway_client_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_client_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_client_certificateHandler) Read(externalID string) (*Aws_api_gateway_client_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_client_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_client_certificate{ Aws_api_gateway_client_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_client_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_client_certificate", externalID)
}

type Aws_api_gateway_deployment struct {

    Aws_api_gateway_deployment_id *string `lyra:"ignore"`

    Created_date *string

    Description *string

    Execution_arn *string

    Invoke_url *string

    Rest_api_id string

    Stage_description *string

    Stage_name string

    Variables *map[string]string

}

// Aws_api_gateway_deploymentHandler ...
type Aws_api_gateway_deploymentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_deploymentHandler) Create(desired *Aws_api_gateway_deployment) (*Aws_api_gateway_deployment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_deployment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_deploymentHandler) Read(externalID string) (*Aws_api_gateway_deployment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_deployment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_deployment{ Aws_api_gateway_deployment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_deploymentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_deployment", externalID)
}

type Aws_api_gateway_documentation_part_location_29 struct {

    Method *string

    Name *string

    Path *string

    Status_code *string

    Type string

}

type Aws_api_gateway_documentation_part struct {

    Aws_api_gateway_documentation_part_id *string `lyra:"ignore"`

    Location []Aws_api_gateway_documentation_part_location_29

    Properties string

    Rest_api_id string

}

// Aws_api_gateway_documentation_partHandler ...
type Aws_api_gateway_documentation_partHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_documentation_partHandler) Create(desired *Aws_api_gateway_documentation_part) (*Aws_api_gateway_documentation_part, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_documentation_part", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_documentation_partHandler) Read(externalID string) (*Aws_api_gateway_documentation_part, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_documentation_part", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_documentation_part{ Aws_api_gateway_documentation_part_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_documentation_partHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_documentation_part", externalID)
}

type Aws_api_gateway_documentation_version struct {

    Aws_api_gateway_documentation_version_id *string `lyra:"ignore"`

    Description *string

    Rest_api_id string

    Version string

}

// Aws_api_gateway_documentation_versionHandler ...
type Aws_api_gateway_documentation_versionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_documentation_versionHandler) Create(desired *Aws_api_gateway_documentation_version) (*Aws_api_gateway_documentation_version, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_documentation_version", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_documentation_versionHandler) Read(externalID string) (*Aws_api_gateway_documentation_version, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_documentation_version", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_documentation_version{ Aws_api_gateway_documentation_version_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_documentation_versionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_documentation_version", externalID)
}

type Aws_api_gateway_domain_name_endpoint_configuration_30 struct {

    Types []string

}

type Aws_api_gateway_domain_name struct {

    Aws_api_gateway_domain_name_id *string `lyra:"ignore"`

    Certificate_arn *string

    Certificate_body *string

    Certificate_chain *string

    Certificate_name *string

    Certificate_private_key *string

    Certificate_upload_date *string

    Cloudfront_domain_name *string

    Cloudfront_zone_id *string

    Domain_name string

    Endpoint_configuration *[]Aws_api_gateway_domain_name_endpoint_configuration_30

    Regional_certificate_arn *string

    Regional_certificate_name *string

    Regional_domain_name *string

    Regional_zone_id *string

}

// Aws_api_gateway_domain_nameHandler ...
type Aws_api_gateway_domain_nameHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_domain_nameHandler) Create(desired *Aws_api_gateway_domain_name) (*Aws_api_gateway_domain_name, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_domain_name", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_domain_nameHandler) Read(externalID string) (*Aws_api_gateway_domain_name, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_domain_name", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_domain_name{ Aws_api_gateway_domain_name_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_domain_nameHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_domain_name", externalID)
}

type Aws_api_gateway_gateway_response struct {

    Aws_api_gateway_gateway_response_id *string `lyra:"ignore"`

    Response_parameters *map[string]string

    Response_templates *map[string]string

    Response_type string

    Rest_api_id string

    Status_code *string

}

// Aws_api_gateway_gateway_responseHandler ...
type Aws_api_gateway_gateway_responseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_gateway_responseHandler) Create(desired *Aws_api_gateway_gateway_response) (*Aws_api_gateway_gateway_response, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_gateway_response", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_gateway_responseHandler) Read(externalID string) (*Aws_api_gateway_gateway_response, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_gateway_response", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_gateway_response{ Aws_api_gateway_gateway_response_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_gateway_responseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_gateway_response", externalID)
}

type Aws_api_gateway_integration struct {

    Aws_api_gateway_integration_id *string `lyra:"ignore"`

    Cache_key_parameters *[]string

    Cache_namespace *string

    Connection_id *string

    Connection_type *string

    Content_handling *string

    Credentials *string

    Http_method string

    Integration_http_method *string

    Passthrough_behavior *string

    Request_parameters *map[string]string

    Request_parameters_in_json *string

    Request_templates *map[string]string

    Resource_id string

    Rest_api_id string

    Timeout_milliseconds *int

    Type string

    Uri *string

}

// Aws_api_gateway_integrationHandler ...
type Aws_api_gateway_integrationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_integrationHandler) Create(desired *Aws_api_gateway_integration) (*Aws_api_gateway_integration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_integration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_integrationHandler) Read(externalID string) (*Aws_api_gateway_integration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_integration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_integration{ Aws_api_gateway_integration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_integrationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_integration", externalID)
}

type Aws_api_gateway_integration_response struct {

    Aws_api_gateway_integration_response_id *string `lyra:"ignore"`

    Content_handling *string

    Http_method string

    Resource_id string

    Response_parameters *map[string]string

    Response_parameters_in_json *string

    Response_templates *map[string]string

    Rest_api_id string

    Selection_pattern *string

    Status_code string

}

// Aws_api_gateway_integration_responseHandler ...
type Aws_api_gateway_integration_responseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_integration_responseHandler) Create(desired *Aws_api_gateway_integration_response) (*Aws_api_gateway_integration_response, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_integration_response", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_integration_responseHandler) Read(externalID string) (*Aws_api_gateway_integration_response, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_integration_response", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_integration_response{ Aws_api_gateway_integration_response_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_integration_responseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_integration_response", externalID)
}

type Aws_api_gateway_method struct {

    Aws_api_gateway_method_id *string `lyra:"ignore"`

    Api_key_required *bool

    Authorization string

    Authorization_scopes *[]string

    Authorizer_id *string

    Http_method string

    Request_models *map[string]string

    Request_parameters *map[string]string

    Request_parameters_in_json *string

    Request_validator_id *string

    Resource_id string

    Rest_api_id string

}

// Aws_api_gateway_methodHandler ...
type Aws_api_gateway_methodHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_methodHandler) Create(desired *Aws_api_gateway_method) (*Aws_api_gateway_method, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_method", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_methodHandler) Read(externalID string) (*Aws_api_gateway_method, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_method", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_method{ Aws_api_gateway_method_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_methodHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_method", externalID)
}

type Aws_api_gateway_method_response struct {

    Aws_api_gateway_method_response_id *string `lyra:"ignore"`

    Http_method string

    Resource_id string

    Response_models *map[string]string

    Response_parameters *map[string]string

    Response_parameters_in_json *string

    Rest_api_id string

    Status_code string

}

// Aws_api_gateway_method_responseHandler ...
type Aws_api_gateway_method_responseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_method_responseHandler) Create(desired *Aws_api_gateway_method_response) (*Aws_api_gateway_method_response, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_method_response", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_method_responseHandler) Read(externalID string) (*Aws_api_gateway_method_response, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_method_response", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_method_response{ Aws_api_gateway_method_response_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_method_responseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_method_response", externalID)
}

type Aws_api_gateway_method_settings_settings_31 struct {

    Cache_data_encrypted *bool

    Cache_ttl_in_seconds *int

    Caching_enabled *bool

    Data_trace_enabled *bool

    Logging_level *string

    Metrics_enabled *bool

    Require_authorization_for_cache_control *bool

    Throttling_burst_limit *int

    Throttling_rate_limit *float64

    Unauthorized_cache_control_header_strategy *string

}

type Aws_api_gateway_method_settings struct {

    Aws_api_gateway_method_settings_id *string `lyra:"ignore"`

    Method_path string

    Rest_api_id string

    Settings []Aws_api_gateway_method_settings_settings_31

    Stage_name string

}

// Aws_api_gateway_method_settingsHandler ...
type Aws_api_gateway_method_settingsHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_method_settingsHandler) Create(desired *Aws_api_gateway_method_settings) (*Aws_api_gateway_method_settings, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_method_settings", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_method_settingsHandler) Read(externalID string) (*Aws_api_gateway_method_settings, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_method_settings", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_method_settings{ Aws_api_gateway_method_settings_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_method_settingsHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_method_settings", externalID)
}

type Aws_api_gateway_model struct {

    Aws_api_gateway_model_id *string `lyra:"ignore"`

    Content_type string

    Description *string

    Name string

    Rest_api_id string

    Schema *string

}

// Aws_api_gateway_modelHandler ...
type Aws_api_gateway_modelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_modelHandler) Create(desired *Aws_api_gateway_model) (*Aws_api_gateway_model, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_model", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_modelHandler) Read(externalID string) (*Aws_api_gateway_model, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_model", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_model{ Aws_api_gateway_model_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_modelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_model", externalID)
}

type Aws_api_gateway_request_validator struct {

    Aws_api_gateway_request_validator_id *string `lyra:"ignore"`

    Name string

    Rest_api_id string

    Validate_request_body *bool

    Validate_request_parameters *bool

}

// Aws_api_gateway_request_validatorHandler ...
type Aws_api_gateway_request_validatorHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_request_validatorHandler) Create(desired *Aws_api_gateway_request_validator) (*Aws_api_gateway_request_validator, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_request_validator", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_request_validatorHandler) Read(externalID string) (*Aws_api_gateway_request_validator, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_request_validator", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_request_validator{ Aws_api_gateway_request_validator_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_request_validatorHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_request_validator", externalID)
}

type Aws_api_gateway_resource struct {

    Aws_api_gateway_resource_id *string `lyra:"ignore"`

    Parent_id string

    Path *string

    Path_part string

    Rest_api_id string

}

// Aws_api_gateway_resourceHandler ...
type Aws_api_gateway_resourceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_resourceHandler) Create(desired *Aws_api_gateway_resource) (*Aws_api_gateway_resource, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_resource", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_resourceHandler) Read(externalID string) (*Aws_api_gateway_resource, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_resource", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_resource{ Aws_api_gateway_resource_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_resourceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_resource", externalID)
}

type Aws_api_gateway_rest_api_endpoint_configuration_32 struct {

    Types []string

}

type Aws_api_gateway_rest_api struct {

    Aws_api_gateway_rest_api_id *string `lyra:"ignore"`

    Api_key_source *string

    Binary_media_types *[]string

    Body *string

    Created_date *string

    Description *string

    Endpoint_configuration *[]Aws_api_gateway_rest_api_endpoint_configuration_32

    Execution_arn *string

    Minimum_compression_size *int

    Name string

    Policy *string

    Root_resource_id *string

}

// Aws_api_gateway_rest_apiHandler ...
type Aws_api_gateway_rest_apiHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_rest_apiHandler) Create(desired *Aws_api_gateway_rest_api) (*Aws_api_gateway_rest_api, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_rest_api", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_rest_apiHandler) Read(externalID string) (*Aws_api_gateway_rest_api, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_rest_api", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_rest_api{ Aws_api_gateway_rest_api_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_rest_apiHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_rest_api", externalID)
}

type Aws_api_gateway_stage_access_log_settings_33 struct {

    Destination_arn string

    Format string

}

type Aws_api_gateway_stage struct {

    Aws_api_gateway_stage_id *string `lyra:"ignore"`

    Access_log_settings *[]Aws_api_gateway_stage_access_log_settings_33

    Cache_cluster_enabled *bool

    Cache_cluster_size *string

    Client_certificate_id *string

    Deployment_id string

    Description *string

    Documentation_version *string

    Execution_arn *string

    Invoke_url *string

    Rest_api_id string

    Stage_name string

    Tags *map[string]string

    Variables *map[string]string

    Xray_tracing_enabled *bool

}

// Aws_api_gateway_stageHandler ...
type Aws_api_gateway_stageHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_stageHandler) Create(desired *Aws_api_gateway_stage) (*Aws_api_gateway_stage, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_stage", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_stageHandler) Read(externalID string) (*Aws_api_gateway_stage, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_stage", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_stage{ Aws_api_gateway_stage_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_stageHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_stage", externalID)
}

type Aws_api_gateway_usage_plan_api_stages_34 struct {

    Api_id string

    Stage string

}

type Aws_api_gateway_usage_plan_quota_settings_35 struct {

    Limit int

    Offset *int

    Period string

}

type Aws_api_gateway_usage_plan_throttle_settings_36 struct {

    Burst_limit *int

    Rate_limit *float64

}

type Aws_api_gateway_usage_plan struct {

    Aws_api_gateway_usage_plan_id *string `lyra:"ignore"`

    Api_stages *[]Aws_api_gateway_usage_plan_api_stages_34

    Description *string

    Name string

    Product_code *string

    Quota_settings *[]Aws_api_gateway_usage_plan_quota_settings_35

    Throttle_settings *[]Aws_api_gateway_usage_plan_throttle_settings_36

}

// Aws_api_gateway_usage_planHandler ...
type Aws_api_gateway_usage_planHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_usage_planHandler) Create(desired *Aws_api_gateway_usage_plan) (*Aws_api_gateway_usage_plan, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_usage_plan", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_usage_planHandler) Read(externalID string) (*Aws_api_gateway_usage_plan, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_usage_plan", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_usage_plan{ Aws_api_gateway_usage_plan_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_usage_planHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_usage_plan", externalID)
}

type Aws_api_gateway_usage_plan_key struct {

    Aws_api_gateway_usage_plan_key_id *string `lyra:"ignore"`

    Key_id string

    Key_type string

    Name *string

    Usage_plan_id string

    Value *string

}

// Aws_api_gateway_usage_plan_keyHandler ...
type Aws_api_gateway_usage_plan_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_usage_plan_keyHandler) Create(desired *Aws_api_gateway_usage_plan_key) (*Aws_api_gateway_usage_plan_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_usage_plan_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_usage_plan_keyHandler) Read(externalID string) (*Aws_api_gateway_usage_plan_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_usage_plan_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_usage_plan_key{ Aws_api_gateway_usage_plan_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_usage_plan_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_usage_plan_key", externalID)
}

type Aws_api_gateway_vpc_link struct {

    Aws_api_gateway_vpc_link_id *string `lyra:"ignore"`

    Description *string

    Name string

    Target_arns []string

}

// Aws_api_gateway_vpc_linkHandler ...
type Aws_api_gateway_vpc_linkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_api_gateway_vpc_linkHandler) Create(desired *Aws_api_gateway_vpc_link) (*Aws_api_gateway_vpc_link, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_api_gateway_vpc_link", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_api_gateway_vpc_linkHandler) Read(externalID string) (*Aws_api_gateway_vpc_link, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_api_gateway_vpc_link", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_api_gateway_vpc_link{ Aws_api_gateway_vpc_link_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_api_gateway_vpc_linkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_api_gateway_vpc_link", externalID)
}

type Aws_app_cookie_stickiness_policy struct {

    Aws_app_cookie_stickiness_policy_id *string `lyra:"ignore"`

    Cookie_name string

    Lb_port int

    Load_balancer string

    Name string

}

// Aws_app_cookie_stickiness_policyHandler ...
type Aws_app_cookie_stickiness_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_app_cookie_stickiness_policyHandler) Create(desired *Aws_app_cookie_stickiness_policy) (*Aws_app_cookie_stickiness_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_app_cookie_stickiness_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_app_cookie_stickiness_policyHandler) Read(externalID string) (*Aws_app_cookie_stickiness_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_app_cookie_stickiness_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_app_cookie_stickiness_policy{ Aws_app_cookie_stickiness_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_app_cookie_stickiness_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_app_cookie_stickiness_policy", externalID)
}

type Aws_appautoscaling_policy_step_adjustment_37 struct {

    Metric_interval_lower_bound *string

    Metric_interval_upper_bound *string

    Scaling_adjustment int

}

type Aws_appautoscaling_policy_step_scaling_policy_configuration_38_step_adjustment_39 struct {

    Metric_interval_lower_bound *string

    Metric_interval_upper_bound *string

    Scaling_adjustment int

}

type Aws_appautoscaling_policy_step_scaling_policy_configuration_38 struct {

    Adjustment_type *string

    Cooldown *int

    Metric_aggregation_type *string

    Min_adjustment_magnitude *int

    Step_adjustment *[]Aws_appautoscaling_policy_step_scaling_policy_configuration_38_step_adjustment_39

}

type Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40_customized_metric_specification_41_dimensions_42 struct {

    Name string

    Value string

}

type Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40_customized_metric_specification_41 struct {

    Dimensions *[]Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40_customized_metric_specification_41_dimensions_42

    Metric_name string

    Namespace string

    Statistic string

    Unit *string

}

type Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40_predefined_metric_specification_43 struct {

    Predefined_metric_type string

    Resource_label *string

}

type Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40 struct {

    Customized_metric_specification *[]Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40_customized_metric_specification_41

    Disable_scale_in *bool

    Predefined_metric_specification *[]Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40_predefined_metric_specification_43

    Scale_in_cooldown *int

    Scale_out_cooldown *int

    Target_value float64

}

type Aws_appautoscaling_policy struct {

    Aws_appautoscaling_policy_id *string `lyra:"ignore"`

    Adjustment_type *string

    Alarms *[]string

    Arn *string

    Cooldown *int

    Metric_aggregation_type *string

    Min_adjustment_magnitude *int

    Name string

    Policy_type *string

    Resource_id string

    Scalable_dimension string

    Service_namespace string

    Step_adjustment *[]Aws_appautoscaling_policy_step_adjustment_37

    Step_scaling_policy_configuration *[]Aws_appautoscaling_policy_step_scaling_policy_configuration_38

    Target_tracking_scaling_policy_configuration *[]Aws_appautoscaling_policy_target_tracking_scaling_policy_configuration_40

}

// Aws_appautoscaling_policyHandler ...
type Aws_appautoscaling_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appautoscaling_policyHandler) Create(desired *Aws_appautoscaling_policy) (*Aws_appautoscaling_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appautoscaling_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appautoscaling_policyHandler) Read(externalID string) (*Aws_appautoscaling_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appautoscaling_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appautoscaling_policy{ Aws_appautoscaling_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appautoscaling_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appautoscaling_policy", externalID)
}

type Aws_appautoscaling_scheduled_action_scalable_target_action_44 struct {

    Max_capacity *int

    Min_capacity *int

}

type Aws_appautoscaling_scheduled_action struct {

    Aws_appautoscaling_scheduled_action_id *string `lyra:"ignore"`

    Arn *string

    End_time *string

    Name string

    Resource_id string

    Scalable_dimension *string

    Scalable_target_action *[]Aws_appautoscaling_scheduled_action_scalable_target_action_44

    Schedule *string

    Service_namespace string

    Start_time *string

}

// Aws_appautoscaling_scheduled_actionHandler ...
type Aws_appautoscaling_scheduled_actionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appautoscaling_scheduled_actionHandler) Create(desired *Aws_appautoscaling_scheduled_action) (*Aws_appautoscaling_scheduled_action, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appautoscaling_scheduled_action", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appautoscaling_scheduled_actionHandler) Read(externalID string) (*Aws_appautoscaling_scheduled_action, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appautoscaling_scheduled_action", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appautoscaling_scheduled_action{ Aws_appautoscaling_scheduled_action_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appautoscaling_scheduled_actionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appautoscaling_scheduled_action", externalID)
}

type Aws_appautoscaling_target struct {

    Aws_appautoscaling_target_id *string `lyra:"ignore"`

    Max_capacity int

    Min_capacity int

    Resource_id string

    Role_arn *string

    Scalable_dimension string

    Service_namespace string

}

// Aws_appautoscaling_targetHandler ...
type Aws_appautoscaling_targetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appautoscaling_targetHandler) Create(desired *Aws_appautoscaling_target) (*Aws_appautoscaling_target, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appautoscaling_target", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appautoscaling_targetHandler) Read(externalID string) (*Aws_appautoscaling_target, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appautoscaling_target", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appautoscaling_target{ Aws_appautoscaling_target_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appautoscaling_targetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appautoscaling_target", externalID)
}

type Aws_appmesh_mesh struct {

    Aws_appmesh_mesh_id *string `lyra:"ignore"`

    Arn *string

    Created_date *string

    Last_updated_date *string

    Name string

}

// Aws_appmesh_meshHandler ...
type Aws_appmesh_meshHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appmesh_meshHandler) Create(desired *Aws_appmesh_mesh) (*Aws_appmesh_mesh, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appmesh_mesh", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appmesh_meshHandler) Read(externalID string) (*Aws_appmesh_mesh, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appmesh_mesh", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appmesh_mesh{ Aws_appmesh_mesh_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appmesh_meshHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appmesh_mesh", externalID)
}

type Aws_appmesh_route_spec_45_http_route_46_action_47_weighted_target_48 struct {

    Virtual_node string

    Weight int

}

type Aws_appmesh_route_spec_45_http_route_46_action_47 struct {

    Weighted_target []Aws_appmesh_route_spec_45_http_route_46_action_47_weighted_target_48

}

type Aws_appmesh_route_spec_45_http_route_46_match_49 struct {

    Prefix string

}

type Aws_appmesh_route_spec_45_http_route_46 struct {

    Action []Aws_appmesh_route_spec_45_http_route_46_action_47

    Match []Aws_appmesh_route_spec_45_http_route_46_match_49

}

type Aws_appmesh_route_spec_45 struct {

    Http_route *[]Aws_appmesh_route_spec_45_http_route_46

}

type Aws_appmesh_route struct {

    Aws_appmesh_route_id *string `lyra:"ignore"`

    Arn *string

    Created_date *string

    Last_updated_date *string

    Mesh_name string

    Name string

    Spec []Aws_appmesh_route_spec_45

    Virtual_router_name string

}

// Aws_appmesh_routeHandler ...
type Aws_appmesh_routeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appmesh_routeHandler) Create(desired *Aws_appmesh_route) (*Aws_appmesh_route, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appmesh_route", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appmesh_routeHandler) Read(externalID string) (*Aws_appmesh_route, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appmesh_route", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appmesh_route{ Aws_appmesh_route_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appmesh_routeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appmesh_route", externalID)
}

type Aws_appmesh_virtual_node_spec_50_listener_51_port_mapping_52 struct {

    Port int

    Protocol string

}

type Aws_appmesh_virtual_node_spec_50_listener_51 struct {

    Port_mapping []Aws_appmesh_virtual_node_spec_50_listener_51_port_mapping_52

}

type Aws_appmesh_virtual_node_spec_50_service_discovery_53_dns_54 struct {

    Service_name string

}

type Aws_appmesh_virtual_node_spec_50_service_discovery_53 struct {

    Dns []Aws_appmesh_virtual_node_spec_50_service_discovery_53_dns_54

}

type Aws_appmesh_virtual_node_spec_50 struct {

    Backends *[]string

    Listener *[]Aws_appmesh_virtual_node_spec_50_listener_51

    Service_discovery *[]Aws_appmesh_virtual_node_spec_50_service_discovery_53

}

type Aws_appmesh_virtual_node struct {

    Aws_appmesh_virtual_node_id *string `lyra:"ignore"`

    Arn *string

    Created_date *string

    Last_updated_date *string

    Mesh_name string

    Name string

    Spec []Aws_appmesh_virtual_node_spec_50

}

// Aws_appmesh_virtual_nodeHandler ...
type Aws_appmesh_virtual_nodeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appmesh_virtual_nodeHandler) Create(desired *Aws_appmesh_virtual_node) (*Aws_appmesh_virtual_node, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appmesh_virtual_node", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appmesh_virtual_nodeHandler) Read(externalID string) (*Aws_appmesh_virtual_node, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appmesh_virtual_node", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appmesh_virtual_node{ Aws_appmesh_virtual_node_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appmesh_virtual_nodeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appmesh_virtual_node", externalID)
}

type Aws_appmesh_virtual_router_spec_55 struct {

    Service_names []string

}

type Aws_appmesh_virtual_router struct {

    Aws_appmesh_virtual_router_id *string `lyra:"ignore"`

    Arn *string

    Created_date *string

    Last_updated_date *string

    Mesh_name string

    Name string

    Spec []Aws_appmesh_virtual_router_spec_55

}

// Aws_appmesh_virtual_routerHandler ...
type Aws_appmesh_virtual_routerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appmesh_virtual_routerHandler) Create(desired *Aws_appmesh_virtual_router) (*Aws_appmesh_virtual_router, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appmesh_virtual_router", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appmesh_virtual_routerHandler) Read(externalID string) (*Aws_appmesh_virtual_router, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appmesh_virtual_router", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appmesh_virtual_router{ Aws_appmesh_virtual_router_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appmesh_virtual_routerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appmesh_virtual_router", externalID)
}

type Aws_appsync_api_key struct {

    Aws_appsync_api_key_id *string `lyra:"ignore"`

    Api_id string

    Description *string

    Expires *string

    Key *string

}

// Aws_appsync_api_keyHandler ...
type Aws_appsync_api_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appsync_api_keyHandler) Create(desired *Aws_appsync_api_key) (*Aws_appsync_api_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appsync_api_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appsync_api_keyHandler) Read(externalID string) (*Aws_appsync_api_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appsync_api_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appsync_api_key{ Aws_appsync_api_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appsync_api_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appsync_api_key", externalID)
}

type Aws_appsync_datasource_dynamodb_config_56 struct {

    Region *string

    Table_name string

    Use_caller_credentials *bool

}

type Aws_appsync_datasource_elasticsearch_config_57 struct {

    Endpoint string

    Region *string

}

type Aws_appsync_datasource_http_config_58 struct {

    Endpoint string

}

type Aws_appsync_datasource_lambda_config_59 struct {

    Function_arn string

}

type Aws_appsync_datasource struct {

    Aws_appsync_datasource_id *string `lyra:"ignore"`

    Api_id string

    Arn *string

    Description *string

    Dynamodb_config *[]Aws_appsync_datasource_dynamodb_config_56

    Elasticsearch_config *[]Aws_appsync_datasource_elasticsearch_config_57

    Http_config *[]Aws_appsync_datasource_http_config_58

    Lambda_config *[]Aws_appsync_datasource_lambda_config_59

    Name string

    Service_role_arn *string

    Type string

}

// Aws_appsync_datasourceHandler ...
type Aws_appsync_datasourceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appsync_datasourceHandler) Create(desired *Aws_appsync_datasource) (*Aws_appsync_datasource, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appsync_datasource", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appsync_datasourceHandler) Read(externalID string) (*Aws_appsync_datasource, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appsync_datasource", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appsync_datasource{ Aws_appsync_datasource_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appsync_datasourceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appsync_datasource", externalID)
}

type Aws_appsync_graphql_api_log_config_60 struct {

    Cloudwatch_logs_role_arn string

    Field_log_level string

}

type Aws_appsync_graphql_api_openid_connect_config_61 struct {

    Auth_ttl *int

    Client_id *string

    Iat_ttl *int

    Issuer string

}

type Aws_appsync_graphql_api_user_pool_config_62 struct {

    App_id_client_regex *string

    Aws_region *string

    Default_action string

    User_pool_id string

}

type Aws_appsync_graphql_api struct {

    Aws_appsync_graphql_api_id *string `lyra:"ignore"`

    Arn *string

    Authentication_type string

    Log_config *[]Aws_appsync_graphql_api_log_config_60

    Name string

    Openid_connect_config *[]Aws_appsync_graphql_api_openid_connect_config_61

    Uris *map[string]string

    User_pool_config *[]Aws_appsync_graphql_api_user_pool_config_62

}

// Aws_appsync_graphql_apiHandler ...
type Aws_appsync_graphql_apiHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_appsync_graphql_apiHandler) Create(desired *Aws_appsync_graphql_api) (*Aws_appsync_graphql_api, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_appsync_graphql_api", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_appsync_graphql_apiHandler) Read(externalID string) (*Aws_appsync_graphql_api, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_appsync_graphql_api", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_appsync_graphql_api{ Aws_appsync_graphql_api_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_appsync_graphql_apiHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_appsync_graphql_api", externalID)
}

type Aws_athena_database_encryption_configuration_63 struct {

    Encryption_option string

    Kms_key *string

}

type Aws_athena_database struct {

    Aws_athena_database_id *string `lyra:"ignore"`

    Bucket string

    Encryption_configuration *[]Aws_athena_database_encryption_configuration_63

    Force_destroy *bool

    Name string

}

// Aws_athena_databaseHandler ...
type Aws_athena_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_athena_databaseHandler) Create(desired *Aws_athena_database) (*Aws_athena_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_athena_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_athena_databaseHandler) Read(externalID string) (*Aws_athena_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_athena_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_athena_database{ Aws_athena_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_athena_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_athena_database", externalID)
}

type Aws_athena_named_query struct {

    Aws_athena_named_query_id *string `lyra:"ignore"`

    Database string

    Description *string

    Name string

    Query string

}

// Aws_athena_named_queryHandler ...
type Aws_athena_named_queryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_athena_named_queryHandler) Create(desired *Aws_athena_named_query) (*Aws_athena_named_query, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_athena_named_query", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_athena_named_queryHandler) Read(externalID string) (*Aws_athena_named_query, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_athena_named_query", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_athena_named_query{ Aws_athena_named_query_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_athena_named_queryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_athena_named_query", externalID)
}

type Aws_autoscaling_attachment struct {

    Aws_autoscaling_attachment_id *string `lyra:"ignore"`

    Alb_target_group_arn *string

    Autoscaling_group_name string

    Elb *string

}

// Aws_autoscaling_attachmentHandler ...
type Aws_autoscaling_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_autoscaling_attachmentHandler) Create(desired *Aws_autoscaling_attachment) (*Aws_autoscaling_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_autoscaling_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_autoscaling_attachmentHandler) Read(externalID string) (*Aws_autoscaling_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_autoscaling_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_autoscaling_attachment{ Aws_autoscaling_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_autoscaling_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_autoscaling_attachment", externalID)
}

type Aws_autoscaling_group_initial_lifecycle_hook_64 struct {

    Default_result *string

    Heartbeat_timeout *int

    Lifecycle_transition string

    Name string

    Notification_metadata *string

    Notification_target_arn *string

    Role_arn *string

}

type Aws_autoscaling_group_launch_template_65 struct {

    Id *string

    Name *string

    Version *string

}

type Aws_autoscaling_group_mixed_instances_policy_66_instances_distribution_67 struct {

    On_demand_allocation_strategy *string

    On_demand_base_capacity *int

    On_demand_percentage_above_base_capacity *int

    Spot_allocation_strategy *string

    Spot_instance_pools *int

    Spot_max_price *string

}

type Aws_autoscaling_group_mixed_instances_policy_66_launch_template_68_launch_template_specification_69 struct {

    Launch_template_id *string

    Launch_template_name *string

    Version *string

}

type Aws_autoscaling_group_mixed_instances_policy_66_launch_template_68_override_70 struct {

    Instance_type *string

}

type Aws_autoscaling_group_mixed_instances_policy_66_launch_template_68 struct {

    Launch_template_specification []Aws_autoscaling_group_mixed_instances_policy_66_launch_template_68_launch_template_specification_69

    Override *[]Aws_autoscaling_group_mixed_instances_policy_66_launch_template_68_override_70

}

type Aws_autoscaling_group_mixed_instances_policy_66 struct {

    Instances_distribution *[]Aws_autoscaling_group_mixed_instances_policy_66_instances_distribution_67

    Launch_template []Aws_autoscaling_group_mixed_instances_policy_66_launch_template_68

}

type Aws_autoscaling_group_tag_71 struct {

    Key string

    Propagate_at_launch bool

    Value string

}

type Aws_autoscaling_group struct {

    Aws_autoscaling_group_id *string `lyra:"ignore"`

    Arn *string

    Availability_zones *[]string

    Default_cooldown *int

    Desired_capacity *int

    Enabled_metrics *[]string

    Force_delete *bool

    Health_check_grace_period *int

    Health_check_type *string

    Initial_lifecycle_hook *[]Aws_autoscaling_group_initial_lifecycle_hook_64

    Launch_configuration *string

    Launch_template *[]Aws_autoscaling_group_launch_template_65

    Load_balancers *[]string

    Max_size int

    Metrics_granularity *string

    Min_elb_capacity *int

    Min_size int

    Mixed_instances_policy *[]Aws_autoscaling_group_mixed_instances_policy_66

    Name *string

    Name_prefix *string

    Placement_group *string

    Protect_from_scale_in *bool

    Service_linked_role_arn *string

    Suspended_processes *[]string

    Tag *[]Aws_autoscaling_group_tag_71

    Tags *[]map[string]string

    Target_group_arns *[]string

    Termination_policies *[]string

    Vpc_zone_identifier *[]string

    Wait_for_capacity_timeout *string

    Wait_for_elb_capacity *int

}

// Aws_autoscaling_groupHandler ...
type Aws_autoscaling_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_autoscaling_groupHandler) Create(desired *Aws_autoscaling_group) (*Aws_autoscaling_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_autoscaling_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_autoscaling_groupHandler) Read(externalID string) (*Aws_autoscaling_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_autoscaling_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_autoscaling_group{ Aws_autoscaling_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_autoscaling_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_autoscaling_group", externalID)
}

type Aws_autoscaling_lifecycle_hook struct {

    Aws_autoscaling_lifecycle_hook_id *string `lyra:"ignore"`

    Autoscaling_group_name string

    Default_result *string

    Heartbeat_timeout *int

    Lifecycle_transition string

    Name string

    Notification_metadata *string

    Notification_target_arn *string

    Role_arn *string

}

// Aws_autoscaling_lifecycle_hookHandler ...
type Aws_autoscaling_lifecycle_hookHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_autoscaling_lifecycle_hookHandler) Create(desired *Aws_autoscaling_lifecycle_hook) (*Aws_autoscaling_lifecycle_hook, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_autoscaling_lifecycle_hook", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_autoscaling_lifecycle_hookHandler) Read(externalID string) (*Aws_autoscaling_lifecycle_hook, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_autoscaling_lifecycle_hook", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_autoscaling_lifecycle_hook{ Aws_autoscaling_lifecycle_hook_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_autoscaling_lifecycle_hookHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_autoscaling_lifecycle_hook", externalID)
}

type Aws_autoscaling_notification struct {

    Aws_autoscaling_notification_id *string `lyra:"ignore"`

    Group_names []string

    Notifications []string

    Topic_arn string

}

// Aws_autoscaling_notificationHandler ...
type Aws_autoscaling_notificationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_autoscaling_notificationHandler) Create(desired *Aws_autoscaling_notification) (*Aws_autoscaling_notification, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_autoscaling_notification", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_autoscaling_notificationHandler) Read(externalID string) (*Aws_autoscaling_notification, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_autoscaling_notification", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_autoscaling_notification{ Aws_autoscaling_notification_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_autoscaling_notificationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_autoscaling_notification", externalID)
}

type Aws_autoscaling_policy_step_adjustment_72 struct {

    Metric_interval_lower_bound *string

    Metric_interval_upper_bound *string

    Scaling_adjustment int

}

type Aws_autoscaling_policy_target_tracking_configuration_73_customized_metric_specification_74_metric_dimension_75 struct {

    Name string

    Value string

}

type Aws_autoscaling_policy_target_tracking_configuration_73_customized_metric_specification_74 struct {

    Metric_dimension *[]Aws_autoscaling_policy_target_tracking_configuration_73_customized_metric_specification_74_metric_dimension_75

    Metric_name string

    Namespace string

    Statistic string

    Unit *string

}

type Aws_autoscaling_policy_target_tracking_configuration_73_predefined_metric_specification_76 struct {

    Predefined_metric_type string

    Resource_label *string

}

type Aws_autoscaling_policy_target_tracking_configuration_73 struct {

    Customized_metric_specification *[]Aws_autoscaling_policy_target_tracking_configuration_73_customized_metric_specification_74

    Disable_scale_in *bool

    Predefined_metric_specification *[]Aws_autoscaling_policy_target_tracking_configuration_73_predefined_metric_specification_76

    Target_value float64

}

type Aws_autoscaling_policy struct {

    Aws_autoscaling_policy_id *string `lyra:"ignore"`

    Adjustment_type *string

    Arn *string

    Autoscaling_group_name string

    Cooldown *int

    Estimated_instance_warmup *int

    Metric_aggregation_type *string

    Min_adjustment_magnitude *int

    Min_adjustment_step *int

    Name string

    Policy_type *string

    Scaling_adjustment *int

    Step_adjustment *[]Aws_autoscaling_policy_step_adjustment_72

    Target_tracking_configuration *[]Aws_autoscaling_policy_target_tracking_configuration_73

}

// Aws_autoscaling_policyHandler ...
type Aws_autoscaling_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_autoscaling_policyHandler) Create(desired *Aws_autoscaling_policy) (*Aws_autoscaling_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_autoscaling_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_autoscaling_policyHandler) Read(externalID string) (*Aws_autoscaling_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_autoscaling_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_autoscaling_policy{ Aws_autoscaling_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_autoscaling_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_autoscaling_policy", externalID)
}

type Aws_autoscaling_schedule struct {

    Aws_autoscaling_schedule_id *string `lyra:"ignore"`

    Arn *string

    Autoscaling_group_name string

    Desired_capacity *int

    End_time *string

    Max_size *int

    Min_size *int

    Recurrence *string

    Scheduled_action_name string

    Start_time *string

}

// Aws_autoscaling_scheduleHandler ...
type Aws_autoscaling_scheduleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_autoscaling_scheduleHandler) Create(desired *Aws_autoscaling_schedule) (*Aws_autoscaling_schedule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_autoscaling_schedule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_autoscaling_scheduleHandler) Read(externalID string) (*Aws_autoscaling_schedule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_autoscaling_schedule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_autoscaling_schedule{ Aws_autoscaling_schedule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_autoscaling_scheduleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_autoscaling_schedule", externalID)
}

type Aws_batch_compute_environment_compute_resources_77 struct {

    Bid_percentage *int

    Desired_vcpus *int

    Ec2_key_pair *string

    Image_id *string

    Instance_role string

    Instance_type []string

    Max_vcpus int

    Min_vcpus int

    Security_group_ids []string

    Spot_iam_fleet_role *string

    Subnets []string

    Tags *map[string]string

    Type string

}

type Aws_batch_compute_environment struct {

    Aws_batch_compute_environment_id *string `lyra:"ignore"`

    Arn *string

    Compute_environment_name string

    Compute_resources *[]Aws_batch_compute_environment_compute_resources_77

    Ecc_cluster_arn *string

    Ecs_cluster_arn *string

    Service_role string

    State *string

    Status *string

    Status_reason *string

    Type string

}

// Aws_batch_compute_environmentHandler ...
type Aws_batch_compute_environmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_batch_compute_environmentHandler) Create(desired *Aws_batch_compute_environment) (*Aws_batch_compute_environment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_batch_compute_environment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_batch_compute_environmentHandler) Read(externalID string) (*Aws_batch_compute_environment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_batch_compute_environment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_batch_compute_environment{ Aws_batch_compute_environment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_batch_compute_environmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_batch_compute_environment", externalID)
}

type Aws_batch_job_definition_retry_strategy_78 struct {

    Attempts *int

}

type Aws_batch_job_definition_timeout_79 struct {

    Attempt_duration_seconds *int

}

type Aws_batch_job_definition struct {

    Aws_batch_job_definition_id *string `lyra:"ignore"`

    Arn *string

    Container_properties *string

    Name string

    Parameters *map[string]string

    Retry_strategy *[]Aws_batch_job_definition_retry_strategy_78

    Revision *int

    Timeout *[]Aws_batch_job_definition_timeout_79

    Type string

}

// Aws_batch_job_definitionHandler ...
type Aws_batch_job_definitionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_batch_job_definitionHandler) Create(desired *Aws_batch_job_definition) (*Aws_batch_job_definition, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_batch_job_definition", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_batch_job_definitionHandler) Read(externalID string) (*Aws_batch_job_definition, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_batch_job_definition", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_batch_job_definition{ Aws_batch_job_definition_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_batch_job_definitionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_batch_job_definition", externalID)
}

type Aws_batch_job_queue struct {

    Aws_batch_job_queue_id *string `lyra:"ignore"`

    Arn *string

    Compute_environments []string

    Name string

    Priority int

    State string

}

// Aws_batch_job_queueHandler ...
type Aws_batch_job_queueHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_batch_job_queueHandler) Create(desired *Aws_batch_job_queue) (*Aws_batch_job_queue, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_batch_job_queue", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_batch_job_queueHandler) Read(externalID string) (*Aws_batch_job_queue, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_batch_job_queue", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_batch_job_queue{ Aws_batch_job_queue_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_batch_job_queueHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_batch_job_queue", externalID)
}

type Aws_budgets_budget_cost_types_80 struct {

    Include_credit *bool

    Include_discount *bool

    Include_other_subscription *bool

    Include_recurring *bool

    Include_refund *bool

    Include_subscription *bool

    Include_support *bool

    Include_tax *bool

    Include_upfront *bool

    Use_amortized *bool

    Use_blended *bool

}

type Aws_budgets_budget struct {

    Aws_budgets_budget_id *string `lyra:"ignore"`

    Account_id *string

    Budget_type string

    Cost_filters *map[string]string

    Cost_types *[]Aws_budgets_budget_cost_types_80

    Limit_amount string

    Limit_unit string

    Name *string

    Name_prefix *string

    Time_period_end *string

    Time_period_start string

    Time_unit string

}

// Aws_budgets_budgetHandler ...
type Aws_budgets_budgetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_budgets_budgetHandler) Create(desired *Aws_budgets_budget) (*Aws_budgets_budget, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_budgets_budget", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_budgets_budgetHandler) Read(externalID string) (*Aws_budgets_budget, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_budgets_budget", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_budgets_budget{ Aws_budgets_budget_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_budgets_budgetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_budgets_budget", externalID)
}

type Aws_cloud9_environment_ec2 struct {

    Aws_cloud9_environment_ec2_id *string `lyra:"ignore"`

    Arn *string

    Automatic_stop_time_minutes *int

    Description *string

    Instance_type string

    Name string

    Owner_arn *string

    Subnet_id *string

    Type *string

}

// Aws_cloud9_environment_ec2Handler ...
type Aws_cloud9_environment_ec2Handler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloud9_environment_ec2Handler) Create(desired *Aws_cloud9_environment_ec2) (*Aws_cloud9_environment_ec2, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloud9_environment_ec2", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloud9_environment_ec2Handler) Read(externalID string) (*Aws_cloud9_environment_ec2, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloud9_environment_ec2", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloud9_environment_ec2{ Aws_cloud9_environment_ec2_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloud9_environment_ec2Handler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloud9_environment_ec2", externalID)
}

type Aws_cloudformation_stack struct {

    Aws_cloudformation_stack_id *string `lyra:"ignore"`

    Capabilities *[]string

    Disable_rollback *bool

    Iam_role_arn *string

    Name string

    Notification_arns *[]string

    On_failure *string

    Outputs *map[string]string

    Parameters *map[string]string

    Policy_body *string

    Policy_url *string

    Tags *map[string]string

    Template_body *string

    Template_url *string

    Timeout_in_minutes *int

}

// Aws_cloudformation_stackHandler ...
type Aws_cloudformation_stackHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudformation_stackHandler) Create(desired *Aws_cloudformation_stack) (*Aws_cloudformation_stack, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudformation_stack", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudformation_stackHandler) Read(externalID string) (*Aws_cloudformation_stack, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudformation_stack", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudformation_stack{ Aws_cloudformation_stack_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudformation_stackHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudformation_stack", externalID)
}

type Aws_cloudfront_distribution_cache_behavior_81_forwarded_values_82_cookies_83 struct {

    Forward string

    Whitelisted_names *[]string

}

type Aws_cloudfront_distribution_cache_behavior_81_forwarded_values_82 struct {

    Cookies []Aws_cloudfront_distribution_cache_behavior_81_forwarded_values_82_cookies_83

    Headers *[]string

    Query_string bool

    Query_string_cache_keys *[]string

}

type Aws_cloudfront_distribution_cache_behavior_81_lambda_function_association_84 struct {

    Event_type string

    Include_body *bool

    Lambda_arn string

}

type Aws_cloudfront_distribution_cache_behavior_81 struct {

    Allowed_methods []string

    Cached_methods []string

    Compress *bool

    Default_ttl *int

    Field_level_encryption_id *string

    Forwarded_values []Aws_cloudfront_distribution_cache_behavior_81_forwarded_values_82

    Lambda_function_association *[]Aws_cloudfront_distribution_cache_behavior_81_lambda_function_association_84

    Max_ttl *int

    Min_ttl *int

    Path_pattern string

    Smooth_streaming *bool

    Target_origin_id string

    Trusted_signers *[]string

    Viewer_protocol_policy string

}

type Aws_cloudfront_distribution_custom_error_response_85 struct {

    Error_caching_min_ttl *int

    Error_code int

    Response_code *int

    Response_page_path *string

}

type Aws_cloudfront_distribution_default_cache_behavior_86_forwarded_values_87_cookies_88 struct {

    Forward string

    Whitelisted_names *[]string

}

type Aws_cloudfront_distribution_default_cache_behavior_86_forwarded_values_87 struct {

    Cookies []Aws_cloudfront_distribution_default_cache_behavior_86_forwarded_values_87_cookies_88

    Headers *[]string

    Query_string bool

    Query_string_cache_keys *[]string

}

type Aws_cloudfront_distribution_default_cache_behavior_86_lambda_function_association_89 struct {

    Event_type string

    Include_body *bool

    Lambda_arn string

}

type Aws_cloudfront_distribution_default_cache_behavior_86 struct {

    Allowed_methods []string

    Cached_methods []string

    Compress *bool

    Default_ttl *int

    Field_level_encryption_id *string

    Forwarded_values []Aws_cloudfront_distribution_default_cache_behavior_86_forwarded_values_87

    Lambda_function_association *[]Aws_cloudfront_distribution_default_cache_behavior_86_lambda_function_association_89

    Max_ttl *int

    Min_ttl *int

    Smooth_streaming *bool

    Target_origin_id string

    Trusted_signers *[]string

    Viewer_protocol_policy string

}

type Aws_cloudfront_distribution_logging_config_90 struct {

    Bucket string

    Include_cookies *bool

    Prefix *string

}

type Aws_cloudfront_distribution_ordered_cache_behavior_91_forwarded_values_92_cookies_93 struct {

    Forward string

    Whitelisted_names *[]string

}

type Aws_cloudfront_distribution_ordered_cache_behavior_91_forwarded_values_92 struct {

    Cookies []Aws_cloudfront_distribution_ordered_cache_behavior_91_forwarded_values_92_cookies_93

    Headers *[]string

    Query_string bool

    Query_string_cache_keys *[]string

}

type Aws_cloudfront_distribution_ordered_cache_behavior_91_lambda_function_association_94 struct {

    Event_type string

    Include_body *bool

    Lambda_arn string

}

type Aws_cloudfront_distribution_ordered_cache_behavior_91 struct {

    Allowed_methods []string

    Cached_methods []string

    Compress *bool

    Default_ttl *int

    Field_level_encryption_id *string

    Forwarded_values []Aws_cloudfront_distribution_ordered_cache_behavior_91_forwarded_values_92

    Lambda_function_association *[]Aws_cloudfront_distribution_ordered_cache_behavior_91_lambda_function_association_94

    Max_ttl *int

    Min_ttl *int

    Path_pattern string

    Smooth_streaming *bool

    Target_origin_id string

    Trusted_signers *[]string

    Viewer_protocol_policy string

}

type Aws_cloudfront_distribution_origin_95_custom_header_96 struct {

    Name string

    Value string

}

type Aws_cloudfront_distribution_origin_95_custom_origin_config_97 struct {

    Http_port int

    Https_port int

    Origin_keepalive_timeout *int

    Origin_protocol_policy string

    Origin_read_timeout *int

    Origin_ssl_protocols []string

}

type Aws_cloudfront_distribution_origin_95_s3_origin_config_98 struct {

    Origin_access_identity string

}

type Aws_cloudfront_distribution_origin_95 struct {

    Custom_header *[]Aws_cloudfront_distribution_origin_95_custom_header_96

    Custom_origin_config *[]Aws_cloudfront_distribution_origin_95_custom_origin_config_97

    Domain_name string

    Origin_id string

    Origin_path *string

    S3_origin_config *[]Aws_cloudfront_distribution_origin_95_s3_origin_config_98

}

type Aws_cloudfront_distribution_restrictions_99_geo_restriction_100 struct {

    Locations *[]string

    Restriction_type string

}

type Aws_cloudfront_distribution_restrictions_99 struct {

    Geo_restriction []Aws_cloudfront_distribution_restrictions_99_geo_restriction_100

}

type Aws_cloudfront_distribution_viewer_certificate_101 struct {

    Acm_certificate_arn *string

    Cloudfront_default_certificate *bool

    Iam_certificate_id *string

    Minimum_protocol_version *string

    Ssl_support_method *string

}

type Aws_cloudfront_distribution struct {

    Aws_cloudfront_distribution_id *string `lyra:"ignore"`

    Active_trusted_signers *map[string]string

    Aliases *[]string

    Arn *string

    Cache_behavior *[]Aws_cloudfront_distribution_cache_behavior_81

    Caller_reference *string

    Comment *string

    Custom_error_response *[]Aws_cloudfront_distribution_custom_error_response_85

    Default_cache_behavior []Aws_cloudfront_distribution_default_cache_behavior_86

    Default_root_object *string

    Domain_name *string

    Enabled bool

    Etag *string

    Hosted_zone_id *string

    Http_version *string

    In_progress_validation_batches *int

    Is_ipv6_enabled *bool

    Last_modified_time *string

    Logging_config *[]Aws_cloudfront_distribution_logging_config_90

    Ordered_cache_behavior *[]Aws_cloudfront_distribution_ordered_cache_behavior_91

    Origin []Aws_cloudfront_distribution_origin_95

    Price_class *string

    Restrictions []Aws_cloudfront_distribution_restrictions_99

    Retain_on_delete *bool

    Status *string

    Tags *map[string]string

    Viewer_certificate []Aws_cloudfront_distribution_viewer_certificate_101

    Web_acl_id *string

}

// Aws_cloudfront_distributionHandler ...
type Aws_cloudfront_distributionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudfront_distributionHandler) Create(desired *Aws_cloudfront_distribution) (*Aws_cloudfront_distribution, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudfront_distribution", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudfront_distributionHandler) Read(externalID string) (*Aws_cloudfront_distribution, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudfront_distribution", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudfront_distribution{ Aws_cloudfront_distribution_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudfront_distributionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudfront_distribution", externalID)
}

type Aws_cloudfront_origin_access_identity struct {

    Aws_cloudfront_origin_access_identity_id *string `lyra:"ignore"`

    Caller_reference *string

    Cloudfront_access_identity_path *string

    Comment *string

    Etag *string

    Iam_arn *string

    S3_canonical_user_id *string

}

// Aws_cloudfront_origin_access_identityHandler ...
type Aws_cloudfront_origin_access_identityHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudfront_origin_access_identityHandler) Create(desired *Aws_cloudfront_origin_access_identity) (*Aws_cloudfront_origin_access_identity, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudfront_origin_access_identity", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudfront_origin_access_identityHandler) Read(externalID string) (*Aws_cloudfront_origin_access_identity, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudfront_origin_access_identity", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudfront_origin_access_identity{ Aws_cloudfront_origin_access_identity_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudfront_origin_access_identityHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudfront_origin_access_identity", externalID)
}

type Aws_cloudfront_public_key struct {

    Aws_cloudfront_public_key_id *string `lyra:"ignore"`

    Caller_reference *string

    Comment *string

    Encoded_key string

    Etag *string

    Name *string

    Name_prefix *string

}

// Aws_cloudfront_public_keyHandler ...
type Aws_cloudfront_public_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudfront_public_keyHandler) Create(desired *Aws_cloudfront_public_key) (*Aws_cloudfront_public_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudfront_public_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudfront_public_keyHandler) Read(externalID string) (*Aws_cloudfront_public_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudfront_public_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudfront_public_key{ Aws_cloudfront_public_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudfront_public_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudfront_public_key", externalID)
}

type Aws_cloudhsm_v2_cluster_cluster_certificates_102 struct {

    Aws_hardware_certificate *string

    Cluster_certificate *string

    Cluster_csr *string

    Hsm_certificate *string

    Manufacturer_hardware_certificate *string

}

type Aws_cloudhsm_v2_cluster struct {

    Aws_cloudhsm_v2_cluster_id *string `lyra:"ignore"`

    Cluster_certificates *[]Aws_cloudhsm_v2_cluster_cluster_certificates_102

    Cluster_id *string

    Cluster_state *string

    Hsm_type string

    Security_group_id *string

    Source_backup_identifier *string

    Subnet_ids []string

    Tags *map[string]string

    Vpc_id *string

}

// Aws_cloudhsm_v2_clusterHandler ...
type Aws_cloudhsm_v2_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudhsm_v2_clusterHandler) Create(desired *Aws_cloudhsm_v2_cluster) (*Aws_cloudhsm_v2_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudhsm_v2_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudhsm_v2_clusterHandler) Read(externalID string) (*Aws_cloudhsm_v2_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudhsm_v2_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudhsm_v2_cluster{ Aws_cloudhsm_v2_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudhsm_v2_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudhsm_v2_cluster", externalID)
}

type Aws_cloudhsm_v2_hsm struct {

    Aws_cloudhsm_v2_hsm_id *string `lyra:"ignore"`

    Availability_zone *string

    Cluster_id string

    Hsm_eni_id *string

    Hsm_id *string

    Hsm_state *string

    Ip_address *string

    Subnet_id *string

}

// Aws_cloudhsm_v2_hsmHandler ...
type Aws_cloudhsm_v2_hsmHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudhsm_v2_hsmHandler) Create(desired *Aws_cloudhsm_v2_hsm) (*Aws_cloudhsm_v2_hsm, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudhsm_v2_hsm", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudhsm_v2_hsmHandler) Read(externalID string) (*Aws_cloudhsm_v2_hsm, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudhsm_v2_hsm", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudhsm_v2_hsm{ Aws_cloudhsm_v2_hsm_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudhsm_v2_hsmHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudhsm_v2_hsm", externalID)
}

type Aws_cloudtrail_event_selector_103_data_resource_104 struct {

    Type string

    Values []string

}

type Aws_cloudtrail_event_selector_103 struct {

    Data_resource *[]Aws_cloudtrail_event_selector_103_data_resource_104

    Include_management_events *bool

    Read_write_type *string

}

type Aws_cloudtrail struct {

    Aws_cloudtrail_id *string `lyra:"ignore"`

    Arn *string

    Cloud_watch_logs_group_arn *string

    Cloud_watch_logs_role_arn *string

    Enable_log_file_validation *bool

    Enable_logging *bool

    Event_selector *[]Aws_cloudtrail_event_selector_103

    Home_region *string

    Include_global_service_events *bool

    Is_multi_region_trail *bool

    Is_organization_trail *bool

    Kms_key_id *string

    Name string

    S3_bucket_name string

    S3_key_prefix *string

    Sns_topic_name *string

    Tags *map[string]string

}

// Aws_cloudtrailHandler ...
type Aws_cloudtrailHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudtrailHandler) Create(desired *Aws_cloudtrail) (*Aws_cloudtrail, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudtrail", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudtrailHandler) Read(externalID string) (*Aws_cloudtrail, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudtrail", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudtrail{ Aws_cloudtrail_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudtrailHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudtrail", externalID)
}

type Aws_cloudwatch_dashboard struct {

    Aws_cloudwatch_dashboard_id *string `lyra:"ignore"`

    Dashboard_arn *string

    Dashboard_body string

    Dashboard_name string

}

// Aws_cloudwatch_dashboardHandler ...
type Aws_cloudwatch_dashboardHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_dashboardHandler) Create(desired *Aws_cloudwatch_dashboard) (*Aws_cloudwatch_dashboard, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_dashboard", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_dashboardHandler) Read(externalID string) (*Aws_cloudwatch_dashboard, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_dashboard", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_dashboard{ Aws_cloudwatch_dashboard_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_dashboardHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_dashboard", externalID)
}

type Aws_cloudwatch_event_permission_condition_105 struct {

    Key string

    Type string

    Value string

}

type Aws_cloudwatch_event_permission struct {

    Aws_cloudwatch_event_permission_id *string `lyra:"ignore"`

    Action *string

    Condition *[]Aws_cloudwatch_event_permission_condition_105

    Principal string

    Statement_id string

}

// Aws_cloudwatch_event_permissionHandler ...
type Aws_cloudwatch_event_permissionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_event_permissionHandler) Create(desired *Aws_cloudwatch_event_permission) (*Aws_cloudwatch_event_permission, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_event_permission", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_event_permissionHandler) Read(externalID string) (*Aws_cloudwatch_event_permission, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_event_permission", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_event_permission{ Aws_cloudwatch_event_permission_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_event_permissionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_event_permission", externalID)
}

type Aws_cloudwatch_event_rule struct {

    Aws_cloudwatch_event_rule_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Event_pattern *string

    Is_enabled *bool

    Name *string

    Name_prefix *string

    Role_arn *string

    Schedule_expression *string

}

// Aws_cloudwatch_event_ruleHandler ...
type Aws_cloudwatch_event_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_event_ruleHandler) Create(desired *Aws_cloudwatch_event_rule) (*Aws_cloudwatch_event_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_event_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_event_ruleHandler) Read(externalID string) (*Aws_cloudwatch_event_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_event_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_event_rule{ Aws_cloudwatch_event_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_event_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_event_rule", externalID)
}

type Aws_cloudwatch_event_target_batch_target_106 struct {

    Array_size *int

    Job_attempts *int

    Job_definition string

    Job_name string

}

type Aws_cloudwatch_event_target_ecs_target_107_network_configuration_108 struct {

    Assign_public_ip *bool

    Security_groups *[]string

    Subnets []string

}

type Aws_cloudwatch_event_target_ecs_target_107 struct {

    Group *string

    Launch_type *string

    Network_configuration *[]Aws_cloudwatch_event_target_ecs_target_107_network_configuration_108

    Platform_version *string

    Task_count *int

    Task_definition_arn string

}

type Aws_cloudwatch_event_target_input_transformer_109 struct {

    Input_paths *map[string]string

    Input_template string

}

type Aws_cloudwatch_event_target_kinesis_target_110 struct {

    Partition_key_path *string

}

type Aws_cloudwatch_event_target_run_command_targets_111 struct {

    Key string

    Values []string

}

type Aws_cloudwatch_event_target_sqs_target_112 struct {

    Message_group_id *string

}

type Aws_cloudwatch_event_target struct {

    Aws_cloudwatch_event_target_id *string `lyra:"ignore"`

    Arn string

    Batch_target *[]Aws_cloudwatch_event_target_batch_target_106

    Ecs_target *[]Aws_cloudwatch_event_target_ecs_target_107

    Input *string

    Input_path *string

    Input_transformer *[]Aws_cloudwatch_event_target_input_transformer_109

    Kinesis_target *[]Aws_cloudwatch_event_target_kinesis_target_110

    Role_arn *string

    Rule string

    Run_command_targets *[]Aws_cloudwatch_event_target_run_command_targets_111

    Sqs_target *[]Aws_cloudwatch_event_target_sqs_target_112

    Target_id *string

}

// Aws_cloudwatch_event_targetHandler ...
type Aws_cloudwatch_event_targetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_event_targetHandler) Create(desired *Aws_cloudwatch_event_target) (*Aws_cloudwatch_event_target, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_event_target", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_event_targetHandler) Read(externalID string) (*Aws_cloudwatch_event_target, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_event_target", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_event_target{ Aws_cloudwatch_event_target_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_event_targetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_event_target", externalID)
}

type Aws_cloudwatch_log_destination struct {

    Aws_cloudwatch_log_destination_id *string `lyra:"ignore"`

    Arn *string

    Name string

    Role_arn string

    Target_arn string

}

// Aws_cloudwatch_log_destinationHandler ...
type Aws_cloudwatch_log_destinationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_log_destinationHandler) Create(desired *Aws_cloudwatch_log_destination) (*Aws_cloudwatch_log_destination, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_log_destination", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_log_destinationHandler) Read(externalID string) (*Aws_cloudwatch_log_destination, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_log_destination", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_log_destination{ Aws_cloudwatch_log_destination_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_log_destinationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_log_destination", externalID)
}

type Aws_cloudwatch_log_destination_policy struct {

    Aws_cloudwatch_log_destination_policy_id *string `lyra:"ignore"`

    Access_policy string

    Destination_name string

}

// Aws_cloudwatch_log_destination_policyHandler ...
type Aws_cloudwatch_log_destination_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_log_destination_policyHandler) Create(desired *Aws_cloudwatch_log_destination_policy) (*Aws_cloudwatch_log_destination_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_log_destination_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_log_destination_policyHandler) Read(externalID string) (*Aws_cloudwatch_log_destination_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_log_destination_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_log_destination_policy{ Aws_cloudwatch_log_destination_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_log_destination_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_log_destination_policy", externalID)
}

type Aws_cloudwatch_log_group struct {

    Aws_cloudwatch_log_group_id *string `lyra:"ignore"`

    Arn *string

    Kms_key_id *string

    Name *string

    Name_prefix *string

    Retention_in_days *int

    Tags *map[string]string

}

// Aws_cloudwatch_log_groupHandler ...
type Aws_cloudwatch_log_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_log_groupHandler) Create(desired *Aws_cloudwatch_log_group) (*Aws_cloudwatch_log_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_log_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_log_groupHandler) Read(externalID string) (*Aws_cloudwatch_log_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_log_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_log_group{ Aws_cloudwatch_log_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_log_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_log_group", externalID)
}

type Aws_cloudwatch_log_metric_filter_metric_transformation_113 struct {

    Default_value *string

    Name string

    Namespace string

    Value string

}

type Aws_cloudwatch_log_metric_filter struct {

    Aws_cloudwatch_log_metric_filter_id *string `lyra:"ignore"`

    Log_group_name string

    Metric_transformation []Aws_cloudwatch_log_metric_filter_metric_transformation_113

    Name string

    Pattern string

}

// Aws_cloudwatch_log_metric_filterHandler ...
type Aws_cloudwatch_log_metric_filterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_log_metric_filterHandler) Create(desired *Aws_cloudwatch_log_metric_filter) (*Aws_cloudwatch_log_metric_filter, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_log_metric_filter", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_log_metric_filterHandler) Read(externalID string) (*Aws_cloudwatch_log_metric_filter, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_log_metric_filter", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_log_metric_filter{ Aws_cloudwatch_log_metric_filter_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_log_metric_filterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_log_metric_filter", externalID)
}

type Aws_cloudwatch_log_resource_policy struct {

    Aws_cloudwatch_log_resource_policy_id *string `lyra:"ignore"`

    Policy_document string

    Policy_name string

}

// Aws_cloudwatch_log_resource_policyHandler ...
type Aws_cloudwatch_log_resource_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_log_resource_policyHandler) Create(desired *Aws_cloudwatch_log_resource_policy) (*Aws_cloudwatch_log_resource_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_log_resource_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_log_resource_policyHandler) Read(externalID string) (*Aws_cloudwatch_log_resource_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_log_resource_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_log_resource_policy{ Aws_cloudwatch_log_resource_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_log_resource_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_log_resource_policy", externalID)
}

type Aws_cloudwatch_log_stream struct {

    Aws_cloudwatch_log_stream_id *string `lyra:"ignore"`

    Arn *string

    Log_group_name string

    Name string

}

// Aws_cloudwatch_log_streamHandler ...
type Aws_cloudwatch_log_streamHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_log_streamHandler) Create(desired *Aws_cloudwatch_log_stream) (*Aws_cloudwatch_log_stream, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_log_stream", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_log_streamHandler) Read(externalID string) (*Aws_cloudwatch_log_stream, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_log_stream", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_log_stream{ Aws_cloudwatch_log_stream_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_log_streamHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_log_stream", externalID)
}

type Aws_cloudwatch_log_subscription_filter struct {

    Aws_cloudwatch_log_subscription_filter_id *string `lyra:"ignore"`

    Destination_arn string

    Distribution *string

    Filter_pattern string

    Log_group_name string

    Name string

    Role_arn *string

}

// Aws_cloudwatch_log_subscription_filterHandler ...
type Aws_cloudwatch_log_subscription_filterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_log_subscription_filterHandler) Create(desired *Aws_cloudwatch_log_subscription_filter) (*Aws_cloudwatch_log_subscription_filter, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_log_subscription_filter", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_log_subscription_filterHandler) Read(externalID string) (*Aws_cloudwatch_log_subscription_filter, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_log_subscription_filter", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_log_subscription_filter{ Aws_cloudwatch_log_subscription_filter_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_log_subscription_filterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_log_subscription_filter", externalID)
}

type Aws_cloudwatch_metric_alarm struct {

    Aws_cloudwatch_metric_alarm_id *string `lyra:"ignore"`

    Actions_enabled *bool

    Alarm_actions *[]string

    Alarm_description *string

    Alarm_name string

    Arn *string

    Comparison_operator string

    Datapoints_to_alarm *int

    Dimensions *map[string]string

    Evaluate_low_sample_count_percentiles *string

    Evaluation_periods int

    Extended_statistic *string

    Insufficient_data_actions *[]string

    Metric_name string

    Namespace string

    Ok_actions *[]string

    Period int

    Statistic *string

    Threshold float64

    Treat_missing_data *string

    Unit *string

}

// Aws_cloudwatch_metric_alarmHandler ...
type Aws_cloudwatch_metric_alarmHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cloudwatch_metric_alarmHandler) Create(desired *Aws_cloudwatch_metric_alarm) (*Aws_cloudwatch_metric_alarm, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cloudwatch_metric_alarm", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cloudwatch_metric_alarmHandler) Read(externalID string) (*Aws_cloudwatch_metric_alarm, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cloudwatch_metric_alarm", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cloudwatch_metric_alarm{ Aws_cloudwatch_metric_alarm_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cloudwatch_metric_alarmHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cloudwatch_metric_alarm", externalID)
}

type Aws_codebuild_project_artifacts_114 struct {

    Encryption_disabled *bool

    Location *string

    Name *string

    Namespace_type *string

    Packaging *string

    Path *string

    Type string

}

type Aws_codebuild_project_cache_115 struct {

    Location *string

    Type *string

}

type Aws_codebuild_project_environment_116_environment_variable_117 struct {

    Name string

    Type *string

    Value string

}

type Aws_codebuild_project_environment_116 struct {

    Certificate *string

    Compute_type string

    Environment_variable *[]Aws_codebuild_project_environment_116_environment_variable_117

    Image string

    Privileged_mode *bool

    Type string

}

type Aws_codebuild_project_secondary_artifacts_118 struct {

    Artifact_identifier string

    Encryption_disabled *bool

    Location *string

    Name *string

    Namespace_type *string

    Packaging *string

    Path *string

    Type string

}

type Aws_codebuild_project_secondary_sources_119_auth_120 struct {

    Resource *string

    Type string

}

type Aws_codebuild_project_secondary_sources_119 struct {

    Auth *[]Aws_codebuild_project_secondary_sources_119_auth_120

    Buildspec *string

    Git_clone_depth *int

    Insecure_ssl *bool

    Location *string

    Report_build_status *bool

    Source_identifier string

    Type string

}

type Aws_codebuild_project_source_121_auth_122 struct {

    Resource *string

    Type string

}

type Aws_codebuild_project_source_121 struct {

    Auth *[]Aws_codebuild_project_source_121_auth_122

    Buildspec *string

    Git_clone_depth *int

    Insecure_ssl *bool

    Location *string

    Report_build_status *bool

    Type string

}

type Aws_codebuild_project_vpc_config_123 struct {

    Security_group_ids []string

    Subnets []string

    Vpc_id string

}

type Aws_codebuild_project struct {

    Aws_codebuild_project_id *string `lyra:"ignore"`

    Arn *string

    Artifacts []Aws_codebuild_project_artifacts_114

    Badge_enabled *bool

    Badge_url *string

    Build_timeout *int

    Cache *[]Aws_codebuild_project_cache_115

    Description *string

    Encryption_key *string

    Environment []Aws_codebuild_project_environment_116

    Name string

    Secondary_artifacts *[]Aws_codebuild_project_secondary_artifacts_118

    Secondary_sources *[]Aws_codebuild_project_secondary_sources_119

    Service_role string

    Source []Aws_codebuild_project_source_121

    Tags *map[string]string

    Timeout *int

    Vpc_config *[]Aws_codebuild_project_vpc_config_123

}

// Aws_codebuild_projectHandler ...
type Aws_codebuild_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codebuild_projectHandler) Create(desired *Aws_codebuild_project) (*Aws_codebuild_project, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codebuild_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codebuild_projectHandler) Read(externalID string) (*Aws_codebuild_project, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codebuild_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codebuild_project{ Aws_codebuild_project_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codebuild_projectHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codebuild_project", externalID)
}

type Aws_codebuild_webhook struct {

    Aws_codebuild_webhook_id *string `lyra:"ignore"`

    Branch_filter *string

    Payload_url *string

    Project_name string

    Secret *string

    Url *string

}

// Aws_codebuild_webhookHandler ...
type Aws_codebuild_webhookHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codebuild_webhookHandler) Create(desired *Aws_codebuild_webhook) (*Aws_codebuild_webhook, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codebuild_webhook", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codebuild_webhookHandler) Read(externalID string) (*Aws_codebuild_webhook, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codebuild_webhook", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codebuild_webhook{ Aws_codebuild_webhook_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codebuild_webhookHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codebuild_webhook", externalID)
}

type Aws_codecommit_repository struct {

    Aws_codecommit_repository_id *string `lyra:"ignore"`

    Arn *string

    Clone_url_http *string

    Clone_url_ssh *string

    Default_branch *string

    Description *string

    Repository_id *string

    Repository_name string

}

// Aws_codecommit_repositoryHandler ...
type Aws_codecommit_repositoryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codecommit_repositoryHandler) Create(desired *Aws_codecommit_repository) (*Aws_codecommit_repository, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codecommit_repository", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codecommit_repositoryHandler) Read(externalID string) (*Aws_codecommit_repository, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codecommit_repository", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codecommit_repository{ Aws_codecommit_repository_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codecommit_repositoryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codecommit_repository", externalID)
}

type Aws_codecommit_trigger_trigger_124 struct {

    Branches *[]string

    Custom_data *string

    Destination_arn string

    Events []string

    Name string

}

type Aws_codecommit_trigger struct {

    Aws_codecommit_trigger_id *string `lyra:"ignore"`

    Configuration_id *string

    Repository_name string

    Trigger []Aws_codecommit_trigger_trigger_124

}

// Aws_codecommit_triggerHandler ...
type Aws_codecommit_triggerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codecommit_triggerHandler) Create(desired *Aws_codecommit_trigger) (*Aws_codecommit_trigger, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codecommit_trigger", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codecommit_triggerHandler) Read(externalID string) (*Aws_codecommit_trigger, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codecommit_trigger", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codecommit_trigger{ Aws_codecommit_trigger_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codecommit_triggerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codecommit_trigger", externalID)
}

type Aws_codedeploy_app struct {

    Aws_codedeploy_app_id *string `lyra:"ignore"`

    Compute_platform *string

    Name string

    Unique_id *string

}

// Aws_codedeploy_appHandler ...
type Aws_codedeploy_appHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codedeploy_appHandler) Create(desired *Aws_codedeploy_app) (*Aws_codedeploy_app, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codedeploy_app", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codedeploy_appHandler) Read(externalID string) (*Aws_codedeploy_app, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codedeploy_app", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codedeploy_app{ Aws_codedeploy_app_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codedeploy_appHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codedeploy_app", externalID)
}

type Aws_codedeploy_deployment_config_minimum_healthy_hosts_125 struct {

    Type *string

    Value *int

}

type Aws_codedeploy_deployment_config_traffic_routing_config_126_time_based_canary_127 struct {

    Interval *int

    Percentage *int

}

type Aws_codedeploy_deployment_config_traffic_routing_config_126_time_based_linear_128 struct {

    Interval *int

    Percentage *int

}

type Aws_codedeploy_deployment_config_traffic_routing_config_126 struct {

    Time_based_canary *[]Aws_codedeploy_deployment_config_traffic_routing_config_126_time_based_canary_127

    Time_based_linear *[]Aws_codedeploy_deployment_config_traffic_routing_config_126_time_based_linear_128

    Type *string

}

type Aws_codedeploy_deployment_config struct {

    Aws_codedeploy_deployment_config_id *string `lyra:"ignore"`

    Compute_platform *string

    Deployment_config_id *string

    Deployment_config_name string

    Minimum_healthy_hosts *[]Aws_codedeploy_deployment_config_minimum_healthy_hosts_125

    Traffic_routing_config *[]Aws_codedeploy_deployment_config_traffic_routing_config_126

}

// Aws_codedeploy_deployment_configHandler ...
type Aws_codedeploy_deployment_configHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codedeploy_deployment_configHandler) Create(desired *Aws_codedeploy_deployment_config) (*Aws_codedeploy_deployment_config, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codedeploy_deployment_config", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codedeploy_deployment_configHandler) Read(externalID string) (*Aws_codedeploy_deployment_config, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codedeploy_deployment_config", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codedeploy_deployment_config{ Aws_codedeploy_deployment_config_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codedeploy_deployment_configHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codedeploy_deployment_config", externalID)
}

type Aws_codedeploy_deployment_group_alarm_configuration_129 struct {

    Alarms *[]string

    Enabled *bool

    Ignore_poll_alarm_failure *bool

}

type Aws_codedeploy_deployment_group_auto_rollback_configuration_130 struct {

    Enabled *bool

    Events *[]string

}

type Aws_codedeploy_deployment_group_blue_green_deployment_config_131_deployment_ready_option_132 struct {

    Action_on_timeout *string

    Wait_time_in_minutes *int

}

type Aws_codedeploy_deployment_group_blue_green_deployment_config_131_green_fleet_provisioning_option_133 struct {

    Action *string

}

type Aws_codedeploy_deployment_group_blue_green_deployment_config_131_terminate_blue_instances_on_deployment_success_134 struct {

    Action *string

    Termination_wait_time_in_minutes *int

}

type Aws_codedeploy_deployment_group_blue_green_deployment_config_131 struct {

    Deployment_ready_option *[]Aws_codedeploy_deployment_group_blue_green_deployment_config_131_deployment_ready_option_132

    Green_fleet_provisioning_option *[]Aws_codedeploy_deployment_group_blue_green_deployment_config_131_green_fleet_provisioning_option_133

    Terminate_blue_instances_on_deployment_success *[]Aws_codedeploy_deployment_group_blue_green_deployment_config_131_terminate_blue_instances_on_deployment_success_134

}

type Aws_codedeploy_deployment_group_deployment_style_135 struct {

    Deployment_option *string

    Deployment_type *string

}

type Aws_codedeploy_deployment_group_ec2_tag_filter_136 struct {

    Key *string

    Type *string

    Value *string

}

type Aws_codedeploy_deployment_group_ec2_tag_set_137_ec2_tag_filter_138 struct {

    Key *string

    Type *string

    Value *string

}

type Aws_codedeploy_deployment_group_ec2_tag_set_137 struct {

    Ec2_tag_filter *[]Aws_codedeploy_deployment_group_ec2_tag_set_137_ec2_tag_filter_138

}

type Aws_codedeploy_deployment_group_ecs_service_139 struct {

    Cluster_name string

    Service_name string

}

type Aws_codedeploy_deployment_group_load_balancer_info_140_elb_info_141 struct {

    Name *string

}

type Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_info_142 struct {

    Name *string

}

type Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143_prod_traffic_route_144 struct {

    Listener_arns []string

}

type Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143_target_group_145 struct {

    Name string

}

type Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143_test_traffic_route_146 struct {

    Listener_arns []string

}

type Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143 struct {

    Prod_traffic_route []Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143_prod_traffic_route_144

    Target_group []Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143_target_group_145

    Test_traffic_route *[]Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143_test_traffic_route_146

}

type Aws_codedeploy_deployment_group_load_balancer_info_140 struct {

    Elb_info *[]Aws_codedeploy_deployment_group_load_balancer_info_140_elb_info_141

    Target_group_info *[]Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_info_142

    Target_group_pair_info *[]Aws_codedeploy_deployment_group_load_balancer_info_140_target_group_pair_info_143

}

type Aws_codedeploy_deployment_group_on_premises_instance_tag_filter_147 struct {

    Key *string

    Type *string

    Value *string

}

type Aws_codedeploy_deployment_group_trigger_configuration_148 struct {

    Trigger_events []string

    Trigger_name string

    Trigger_target_arn string

}

type Aws_codedeploy_deployment_group struct {

    Aws_codedeploy_deployment_group_id *string `lyra:"ignore"`

    Alarm_configuration *[]Aws_codedeploy_deployment_group_alarm_configuration_129

    App_name string

    Auto_rollback_configuration *[]Aws_codedeploy_deployment_group_auto_rollback_configuration_130

    Autoscaling_groups *[]string

    Blue_green_deployment_config *[]Aws_codedeploy_deployment_group_blue_green_deployment_config_131

    Deployment_config_name *string

    Deployment_group_name string

    Deployment_style *[]Aws_codedeploy_deployment_group_deployment_style_135

    Ec2_tag_filter *[]Aws_codedeploy_deployment_group_ec2_tag_filter_136

    Ec2_tag_set *[]Aws_codedeploy_deployment_group_ec2_tag_set_137

    Ecs_service *[]Aws_codedeploy_deployment_group_ecs_service_139

    Load_balancer_info *[]Aws_codedeploy_deployment_group_load_balancer_info_140

    On_premises_instance_tag_filter *[]Aws_codedeploy_deployment_group_on_premises_instance_tag_filter_147

    Service_role_arn string

    Trigger_configuration *[]Aws_codedeploy_deployment_group_trigger_configuration_148

}

// Aws_codedeploy_deployment_groupHandler ...
type Aws_codedeploy_deployment_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codedeploy_deployment_groupHandler) Create(desired *Aws_codedeploy_deployment_group) (*Aws_codedeploy_deployment_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codedeploy_deployment_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codedeploy_deployment_groupHandler) Read(externalID string) (*Aws_codedeploy_deployment_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codedeploy_deployment_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codedeploy_deployment_group{ Aws_codedeploy_deployment_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codedeploy_deployment_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codedeploy_deployment_group", externalID)
}

type Aws_codepipeline_artifact_store_149_encryption_key_150 struct {

    Id string

    Type string

}

type Aws_codepipeline_artifact_store_149 struct {

    Encryption_key *[]Aws_codepipeline_artifact_store_149_encryption_key_150

    Location string

    Type string

}

type Aws_codepipeline_stage_151_action_152 struct {

    Category string

    Configuration *map[string]string

    Input_artifacts *[]string

    Name string

    Output_artifacts *[]string

    Owner string

    Provider string

    Role_arn *string

    Run_order *int

    Version string

}

type Aws_codepipeline_stage_151 struct {

    Action []Aws_codepipeline_stage_151_action_152

    Name string

}

type Aws_codepipeline struct {

    Aws_codepipeline_id *string `lyra:"ignore"`

    Arn *string

    Artifact_store []Aws_codepipeline_artifact_store_149

    Name string

    Role_arn string

    Stage []Aws_codepipeline_stage_151

}

// Aws_codepipelineHandler ...
type Aws_codepipelineHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codepipelineHandler) Create(desired *Aws_codepipeline) (*Aws_codepipeline, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codepipeline", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codepipelineHandler) Read(externalID string) (*Aws_codepipeline, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codepipeline", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codepipeline{ Aws_codepipeline_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codepipelineHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codepipeline", externalID)
}

type Aws_codepipeline_webhook_authentication_configuration_153 struct {

    Allowed_ip_range *string

    Secret_token *string

}

type Aws_codepipeline_webhook_filter_154 struct {

    Json_path string

    Match_equals string

}

type Aws_codepipeline_webhook struct {

    Aws_codepipeline_webhook_id *string `lyra:"ignore"`

    Authentication string

    Authentication_configuration *[]Aws_codepipeline_webhook_authentication_configuration_153

    Filter []Aws_codepipeline_webhook_filter_154

    Name string

    Target_action string

    Target_pipeline string

    Url *string

}

// Aws_codepipeline_webhookHandler ...
type Aws_codepipeline_webhookHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_codepipeline_webhookHandler) Create(desired *Aws_codepipeline_webhook) (*Aws_codepipeline_webhook, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_codepipeline_webhook", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_codepipeline_webhookHandler) Read(externalID string) (*Aws_codepipeline_webhook, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_codepipeline_webhook", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_codepipeline_webhook{ Aws_codepipeline_webhook_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_codepipeline_webhookHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_codepipeline_webhook", externalID)
}

type Aws_cognito_identity_pool_cognito_identity_providers_155 struct {

    Client_id *string

    Provider_name *string

    Server_side_token_check *bool

}

type Aws_cognito_identity_pool struct {

    Aws_cognito_identity_pool_id *string `lyra:"ignore"`

    Allow_unauthenticated_identities *bool

    Arn *string

    Cognito_identity_providers *[]Aws_cognito_identity_pool_cognito_identity_providers_155

    Developer_provider_name *string

    Identity_pool_name string

    Openid_connect_provider_arns *[]string

    Saml_provider_arns *[]string

    Supported_login_providers *map[string]string

}

// Aws_cognito_identity_poolHandler ...
type Aws_cognito_identity_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_identity_poolHandler) Create(desired *Aws_cognito_identity_pool) (*Aws_cognito_identity_pool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_identity_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_identity_poolHandler) Read(externalID string) (*Aws_cognito_identity_pool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_identity_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_identity_pool{ Aws_cognito_identity_pool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_identity_poolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_identity_pool", externalID)
}

type Aws_cognito_identity_pool_roles_attachment_role_mapping_156_mapping_rule_157 struct {

    Claim string

    Match_type string

    Role_arn string

    Value string

}

type Aws_cognito_identity_pool_roles_attachment_role_mapping_156 struct {

    Ambiguous_role_resolution *string

    Identity_provider string

    Mapping_rule *[]Aws_cognito_identity_pool_roles_attachment_role_mapping_156_mapping_rule_157

    Type string

}

type Aws_cognito_identity_pool_roles_attachment struct {

    Aws_cognito_identity_pool_roles_attachment_id *string `lyra:"ignore"`

    Identity_pool_id string

    Role_mapping *[]Aws_cognito_identity_pool_roles_attachment_role_mapping_156

    Roles map[string]string

}

// Aws_cognito_identity_pool_roles_attachmentHandler ...
type Aws_cognito_identity_pool_roles_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_identity_pool_roles_attachmentHandler) Create(desired *Aws_cognito_identity_pool_roles_attachment) (*Aws_cognito_identity_pool_roles_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_identity_pool_roles_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_identity_pool_roles_attachmentHandler) Read(externalID string) (*Aws_cognito_identity_pool_roles_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_identity_pool_roles_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_identity_pool_roles_attachment{ Aws_cognito_identity_pool_roles_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_identity_pool_roles_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_identity_pool_roles_attachment", externalID)
}

type Aws_cognito_identity_provider struct {

    Aws_cognito_identity_provider_id *string `lyra:"ignore"`

    Attribute_mapping *map[string]string

    Idp_identifiers *[]string

    Provider_details map[string]string

    Provider_name string

    Provider_type string

    User_pool_id string

}

// Aws_cognito_identity_providerHandler ...
type Aws_cognito_identity_providerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_identity_providerHandler) Create(desired *Aws_cognito_identity_provider) (*Aws_cognito_identity_provider, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_identity_provider", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_identity_providerHandler) Read(externalID string) (*Aws_cognito_identity_provider, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_identity_provider", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_identity_provider{ Aws_cognito_identity_provider_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_identity_providerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_identity_provider", externalID)
}

type Aws_cognito_resource_server_scope_158 struct {

    Scope_description string

    Scope_name string

}

type Aws_cognito_resource_server struct {

    Aws_cognito_resource_server_id *string `lyra:"ignore"`

    Identifier string

    Name string

    Scope *[]Aws_cognito_resource_server_scope_158

    Scope_identifiers *[]string

    User_pool_id string

}

// Aws_cognito_resource_serverHandler ...
type Aws_cognito_resource_serverHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_resource_serverHandler) Create(desired *Aws_cognito_resource_server) (*Aws_cognito_resource_server, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_resource_server", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_resource_serverHandler) Read(externalID string) (*Aws_cognito_resource_server, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_resource_server", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_resource_server{ Aws_cognito_resource_server_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_resource_serverHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_resource_server", externalID)
}

type Aws_cognito_user_group struct {

    Aws_cognito_user_group_id *string `lyra:"ignore"`

    Description *string

    Name string

    Precedence *int

    Role_arn *string

    User_pool_id string

}

// Aws_cognito_user_groupHandler ...
type Aws_cognito_user_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_user_groupHandler) Create(desired *Aws_cognito_user_group) (*Aws_cognito_user_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_user_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_user_groupHandler) Read(externalID string) (*Aws_cognito_user_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_user_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_user_group{ Aws_cognito_user_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_user_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_user_group", externalID)
}

type Aws_cognito_user_pool_admin_create_user_config_159_invite_message_template_160 struct {

    Email_message *string

    Email_subject *string

    Sms_message *string

}

type Aws_cognito_user_pool_admin_create_user_config_159 struct {

    Allow_admin_create_user_only *bool

    Invite_message_template *[]Aws_cognito_user_pool_admin_create_user_config_159_invite_message_template_160

    Unused_account_validity_days *int

}

type Aws_cognito_user_pool_device_configuration_161 struct {

    Challenge_required_on_new_device *bool

    Device_only_remembered_on_user_prompt *bool

}

type Aws_cognito_user_pool_email_configuration_162 struct {

    Reply_to_email_address *string

    Source_arn *string

}

type Aws_cognito_user_pool_lambda_config_163 struct {

    Create_auth_challenge *string

    Custom_message *string

    Define_auth_challenge *string

    Post_authentication *string

    Post_confirmation *string

    Pre_authentication *string

    Pre_sign_up *string

    Pre_token_generation *string

    User_migration *string

    Verify_auth_challenge_response *string

}

type Aws_cognito_user_pool_password_policy_164 struct {

    Minimum_length *int

    Require_lowercase *bool

    Require_numbers *bool

    Require_symbols *bool

    Require_uppercase *bool

}

type Aws_cognito_user_pool_schema_165_number_attribute_constraints_166 struct {

    Max_value *string

    Min_value *string

}

type Aws_cognito_user_pool_schema_165_string_attribute_constraints_167 struct {

    Max_length *string

    Min_length *string

}

type Aws_cognito_user_pool_schema_165 struct {

    Attribute_data_type string

    Developer_only_attribute *bool

    Mutable *bool

    Name string

    Number_attribute_constraints *[]Aws_cognito_user_pool_schema_165_number_attribute_constraints_166

    Required *bool

    String_attribute_constraints *[]Aws_cognito_user_pool_schema_165_string_attribute_constraints_167

}

type Aws_cognito_user_pool_sms_configuration_168 struct {

    External_id string

    Sns_caller_arn string

}

type Aws_cognito_user_pool_verification_message_template_169 struct {

    Default_email_option *string

    Email_message *string

    Email_message_by_link *string

    Email_subject *string

    Email_subject_by_link *string

    Sms_message *string

}

type Aws_cognito_user_pool struct {

    Aws_cognito_user_pool_id *string `lyra:"ignore"`

    Admin_create_user_config *[]Aws_cognito_user_pool_admin_create_user_config_159

    Alias_attributes *[]string

    Arn *string

    Auto_verified_attributes *[]string

    Creation_date *string

    Device_configuration *[]Aws_cognito_user_pool_device_configuration_161

    Email_configuration *[]Aws_cognito_user_pool_email_configuration_162

    Email_verification_message *string

    Email_verification_subject *string

    Endpoint *string

    Lambda_config *[]Aws_cognito_user_pool_lambda_config_163

    Last_modified_date *string

    Mfa_configuration *string

    Name string

    Password_policy *[]Aws_cognito_user_pool_password_policy_164

    Schema *[]Aws_cognito_user_pool_schema_165

    Sms_authentication_message *string

    Sms_configuration *[]Aws_cognito_user_pool_sms_configuration_168

    Sms_verification_message *string

    Tags *map[string]string

    Username_attributes *[]string

    Verification_message_template *[]Aws_cognito_user_pool_verification_message_template_169

}

// Aws_cognito_user_poolHandler ...
type Aws_cognito_user_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_user_poolHandler) Create(desired *Aws_cognito_user_pool) (*Aws_cognito_user_pool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_user_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_user_poolHandler) Read(externalID string) (*Aws_cognito_user_pool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_user_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_user_pool{ Aws_cognito_user_pool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_user_poolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_user_pool", externalID)
}

type Aws_cognito_user_pool_client struct {

    Aws_cognito_user_pool_client_id *string `lyra:"ignore"`

    Allowed_oauth_flows *[]string

    Allowed_oauth_flows_user_pool_client *bool

    Allowed_oauth_scopes *[]string

    Callback_urls *[]string

    Client_secret *string

    Default_redirect_uri *string

    Explicit_auth_flows *[]string

    Generate_secret *bool

    Logout_urls *[]string

    Name string

    Read_attributes *[]string

    Refresh_token_validity *int

    Supported_identity_providers *[]string

    User_pool_id string

    Write_attributes *[]string

}

// Aws_cognito_user_pool_clientHandler ...
type Aws_cognito_user_pool_clientHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_user_pool_clientHandler) Create(desired *Aws_cognito_user_pool_client) (*Aws_cognito_user_pool_client, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_user_pool_client", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_user_pool_clientHandler) Read(externalID string) (*Aws_cognito_user_pool_client, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_user_pool_client", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_user_pool_client{ Aws_cognito_user_pool_client_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_user_pool_clientHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_user_pool_client", externalID)
}

type Aws_cognito_user_pool_domain struct {

    Aws_cognito_user_pool_domain_id *string `lyra:"ignore"`

    Aws_account_id *string

    Certificate_arn *string

    Cloudfront_distribution_arn *string

    Domain string

    S3_bucket *string

    User_pool_id string

    Version *string

}

// Aws_cognito_user_pool_domainHandler ...
type Aws_cognito_user_pool_domainHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_cognito_user_pool_domainHandler) Create(desired *Aws_cognito_user_pool_domain) (*Aws_cognito_user_pool_domain, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_cognito_user_pool_domain", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_cognito_user_pool_domainHandler) Read(externalID string) (*Aws_cognito_user_pool_domain, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_cognito_user_pool_domain", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_cognito_user_pool_domain{ Aws_cognito_user_pool_domain_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_cognito_user_pool_domainHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_cognito_user_pool_domain", externalID)
}

type Aws_config_aggregate_authorization struct {

    Aws_config_aggregate_authorization_id *string `lyra:"ignore"`

    Account_id string

    Arn *string

    Region string

}

// Aws_config_aggregate_authorizationHandler ...
type Aws_config_aggregate_authorizationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_config_aggregate_authorizationHandler) Create(desired *Aws_config_aggregate_authorization) (*Aws_config_aggregate_authorization, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_config_aggregate_authorization", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_config_aggregate_authorizationHandler) Read(externalID string) (*Aws_config_aggregate_authorization, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_config_aggregate_authorization", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_config_aggregate_authorization{ Aws_config_aggregate_authorization_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_config_aggregate_authorizationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_config_aggregate_authorization", externalID)
}

type Aws_config_config_rule_scope_170 struct {

    Compliance_resource_id *string

    Compliance_resource_types *[]string

    Tag_key *string

    Tag_value *string

}

type Aws_config_config_rule_source_171_source_detail_172 struct {

    Event_source *string

    Maximum_execution_frequency *string

    Message_type *string

}

type Aws_config_config_rule_source_171 struct {

    Owner string

    Source_detail *[]Aws_config_config_rule_source_171_source_detail_172

    Source_identifier string

}

type Aws_config_config_rule struct {

    Aws_config_config_rule_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Input_parameters *string

    Maximum_execution_frequency *string

    Name string

    Rule_id *string

    Scope *[]Aws_config_config_rule_scope_170

    Source []Aws_config_config_rule_source_171

}

// Aws_config_config_ruleHandler ...
type Aws_config_config_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_config_config_ruleHandler) Create(desired *Aws_config_config_rule) (*Aws_config_config_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_config_config_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_config_config_ruleHandler) Read(externalID string) (*Aws_config_config_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_config_config_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_config_config_rule{ Aws_config_config_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_config_config_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_config_config_rule", externalID)
}

type Aws_config_configuration_aggregator_account_aggregation_source_173 struct {

    Account_ids []string

    All_regions *bool

    Regions *[]string

}

type Aws_config_configuration_aggregator_organization_aggregation_source_174 struct {

    All_regions *bool

    Regions *[]string

    Role_arn string

}

type Aws_config_configuration_aggregator struct {

    Aws_config_configuration_aggregator_id *string `lyra:"ignore"`

    Account_aggregation_source *[]Aws_config_configuration_aggregator_account_aggregation_source_173

    Arn *string

    Name string

    Organization_aggregation_source *[]Aws_config_configuration_aggregator_organization_aggregation_source_174

}

// Aws_config_configuration_aggregatorHandler ...
type Aws_config_configuration_aggregatorHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_config_configuration_aggregatorHandler) Create(desired *Aws_config_configuration_aggregator) (*Aws_config_configuration_aggregator, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_config_configuration_aggregator", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_config_configuration_aggregatorHandler) Read(externalID string) (*Aws_config_configuration_aggregator, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_config_configuration_aggregator", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_config_configuration_aggregator{ Aws_config_configuration_aggregator_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_config_configuration_aggregatorHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_config_configuration_aggregator", externalID)
}

type Aws_config_configuration_recorder_recording_group_175 struct {

    All_supported *bool

    Include_global_resource_types *bool

    Resource_types *[]string

}

type Aws_config_configuration_recorder struct {

    Aws_config_configuration_recorder_id *string `lyra:"ignore"`

    Name *string

    Recording_group *[]Aws_config_configuration_recorder_recording_group_175

    Role_arn string

}

// Aws_config_configuration_recorderHandler ...
type Aws_config_configuration_recorderHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_config_configuration_recorderHandler) Create(desired *Aws_config_configuration_recorder) (*Aws_config_configuration_recorder, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_config_configuration_recorder", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_config_configuration_recorderHandler) Read(externalID string) (*Aws_config_configuration_recorder, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_config_configuration_recorder", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_config_configuration_recorder{ Aws_config_configuration_recorder_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_config_configuration_recorderHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_config_configuration_recorder", externalID)
}

type Aws_config_configuration_recorder_status struct {

    Aws_config_configuration_recorder_status_id *string `lyra:"ignore"`

    Is_enabled bool

    Name string

}

// Aws_config_configuration_recorder_statusHandler ...
type Aws_config_configuration_recorder_statusHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_config_configuration_recorder_statusHandler) Create(desired *Aws_config_configuration_recorder_status) (*Aws_config_configuration_recorder_status, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_config_configuration_recorder_status", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_config_configuration_recorder_statusHandler) Read(externalID string) (*Aws_config_configuration_recorder_status, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_config_configuration_recorder_status", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_config_configuration_recorder_status{ Aws_config_configuration_recorder_status_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_config_configuration_recorder_statusHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_config_configuration_recorder_status", externalID)
}

type Aws_config_delivery_channel_snapshot_delivery_properties_176 struct {

    Delivery_frequency *string

}

type Aws_config_delivery_channel struct {

    Aws_config_delivery_channel_id *string `lyra:"ignore"`

    Name *string

    S3_bucket_name string

    S3_key_prefix *string

    Snapshot_delivery_properties *[]Aws_config_delivery_channel_snapshot_delivery_properties_176

    Sns_topic_arn *string

}

// Aws_config_delivery_channelHandler ...
type Aws_config_delivery_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_config_delivery_channelHandler) Create(desired *Aws_config_delivery_channel) (*Aws_config_delivery_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_config_delivery_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_config_delivery_channelHandler) Read(externalID string) (*Aws_config_delivery_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_config_delivery_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_config_delivery_channel{ Aws_config_delivery_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_config_delivery_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_config_delivery_channel", externalID)
}

type Aws_customer_gateway struct {

    Aws_customer_gateway_id *string `lyra:"ignore"`

    Bgp_asn int

    Ip_address string

    Tags *map[string]string

    Type string

}

// Aws_customer_gatewayHandler ...
type Aws_customer_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_customer_gatewayHandler) Create(desired *Aws_customer_gateway) (*Aws_customer_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_customer_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_customer_gatewayHandler) Read(externalID string) (*Aws_customer_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_customer_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_customer_gateway{ Aws_customer_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_customer_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_customer_gateway", externalID)
}

type Aws_datasync_agent struct {

    Aws_datasync_agent_id *string `lyra:"ignore"`

    Activation_key *string

    Arn *string

    Ip_address *string

    Name *string

    Tags *map[string]string

}

// Aws_datasync_agentHandler ...
type Aws_datasync_agentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_datasync_agentHandler) Create(desired *Aws_datasync_agent) (*Aws_datasync_agent, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_datasync_agent", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_datasync_agentHandler) Read(externalID string) (*Aws_datasync_agent, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_datasync_agent", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_datasync_agent{ Aws_datasync_agent_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_datasync_agentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_datasync_agent", externalID)
}

type Aws_datasync_location_efs_ec2_config_177 struct {

    Security_group_arns []string

    Subnet_arn string

}

type Aws_datasync_location_efs struct {

    Aws_datasync_location_efs_id *string `lyra:"ignore"`

    Arn *string

    Ec2_config []Aws_datasync_location_efs_ec2_config_177

    Efs_file_system_arn string

    Subdirectory *string

    Tags *map[string]string

    Uri *string

}

// Aws_datasync_location_efsHandler ...
type Aws_datasync_location_efsHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_datasync_location_efsHandler) Create(desired *Aws_datasync_location_efs) (*Aws_datasync_location_efs, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_datasync_location_efs", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_datasync_location_efsHandler) Read(externalID string) (*Aws_datasync_location_efs, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_datasync_location_efs", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_datasync_location_efs{ Aws_datasync_location_efs_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_datasync_location_efsHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_datasync_location_efs", externalID)
}

type Aws_datasync_location_nfs_on_prem_config_178 struct {

    Agent_arns []string

}

type Aws_datasync_location_nfs struct {

    Aws_datasync_location_nfs_id *string `lyra:"ignore"`

    Arn *string

    On_prem_config []Aws_datasync_location_nfs_on_prem_config_178

    Server_hostname string

    Subdirectory string

    Tags *map[string]string

    Uri *string

}

// Aws_datasync_location_nfsHandler ...
type Aws_datasync_location_nfsHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_datasync_location_nfsHandler) Create(desired *Aws_datasync_location_nfs) (*Aws_datasync_location_nfs, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_datasync_location_nfs", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_datasync_location_nfsHandler) Read(externalID string) (*Aws_datasync_location_nfs, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_datasync_location_nfs", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_datasync_location_nfs{ Aws_datasync_location_nfs_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_datasync_location_nfsHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_datasync_location_nfs", externalID)
}

type Aws_datasync_location_s3_s3_config_179 struct {

    Bucket_access_role_arn string

}

type Aws_datasync_location_s3 struct {

    Aws_datasync_location_s3_id *string `lyra:"ignore"`

    Arn *string

    S3_bucket_arn string

    S3_config []Aws_datasync_location_s3_s3_config_179

    Subdirectory string

    Tags *map[string]string

    Uri *string

}

// Aws_datasync_location_s3Handler ...
type Aws_datasync_location_s3Handler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_datasync_location_s3Handler) Create(desired *Aws_datasync_location_s3) (*Aws_datasync_location_s3, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_datasync_location_s3", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_datasync_location_s3Handler) Read(externalID string) (*Aws_datasync_location_s3, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_datasync_location_s3", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_datasync_location_s3{ Aws_datasync_location_s3_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_datasync_location_s3Handler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_datasync_location_s3", externalID)
}

type Aws_datasync_task_options_180 struct {

    Atime *string

    Bytes_per_second *int

    Gid *string

    Mtime *string

    Posix_permissions *string

    Preserve_deleted_files *string

    Preserve_devices *string

    Uid *string

    Verify_mode *string

}

type Aws_datasync_task struct {

    Aws_datasync_task_id *string `lyra:"ignore"`

    Arn *string

    Cloudwatch_log_group_arn *string

    Destination_location_arn string

    Name *string

    Options *[]Aws_datasync_task_options_180

    Source_location_arn string

    Tags *map[string]string

}

// Aws_datasync_taskHandler ...
type Aws_datasync_taskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_datasync_taskHandler) Create(desired *Aws_datasync_task) (*Aws_datasync_task, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_datasync_task", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_datasync_taskHandler) Read(externalID string) (*Aws_datasync_task, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_datasync_task", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_datasync_task{ Aws_datasync_task_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_datasync_taskHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_datasync_task", externalID)
}

type Aws_dax_cluster_nodes_181 struct {

    Address *string

    Availability_zone *string

    Id *string

    Port *int

}

type Aws_dax_cluster_server_side_encryption_182 struct {

    Enabled *bool

}

type Aws_dax_cluster struct {

    Aws_dax_cluster_id *string `lyra:"ignore"`

    Arn *string

    Availability_zones *[]string

    Cluster_address *string

    Cluster_name string

    Configuration_endpoint *string

    Description *string

    Iam_role_arn string

    Maintenance_window *string

    Node_type string

    Nodes *[]Aws_dax_cluster_nodes_181

    Notification_topic_arn *string

    Parameter_group_name *string

    Port *int

    Replication_factor int

    Security_group_ids *[]string

    Server_side_encryption *[]Aws_dax_cluster_server_side_encryption_182

    Subnet_group_name *string

    Tags *map[string]string

}

// Aws_dax_clusterHandler ...
type Aws_dax_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dax_clusterHandler) Create(desired *Aws_dax_cluster) (*Aws_dax_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dax_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dax_clusterHandler) Read(externalID string) (*Aws_dax_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dax_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dax_cluster{ Aws_dax_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dax_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dax_cluster", externalID)
}

type Aws_dax_parameter_group_parameters_183 struct {

    Name string

    Value string

}

type Aws_dax_parameter_group struct {

    Aws_dax_parameter_group_id *string `lyra:"ignore"`

    Description *string

    Name string

    Parameters *[]Aws_dax_parameter_group_parameters_183

}

// Aws_dax_parameter_groupHandler ...
type Aws_dax_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dax_parameter_groupHandler) Create(desired *Aws_dax_parameter_group) (*Aws_dax_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dax_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dax_parameter_groupHandler) Read(externalID string) (*Aws_dax_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dax_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dax_parameter_group{ Aws_dax_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dax_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dax_parameter_group", externalID)
}

type Aws_dax_subnet_group struct {

    Aws_dax_subnet_group_id *string `lyra:"ignore"`

    Description *string

    Name string

    Subnet_ids []string

    Vpc_id *string

}

// Aws_dax_subnet_groupHandler ...
type Aws_dax_subnet_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dax_subnet_groupHandler) Create(desired *Aws_dax_subnet_group) (*Aws_dax_subnet_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dax_subnet_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dax_subnet_groupHandler) Read(externalID string) (*Aws_dax_subnet_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dax_subnet_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dax_subnet_group{ Aws_dax_subnet_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dax_subnet_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dax_subnet_group", externalID)
}

type Aws_db_cluster_snapshot struct {

    Aws_db_cluster_snapshot_id *string `lyra:"ignore"`

    Allocated_storage *int

    Availability_zones *[]string

    Db_cluster_identifier string

    Db_cluster_snapshot_arn *string

    Db_cluster_snapshot_identifier string

    Engine *string

    Engine_version *string

    Kms_key_id *string

    License_model *string

    Port *int

    Snapshot_type *string

    Source_db_cluster_snapshot_arn *string

    Status *string

    Storage_encrypted *bool

    Vpc_id *string

}

// Aws_db_cluster_snapshotHandler ...
type Aws_db_cluster_snapshotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_cluster_snapshotHandler) Create(desired *Aws_db_cluster_snapshot) (*Aws_db_cluster_snapshot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_cluster_snapshot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_cluster_snapshotHandler) Read(externalID string) (*Aws_db_cluster_snapshot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_cluster_snapshot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_cluster_snapshot{ Aws_db_cluster_snapshot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_cluster_snapshotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_cluster_snapshot", externalID)
}

type Aws_db_event_subscription struct {

    Aws_db_event_subscription_id *string `lyra:"ignore"`

    Arn *string

    Customer_aws_id *string

    Enabled *bool

    Event_categories *[]string

    Name *string

    Name_prefix *string

    Sns_topic string

    Source_ids *[]string

    Source_type *string

    Tags *map[string]string

}

// Aws_db_event_subscriptionHandler ...
type Aws_db_event_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_event_subscriptionHandler) Create(desired *Aws_db_event_subscription) (*Aws_db_event_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_event_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_event_subscriptionHandler) Read(externalID string) (*Aws_db_event_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_event_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_event_subscription{ Aws_db_event_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_event_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_event_subscription", externalID)
}

type Aws_db_instance_s3_import_184 struct {

    Bucket_name string

    Bucket_prefix *string

    Ingestion_role string

    Source_engine string

    Source_engine_version string

}

type Aws_db_instance struct {

    Aws_db_instance_id *string `lyra:"ignore"`

    Address *string

    Allocated_storage *int

    Allow_major_version_upgrade *bool

    Apply_immediately *bool

    Arn *string

    Auto_minor_version_upgrade *bool

    Availability_zone *string

    Backup_retention_period *int

    Backup_window *string

    Ca_cert_identifier *string

    Character_set_name *string

    Copy_tags_to_snapshot *bool

    Db_subnet_group_name *string

    Deletion_protection *bool

    Domain *string

    Domain_iam_role_name *string

    Enabled_cloudwatch_logs_exports *[]string

    Endpoint *string

    Engine *string

    Engine_version *string

    Final_snapshot_identifier *string

    Hosted_zone_id *string

    Iam_database_authentication_enabled *bool

    Identifier *string

    Identifier_prefix *string

    Instance_class string

    Iops *int

    Kms_key_id *string

    License_model *string

    Maintenance_window *string

    Monitoring_interval *int

    Monitoring_role_arn *string

    Multi_az *bool

    Name *string

    Option_group_name *string

    Parameter_group_name *string

    Password *string

    Port *int

    Publicly_accessible *bool

    Replicas *[]string

    Replicate_source_db *string

    Resource_id *string

    S3_import *[]Aws_db_instance_s3_import_184

    Security_group_names *[]string

    Skip_final_snapshot *bool

    Snapshot_identifier *string

    Status *string

    Storage_encrypted *bool

    Storage_type *string

    Tags *map[string]string

    Timezone *string

    Username *string

    Vpc_security_group_ids *[]string

}

// Aws_db_instanceHandler ...
type Aws_db_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_instanceHandler) Create(desired *Aws_db_instance) (*Aws_db_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_instanceHandler) Read(externalID string) (*Aws_db_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_instance{ Aws_db_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_instance", externalID)
}

type Aws_db_option_group_option_185_option_settings_186 struct {

    Name string

    Value string

}

type Aws_db_option_group_option_185 struct {

    Db_security_group_memberships *[]string

    Option_name string

    Option_settings *[]Aws_db_option_group_option_185_option_settings_186

    Port *int

    Version *string

    Vpc_security_group_memberships *[]string

}

type Aws_db_option_group struct {

    Aws_db_option_group_id *string `lyra:"ignore"`

    Arn *string

    Engine_name string

    Major_engine_version string

    Name *string

    Name_prefix *string

    Option *[]Aws_db_option_group_option_185

    Option_group_description *string

    Tags *map[string]string

}

// Aws_db_option_groupHandler ...
type Aws_db_option_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_option_groupHandler) Create(desired *Aws_db_option_group) (*Aws_db_option_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_option_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_option_groupHandler) Read(externalID string) (*Aws_db_option_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_option_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_option_group{ Aws_db_option_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_option_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_option_group", externalID)
}

type Aws_db_parameter_group_parameter_187 struct {

    Apply_method *string

    Name string

    Value string

}

type Aws_db_parameter_group struct {

    Aws_db_parameter_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Family string

    Name *string

    Name_prefix *string

    Parameter *[]Aws_db_parameter_group_parameter_187

    Tags *map[string]string

}

// Aws_db_parameter_groupHandler ...
type Aws_db_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_parameter_groupHandler) Create(desired *Aws_db_parameter_group) (*Aws_db_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_parameter_groupHandler) Read(externalID string) (*Aws_db_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_parameter_group{ Aws_db_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_parameter_group", externalID)
}

type Aws_db_security_group_ingress_188 struct {

    Cidr *string

    Security_group_id *string

    Security_group_name *string

    Security_group_owner_id *string

}

type Aws_db_security_group struct {

    Aws_db_security_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Ingress []Aws_db_security_group_ingress_188

    Name string

    Tags *map[string]string

}

// Aws_db_security_groupHandler ...
type Aws_db_security_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_security_groupHandler) Create(desired *Aws_db_security_group) (*Aws_db_security_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_security_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_security_groupHandler) Read(externalID string) (*Aws_db_security_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_security_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_security_group{ Aws_db_security_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_security_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_security_group", externalID)
}

type Aws_db_snapshot struct {

    Aws_db_snapshot_id *string `lyra:"ignore"`

    Allocated_storage *int

    Availability_zone *string

    Db_instance_identifier string

    Db_snapshot_arn *string

    Db_snapshot_identifier string

    Encrypted *bool

    Engine *string

    Engine_version *string

    Iops *int

    Kms_key_id *string

    License_model *string

    Option_group_name *string

    Port *int

    Snapshot_type *string

    Source_db_snapshot_identifier *string

    Source_region *string

    Status *string

    Storage_type *string

    Tags *map[string]string

    Vpc_id *string

}

// Aws_db_snapshotHandler ...
type Aws_db_snapshotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_snapshotHandler) Create(desired *Aws_db_snapshot) (*Aws_db_snapshot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_snapshot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_snapshotHandler) Read(externalID string) (*Aws_db_snapshot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_snapshot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_snapshot{ Aws_db_snapshot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_snapshotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_snapshot", externalID)
}

type Aws_db_subnet_group struct {

    Aws_db_subnet_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Name *string

    Name_prefix *string

    Subnet_ids []string

    Tags *map[string]string

}

// Aws_db_subnet_groupHandler ...
type Aws_db_subnet_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_db_subnet_groupHandler) Create(desired *Aws_db_subnet_group) (*Aws_db_subnet_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_db_subnet_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_db_subnet_groupHandler) Read(externalID string) (*Aws_db_subnet_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_db_subnet_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_db_subnet_group{ Aws_db_subnet_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_db_subnet_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_db_subnet_group", externalID)
}

type Aws_default_network_acl_egress_189 struct {

    Action string

    Cidr_block *string

    From_port int

    Icmp_code *int

    Icmp_type *int

    Ipv6_cidr_block *string

    Protocol string

    Rule_no int

    To_port int

}

type Aws_default_network_acl_ingress_190 struct {

    Action string

    Cidr_block *string

    From_port int

    Icmp_code *int

    Icmp_type *int

    Ipv6_cidr_block *string

    Protocol string

    Rule_no int

    To_port int

}

type Aws_default_network_acl struct {

    Aws_default_network_acl_id *string `lyra:"ignore"`

    Default_network_acl_id string

    Egress *[]Aws_default_network_acl_egress_189

    Ingress *[]Aws_default_network_acl_ingress_190

    Owner_id *string

    Subnet_ids *[]string

    Tags *map[string]string

    Vpc_id *string

}

// Aws_default_network_aclHandler ...
type Aws_default_network_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_default_network_aclHandler) Create(desired *Aws_default_network_acl) (*Aws_default_network_acl, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_default_network_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_default_network_aclHandler) Read(externalID string) (*Aws_default_network_acl, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_default_network_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_default_network_acl{ Aws_default_network_acl_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_default_network_aclHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_default_network_acl", externalID)
}

type Aws_default_route_table_route_191 struct {

    Cidr_block *string

    Egress_only_gateway_id *string

    Gateway_id *string

    Instance_id *string

    Ipv6_cidr_block *string

    Nat_gateway_id *string

    Network_interface_id *string

    Transit_gateway_id *string

    Vpc_peering_connection_id *string

}

type Aws_default_route_table struct {

    Aws_default_route_table_id *string `lyra:"ignore"`

    Default_route_table_id string

    Owner_id *string

    Propagating_vgws *[]string

    Route *[]Aws_default_route_table_route_191

    Tags *map[string]string

    Vpc_id *string

}

// Aws_default_route_tableHandler ...
type Aws_default_route_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_default_route_tableHandler) Create(desired *Aws_default_route_table) (*Aws_default_route_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_default_route_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_default_route_tableHandler) Read(externalID string) (*Aws_default_route_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_default_route_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_default_route_table{ Aws_default_route_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_default_route_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_default_route_table", externalID)
}

type Aws_default_security_group_egress_192 struct {

    Cidr_blocks *[]string

    Description *string

    From_port int

    Ipv6_cidr_blocks *[]string

    Prefix_list_ids *[]string

    Protocol string

    Security_groups *[]string

    Self *bool

    To_port int

}

type Aws_default_security_group_ingress_193 struct {

    Cidr_blocks *[]string

    Description *string

    From_port int

    Ipv6_cidr_blocks *[]string

    Prefix_list_ids *[]string

    Protocol string

    Security_groups *[]string

    Self *bool

    To_port int

}

type Aws_default_security_group struct {

    Aws_default_security_group_id *string `lyra:"ignore"`

    Arn *string

    Egress *[]Aws_default_security_group_egress_192

    Ingress *[]Aws_default_security_group_ingress_193

    Name *string

    Owner_id *string

    Revoke_rules_on_delete *bool

    Tags *map[string]string

    Vpc_id *string

}

// Aws_default_security_groupHandler ...
type Aws_default_security_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_default_security_groupHandler) Create(desired *Aws_default_security_group) (*Aws_default_security_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_default_security_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_default_security_groupHandler) Read(externalID string) (*Aws_default_security_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_default_security_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_default_security_group{ Aws_default_security_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_default_security_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_default_security_group", externalID)
}

type Aws_default_subnet struct {

    Aws_default_subnet_id *string `lyra:"ignore"`

    Arn *string

    Assign_ipv6_address_on_creation *bool

    Availability_zone string

    Availability_zone_id *string

    Cidr_block *string

    Ipv6_cidr_block *string

    Ipv6_cidr_block_association_id *string

    Map_public_ip_on_launch *bool

    Owner_id *string

    Tags *map[string]string

    Vpc_id *string

}

// Aws_default_subnetHandler ...
type Aws_default_subnetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_default_subnetHandler) Create(desired *Aws_default_subnet) (*Aws_default_subnet, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_default_subnet", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_default_subnetHandler) Read(externalID string) (*Aws_default_subnet, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_default_subnet", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_default_subnet{ Aws_default_subnet_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_default_subnetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_default_subnet", externalID)
}

type Aws_default_vpc struct {

    Aws_default_vpc_id *string `lyra:"ignore"`

    Arn *string

    Assign_generated_ipv6_cidr_block *bool

    Cidr_block *string

    Default_network_acl_id *string

    Default_route_table_id *string

    Default_security_group_id *string

    Dhcp_options_id *string

    Enable_classiclink *bool

    Enable_classiclink_dns_support *bool

    Enable_dns_hostnames *bool

    Enable_dns_support *bool

    Instance_tenancy *string

    Ipv6_association_id *string

    Ipv6_cidr_block *string

    Main_route_table_id *string

    Owner_id *string

    Tags *map[string]string

}

// Aws_default_vpcHandler ...
type Aws_default_vpcHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_default_vpcHandler) Create(desired *Aws_default_vpc) (*Aws_default_vpc, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_default_vpc", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_default_vpcHandler) Read(externalID string) (*Aws_default_vpc, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_default_vpc", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_default_vpc{ Aws_default_vpc_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_default_vpcHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_default_vpc", externalID)
}

type Aws_default_vpc_dhcp_options struct {

    Aws_default_vpc_dhcp_options_id *string `lyra:"ignore"`

    Domain_name *string

    Domain_name_servers *string

    Netbios_name_servers *[]string

    Netbios_node_type *string

    Ntp_servers *string

    Owner_id *string

    Tags *map[string]string

}

// Aws_default_vpc_dhcp_optionsHandler ...
type Aws_default_vpc_dhcp_optionsHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_default_vpc_dhcp_optionsHandler) Create(desired *Aws_default_vpc_dhcp_options) (*Aws_default_vpc_dhcp_options, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_default_vpc_dhcp_options", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_default_vpc_dhcp_optionsHandler) Read(externalID string) (*Aws_default_vpc_dhcp_options, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_default_vpc_dhcp_options", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_default_vpc_dhcp_options{ Aws_default_vpc_dhcp_options_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_default_vpc_dhcp_optionsHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_default_vpc_dhcp_options", externalID)
}

type Aws_devicefarm_project struct {

    Aws_devicefarm_project_id *string `lyra:"ignore"`

    Arn *string

    Name string

}

// Aws_devicefarm_projectHandler ...
type Aws_devicefarm_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_devicefarm_projectHandler) Create(desired *Aws_devicefarm_project) (*Aws_devicefarm_project, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_devicefarm_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_devicefarm_projectHandler) Read(externalID string) (*Aws_devicefarm_project, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_devicefarm_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_devicefarm_project{ Aws_devicefarm_project_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_devicefarm_projectHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_devicefarm_project", externalID)
}

type Aws_directory_service_conditional_forwarder struct {

    Aws_directory_service_conditional_forwarder_id *string `lyra:"ignore"`

    Directory_id string

    Dns_ips []string

    Remote_domain_name string

}

// Aws_directory_service_conditional_forwarderHandler ...
type Aws_directory_service_conditional_forwarderHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_directory_service_conditional_forwarderHandler) Create(desired *Aws_directory_service_conditional_forwarder) (*Aws_directory_service_conditional_forwarder, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_directory_service_conditional_forwarder", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_directory_service_conditional_forwarderHandler) Read(externalID string) (*Aws_directory_service_conditional_forwarder, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_directory_service_conditional_forwarder", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_directory_service_conditional_forwarder{ Aws_directory_service_conditional_forwarder_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_directory_service_conditional_forwarderHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_directory_service_conditional_forwarder", externalID)
}

type Aws_directory_service_directory_connect_settings_194 struct {

    Customer_dns_ips []string

    Customer_username string

    Subnet_ids []string

    Vpc_id string

}

type Aws_directory_service_directory_vpc_settings_195 struct {

    Subnet_ids []string

    Vpc_id string

}

type Aws_directory_service_directory struct {

    Aws_directory_service_directory_id *string `lyra:"ignore"`

    Access_url *string

    Alias *string

    Connect_settings *[]Aws_directory_service_directory_connect_settings_194

    Description *string

    Dns_ip_addresses *[]string

    Edition *string

    Enable_sso *bool

    Name string

    Password string

    Security_group_id *string

    Short_name *string

    Size *string

    Tags *map[string]string

    Type *string

    Vpc_settings *[]Aws_directory_service_directory_vpc_settings_195

}

// Aws_directory_service_directoryHandler ...
type Aws_directory_service_directoryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_directory_service_directoryHandler) Create(desired *Aws_directory_service_directory) (*Aws_directory_service_directory, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_directory_service_directory", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_directory_service_directoryHandler) Read(externalID string) (*Aws_directory_service_directory, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_directory_service_directory", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_directory_service_directory{ Aws_directory_service_directory_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_directory_service_directoryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_directory_service_directory", externalID)
}

type Aws_dlm_lifecycle_policy_policy_details_196_schedule_197_create_rule_198 struct {

    Interval int

    Interval_unit *string

    Times *[]string

}

type Aws_dlm_lifecycle_policy_policy_details_196_schedule_197_retain_rule_199 struct {

    Count int

}

type Aws_dlm_lifecycle_policy_policy_details_196_schedule_197 struct {

    Copy_tags *bool

    Create_rule []Aws_dlm_lifecycle_policy_policy_details_196_schedule_197_create_rule_198

    Name string

    Retain_rule []Aws_dlm_lifecycle_policy_policy_details_196_schedule_197_retain_rule_199

    Tags_to_add *map[string]string

}

type Aws_dlm_lifecycle_policy_policy_details_196 struct {

    Resource_types []string

    Schedule []Aws_dlm_lifecycle_policy_policy_details_196_schedule_197

    Target_tags map[string]string

}

type Aws_dlm_lifecycle_policy struct {

    Aws_dlm_lifecycle_policy_id *string `lyra:"ignore"`

    Description string

    Execution_role_arn string

    Policy_details []Aws_dlm_lifecycle_policy_policy_details_196

    State *string

}

// Aws_dlm_lifecycle_policyHandler ...
type Aws_dlm_lifecycle_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dlm_lifecycle_policyHandler) Create(desired *Aws_dlm_lifecycle_policy) (*Aws_dlm_lifecycle_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dlm_lifecycle_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dlm_lifecycle_policyHandler) Read(externalID string) (*Aws_dlm_lifecycle_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dlm_lifecycle_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dlm_lifecycle_policy{ Aws_dlm_lifecycle_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dlm_lifecycle_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dlm_lifecycle_policy", externalID)
}

type Aws_dms_certificate struct {

    Aws_dms_certificate_id *string `lyra:"ignore"`

    Certificate_arn *string

    Certificate_id string

    Certificate_pem *string

    Certificate_wallet *string

}

// Aws_dms_certificateHandler ...
type Aws_dms_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dms_certificateHandler) Create(desired *Aws_dms_certificate) (*Aws_dms_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dms_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dms_certificateHandler) Read(externalID string) (*Aws_dms_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dms_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dms_certificate{ Aws_dms_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dms_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dms_certificate", externalID)
}

type Aws_dms_endpoint_mongodb_settings_200 struct {

    Auth_mechanism *string

    Auth_source *string

    Auth_type *string

    Docs_to_investigate *string

    Extract_doc_id *string

    Nesting_level *string

}

type Aws_dms_endpoint_s3_settings_201 struct {

    Bucket_folder *string

    Bucket_name *string

    Compression_type *string

    Csv_delimiter *string

    Csv_row_delimiter *string

    External_table_definition *string

    Service_access_role_arn *string

}

type Aws_dms_endpoint struct {

    Aws_dms_endpoint_id *string `lyra:"ignore"`

    Certificate_arn *string

    Database_name *string

    Endpoint_arn *string

    Endpoint_id string

    Endpoint_type string

    Engine_name string

    Extra_connection_attributes *string

    Kms_key_arn *string

    Mongodb_settings *[]Aws_dms_endpoint_mongodb_settings_200

    Password *string

    Port *int

    S3_settings *[]Aws_dms_endpoint_s3_settings_201

    Server_name *string

    Service_access_role *string

    Ssl_mode *string

    Tags *map[string]string

    Username *string

}

// Aws_dms_endpointHandler ...
type Aws_dms_endpointHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dms_endpointHandler) Create(desired *Aws_dms_endpoint) (*Aws_dms_endpoint, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dms_endpoint", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dms_endpointHandler) Read(externalID string) (*Aws_dms_endpoint, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dms_endpoint", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dms_endpoint{ Aws_dms_endpoint_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dms_endpointHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dms_endpoint", externalID)
}

type Aws_dms_replication_instance struct {

    Aws_dms_replication_instance_id *string `lyra:"ignore"`

    Allocated_storage *int

    Apply_immediately *bool

    Auto_minor_version_upgrade *bool

    Availability_zone *string

    Engine_version *string

    Kms_key_arn *string

    Multi_az *bool

    Preferred_maintenance_window *string

    Publicly_accessible *bool

    Replication_instance_arn *string

    Replication_instance_class string

    Replication_instance_id string

    Replication_instance_private_ips *[]string

    Replication_instance_public_ips *[]string

    Replication_subnet_group_id *string

    Tags *map[string]string

    Vpc_security_group_ids *[]string

}

// Aws_dms_replication_instanceHandler ...
type Aws_dms_replication_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dms_replication_instanceHandler) Create(desired *Aws_dms_replication_instance) (*Aws_dms_replication_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dms_replication_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dms_replication_instanceHandler) Read(externalID string) (*Aws_dms_replication_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dms_replication_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dms_replication_instance{ Aws_dms_replication_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dms_replication_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dms_replication_instance", externalID)
}

type Aws_dms_replication_subnet_group struct {

    Aws_dms_replication_subnet_group_id *string `lyra:"ignore"`

    Replication_subnet_group_arn *string

    Replication_subnet_group_description string

    Replication_subnet_group_id string

    Subnet_ids []string

    Tags *map[string]string

    Vpc_id *string

}

// Aws_dms_replication_subnet_groupHandler ...
type Aws_dms_replication_subnet_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dms_replication_subnet_groupHandler) Create(desired *Aws_dms_replication_subnet_group) (*Aws_dms_replication_subnet_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dms_replication_subnet_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dms_replication_subnet_groupHandler) Read(externalID string) (*Aws_dms_replication_subnet_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dms_replication_subnet_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dms_replication_subnet_group{ Aws_dms_replication_subnet_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dms_replication_subnet_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dms_replication_subnet_group", externalID)
}

type Aws_dms_replication_task struct {

    Aws_dms_replication_task_id *string `lyra:"ignore"`

    Cdc_start_time *string

    Migration_type string

    Replication_instance_arn string

    Replication_task_arn *string

    Replication_task_id string

    Replication_task_settings *string

    Source_endpoint_arn string

    Table_mappings string

    Tags *map[string]string

    Target_endpoint_arn string

}

// Aws_dms_replication_taskHandler ...
type Aws_dms_replication_taskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dms_replication_taskHandler) Create(desired *Aws_dms_replication_task) (*Aws_dms_replication_task, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dms_replication_task", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dms_replication_taskHandler) Read(externalID string) (*Aws_dms_replication_task, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dms_replication_task", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dms_replication_task{ Aws_dms_replication_task_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dms_replication_taskHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dms_replication_task", externalID)
}

type Aws_docdb_cluster_parameter_group_parameter_202 struct {

    Apply_method *string

    Name string

    Value string

}

type Aws_docdb_cluster_parameter_group struct {

    Aws_docdb_cluster_parameter_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Family string

    Name *string

    Name_prefix *string

    Parameter *[]Aws_docdb_cluster_parameter_group_parameter_202

    Tags *map[string]string

}

// Aws_docdb_cluster_parameter_groupHandler ...
type Aws_docdb_cluster_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_docdb_cluster_parameter_groupHandler) Create(desired *Aws_docdb_cluster_parameter_group) (*Aws_docdb_cluster_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_docdb_cluster_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_docdb_cluster_parameter_groupHandler) Read(externalID string) (*Aws_docdb_cluster_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_docdb_cluster_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_docdb_cluster_parameter_group{ Aws_docdb_cluster_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_docdb_cluster_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_docdb_cluster_parameter_group", externalID)
}

type Aws_docdb_subnet_group struct {

    Aws_docdb_subnet_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Name *string

    Name_prefix *string

    Subnet_ids []string

    Tags *map[string]string

}

// Aws_docdb_subnet_groupHandler ...
type Aws_docdb_subnet_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_docdb_subnet_groupHandler) Create(desired *Aws_docdb_subnet_group) (*Aws_docdb_subnet_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_docdb_subnet_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_docdb_subnet_groupHandler) Read(externalID string) (*Aws_docdb_subnet_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_docdb_subnet_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_docdb_subnet_group{ Aws_docdb_subnet_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_docdb_subnet_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_docdb_subnet_group", externalID)
}

type Aws_dx_bgp_peer struct {

    Aws_dx_bgp_peer_id *string `lyra:"ignore"`

    Address_family string

    Amazon_address *string

    Bgp_asn int

    Bgp_auth_key *string

    Bgp_status *string

    Customer_address *string

    Virtual_interface_id string

}

// Aws_dx_bgp_peerHandler ...
type Aws_dx_bgp_peerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_bgp_peerHandler) Create(desired *Aws_dx_bgp_peer) (*Aws_dx_bgp_peer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_bgp_peer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_bgp_peerHandler) Read(externalID string) (*Aws_dx_bgp_peer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_bgp_peer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_bgp_peer{ Aws_dx_bgp_peer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_bgp_peerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_bgp_peer", externalID)
}

type Aws_dx_connection struct {

    Aws_dx_connection_id *string `lyra:"ignore"`

    Arn *string

    Bandwidth string

    Jumbo_frame_capable *bool

    Location string

    Name string

    Tags *map[string]string

}

// Aws_dx_connectionHandler ...
type Aws_dx_connectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_connectionHandler) Create(desired *Aws_dx_connection) (*Aws_dx_connection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_connection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_connectionHandler) Read(externalID string) (*Aws_dx_connection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_connection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_connection{ Aws_dx_connection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_connectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_connection", externalID)
}

type Aws_dx_connection_association struct {

    Aws_dx_connection_association_id *string `lyra:"ignore"`

    Connection_id string

    Lag_id string

}

// Aws_dx_connection_associationHandler ...
type Aws_dx_connection_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_connection_associationHandler) Create(desired *Aws_dx_connection_association) (*Aws_dx_connection_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_connection_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_connection_associationHandler) Read(externalID string) (*Aws_dx_connection_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_connection_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_connection_association{ Aws_dx_connection_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_connection_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_connection_association", externalID)
}

type Aws_dx_gateway struct {

    Aws_dx_gateway_id *string `lyra:"ignore"`

    Amazon_side_asn string

    Name string

}

// Aws_dx_gatewayHandler ...
type Aws_dx_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_gatewayHandler) Create(desired *Aws_dx_gateway) (*Aws_dx_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_gatewayHandler) Read(externalID string) (*Aws_dx_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_gateway{ Aws_dx_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_gateway", externalID)
}

type Aws_dx_gateway_association struct {

    Aws_dx_gateway_association_id *string `lyra:"ignore"`

    Dx_gateway_id string

    Vpn_gateway_id string

}

// Aws_dx_gateway_associationHandler ...
type Aws_dx_gateway_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_gateway_associationHandler) Create(desired *Aws_dx_gateway_association) (*Aws_dx_gateway_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_gateway_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_gateway_associationHandler) Read(externalID string) (*Aws_dx_gateway_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_gateway_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_gateway_association{ Aws_dx_gateway_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_gateway_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_gateway_association", externalID)
}

type Aws_dx_hosted_private_virtual_interface struct {

    Aws_dx_hosted_private_virtual_interface_id *string `lyra:"ignore"`

    Address_family string

    Amazon_address *string

    Arn *string

    Bgp_asn int

    Bgp_auth_key *string

    Connection_id string

    Customer_address *string

    Jumbo_frame_capable *bool

    Mtu *int

    Name string

    Owner_account_id string

    Vlan int

}

// Aws_dx_hosted_private_virtual_interfaceHandler ...
type Aws_dx_hosted_private_virtual_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_hosted_private_virtual_interfaceHandler) Create(desired *Aws_dx_hosted_private_virtual_interface) (*Aws_dx_hosted_private_virtual_interface, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_hosted_private_virtual_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_hosted_private_virtual_interfaceHandler) Read(externalID string) (*Aws_dx_hosted_private_virtual_interface, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_hosted_private_virtual_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_hosted_private_virtual_interface{ Aws_dx_hosted_private_virtual_interface_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_hosted_private_virtual_interfaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_hosted_private_virtual_interface", externalID)
}

type Aws_dx_hosted_private_virtual_interface_accepter struct {

    Aws_dx_hosted_private_virtual_interface_accepter_id *string `lyra:"ignore"`

    Arn *string

    Dx_gateway_id *string

    Tags *map[string]string

    Virtual_interface_id string

    Vpn_gateway_id *string

}

// Aws_dx_hosted_private_virtual_interface_accepterHandler ...
type Aws_dx_hosted_private_virtual_interface_accepterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_hosted_private_virtual_interface_accepterHandler) Create(desired *Aws_dx_hosted_private_virtual_interface_accepter) (*Aws_dx_hosted_private_virtual_interface_accepter, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_hosted_private_virtual_interface_accepter", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_hosted_private_virtual_interface_accepterHandler) Read(externalID string) (*Aws_dx_hosted_private_virtual_interface_accepter, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_hosted_private_virtual_interface_accepter", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_hosted_private_virtual_interface_accepter{ Aws_dx_hosted_private_virtual_interface_accepter_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_hosted_private_virtual_interface_accepterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_hosted_private_virtual_interface_accepter", externalID)
}

type Aws_dx_hosted_public_virtual_interface struct {

    Aws_dx_hosted_public_virtual_interface_id *string `lyra:"ignore"`

    Address_family string

    Amazon_address *string

    Arn *string

    Bgp_asn int

    Bgp_auth_key *string

    Connection_id string

    Customer_address *string

    Name string

    Owner_account_id string

    Route_filter_prefixes []string

    Vlan int

}

// Aws_dx_hosted_public_virtual_interfaceHandler ...
type Aws_dx_hosted_public_virtual_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_hosted_public_virtual_interfaceHandler) Create(desired *Aws_dx_hosted_public_virtual_interface) (*Aws_dx_hosted_public_virtual_interface, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_hosted_public_virtual_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_hosted_public_virtual_interfaceHandler) Read(externalID string) (*Aws_dx_hosted_public_virtual_interface, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_hosted_public_virtual_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_hosted_public_virtual_interface{ Aws_dx_hosted_public_virtual_interface_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_hosted_public_virtual_interfaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_hosted_public_virtual_interface", externalID)
}

type Aws_dx_hosted_public_virtual_interface_accepter struct {

    Aws_dx_hosted_public_virtual_interface_accepter_id *string `lyra:"ignore"`

    Arn *string

    Tags *map[string]string

    Virtual_interface_id string

}

// Aws_dx_hosted_public_virtual_interface_accepterHandler ...
type Aws_dx_hosted_public_virtual_interface_accepterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_hosted_public_virtual_interface_accepterHandler) Create(desired *Aws_dx_hosted_public_virtual_interface_accepter) (*Aws_dx_hosted_public_virtual_interface_accepter, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_hosted_public_virtual_interface_accepter", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_hosted_public_virtual_interface_accepterHandler) Read(externalID string) (*Aws_dx_hosted_public_virtual_interface_accepter, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_hosted_public_virtual_interface_accepter", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_hosted_public_virtual_interface_accepter{ Aws_dx_hosted_public_virtual_interface_accepter_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_hosted_public_virtual_interface_accepterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_hosted_public_virtual_interface_accepter", externalID)
}

type Aws_dx_lag struct {

    Aws_dx_lag_id *string `lyra:"ignore"`

    Arn *string

    Connections_bandwidth string

    Force_destroy *bool

    Location string

    Name string

    Number_of_connections *int

    Tags *map[string]string

}

// Aws_dx_lagHandler ...
type Aws_dx_lagHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_lagHandler) Create(desired *Aws_dx_lag) (*Aws_dx_lag, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_lag", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_lagHandler) Read(externalID string) (*Aws_dx_lag, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_lag", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_lag{ Aws_dx_lag_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_lagHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_lag", externalID)
}

type Aws_dx_private_virtual_interface struct {

    Aws_dx_private_virtual_interface_id *string `lyra:"ignore"`

    Address_family string

    Amazon_address *string

    Arn *string

    Bgp_asn int

    Bgp_auth_key *string

    Connection_id string

    Customer_address *string

    Dx_gateway_id *string

    Jumbo_frame_capable *bool

    Mtu *int

    Name string

    Tags *map[string]string

    Vlan int

    Vpn_gateway_id *string

}

// Aws_dx_private_virtual_interfaceHandler ...
type Aws_dx_private_virtual_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_private_virtual_interfaceHandler) Create(desired *Aws_dx_private_virtual_interface) (*Aws_dx_private_virtual_interface, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_private_virtual_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_private_virtual_interfaceHandler) Read(externalID string) (*Aws_dx_private_virtual_interface, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_private_virtual_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_private_virtual_interface{ Aws_dx_private_virtual_interface_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_private_virtual_interfaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_private_virtual_interface", externalID)
}

type Aws_dx_public_virtual_interface struct {

    Aws_dx_public_virtual_interface_id *string `lyra:"ignore"`

    Address_family string

    Amazon_address *string

    Arn *string

    Bgp_asn int

    Bgp_auth_key *string

    Connection_id string

    Customer_address *string

    Name string

    Route_filter_prefixes []string

    Tags *map[string]string

    Vlan int

}

// Aws_dx_public_virtual_interfaceHandler ...
type Aws_dx_public_virtual_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dx_public_virtual_interfaceHandler) Create(desired *Aws_dx_public_virtual_interface) (*Aws_dx_public_virtual_interface, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dx_public_virtual_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dx_public_virtual_interfaceHandler) Read(externalID string) (*Aws_dx_public_virtual_interface, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dx_public_virtual_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dx_public_virtual_interface{ Aws_dx_public_virtual_interface_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dx_public_virtual_interfaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dx_public_virtual_interface", externalID)
}

type Aws_dynamodb_global_table_replica_203 struct {

    Region_name string

}

type Aws_dynamodb_global_table struct {

    Aws_dynamodb_global_table_id *string `lyra:"ignore"`

    Arn *string

    Name string

    Replica []Aws_dynamodb_global_table_replica_203

}

// Aws_dynamodb_global_tableHandler ...
type Aws_dynamodb_global_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dynamodb_global_tableHandler) Create(desired *Aws_dynamodb_global_table) (*Aws_dynamodb_global_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dynamodb_global_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dynamodb_global_tableHandler) Read(externalID string) (*Aws_dynamodb_global_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dynamodb_global_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dynamodb_global_table{ Aws_dynamodb_global_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dynamodb_global_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dynamodb_global_table", externalID)
}

type Aws_dynamodb_table_attribute_204 struct {

    Name string

    Type string

}

type Aws_dynamodb_table_global_secondary_index_205 struct {

    Hash_key string

    Name string

    Non_key_attributes *[]string

    Projection_type string

    Range_key *string

    Read_capacity *int

    Write_capacity *int

}

type Aws_dynamodb_table_local_secondary_index_206 struct {

    Name string

    Non_key_attributes *[]string

    Projection_type string

    Range_key string

}

type Aws_dynamodb_table_point_in_time_recovery_207 struct {

    Enabled bool

}

type Aws_dynamodb_table_server_side_encryption_208 struct {

    Enabled bool

}

type Aws_dynamodb_table_ttl_209 struct {

    Attribute_name string

    Enabled bool

}

type Aws_dynamodb_table struct {

    Aws_dynamodb_table_id *string `lyra:"ignore"`

    Arn *string

    Attribute []Aws_dynamodb_table_attribute_204

    Billing_mode *string

    Global_secondary_index *[]Aws_dynamodb_table_global_secondary_index_205

    Hash_key string

    Local_secondary_index *[]Aws_dynamodb_table_local_secondary_index_206

    Name string

    Point_in_time_recovery *[]Aws_dynamodb_table_point_in_time_recovery_207

    Range_key *string

    Read_capacity *int

    Server_side_encryption *[]Aws_dynamodb_table_server_side_encryption_208

    Stream_arn *string

    Stream_enabled *bool

    Stream_label *string

    Stream_view_type *string

    Tags *map[string]string

    Ttl *[]Aws_dynamodb_table_ttl_209

    Write_capacity *int

}

// Aws_dynamodb_tableHandler ...
type Aws_dynamodb_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dynamodb_tableHandler) Create(desired *Aws_dynamodb_table) (*Aws_dynamodb_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dynamodb_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dynamodb_tableHandler) Read(externalID string) (*Aws_dynamodb_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dynamodb_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dynamodb_table{ Aws_dynamodb_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dynamodb_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dynamodb_table", externalID)
}

type Aws_dynamodb_table_item struct {

    Aws_dynamodb_table_item_id *string `lyra:"ignore"`

    Hash_key string

    Item string

    Range_key *string

    Table_name string

}

// Aws_dynamodb_table_itemHandler ...
type Aws_dynamodb_table_itemHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_dynamodb_table_itemHandler) Create(desired *Aws_dynamodb_table_item) (*Aws_dynamodb_table_item, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_dynamodb_table_item", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_dynamodb_table_itemHandler) Read(externalID string) (*Aws_dynamodb_table_item, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_dynamodb_table_item", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_dynamodb_table_item{ Aws_dynamodb_table_item_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_dynamodb_table_itemHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_dynamodb_table_item", externalID)
}

type Aws_ebs_snapshot struct {

    Aws_ebs_snapshot_id *string `lyra:"ignore"`

    Data_encryption_key_id *string

    Description *string

    Encrypted *bool

    Kms_key_id *string

    Owner_alias *string

    Owner_id *string

    Tags *map[string]string

    Volume_id string

    Volume_size *int

}

// Aws_ebs_snapshotHandler ...
type Aws_ebs_snapshotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ebs_snapshotHandler) Create(desired *Aws_ebs_snapshot) (*Aws_ebs_snapshot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ebs_snapshot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ebs_snapshotHandler) Read(externalID string) (*Aws_ebs_snapshot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ebs_snapshot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ebs_snapshot{ Aws_ebs_snapshot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ebs_snapshotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ebs_snapshot", externalID)
}

type Aws_ebs_snapshot_copy struct {

    Aws_ebs_snapshot_copy_id *string `lyra:"ignore"`

    Data_encryption_key_id *string

    Description *string

    Encrypted *bool

    Kms_key_id *string

    Owner_alias *string

    Owner_id *string

    Source_region string

    Source_snapshot_id string

    Tags *map[string]string

    Volume_id *string

    Volume_size *int

}

// Aws_ebs_snapshot_copyHandler ...
type Aws_ebs_snapshot_copyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ebs_snapshot_copyHandler) Create(desired *Aws_ebs_snapshot_copy) (*Aws_ebs_snapshot_copy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ebs_snapshot_copy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ebs_snapshot_copyHandler) Read(externalID string) (*Aws_ebs_snapshot_copy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ebs_snapshot_copy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ebs_snapshot_copy{ Aws_ebs_snapshot_copy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ebs_snapshot_copyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ebs_snapshot_copy", externalID)
}

type Aws_ebs_volume struct {

    Aws_ebs_volume_id *string `lyra:"ignore"`

    Arn *string

    Availability_zone string

    Encrypted *bool

    Iops *int

    Kms_key_id *string

    Size *int

    Snapshot_id *string

    Tags *map[string]string

    Type *string

}

// Aws_ebs_volumeHandler ...
type Aws_ebs_volumeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ebs_volumeHandler) Create(desired *Aws_ebs_volume) (*Aws_ebs_volume, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ebs_volume", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ebs_volumeHandler) Read(externalID string) (*Aws_ebs_volume, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ebs_volume", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ebs_volume{ Aws_ebs_volume_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ebs_volumeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ebs_volume", externalID)
}

type Aws_ec2_capacity_reservation struct {

    Aws_ec2_capacity_reservation_id *string `lyra:"ignore"`

    Availability_zone string

    Ebs_optimized *bool

    End_date *string

    End_date_type *string

    Ephemeral_storage *bool

    Instance_count int

    Instance_match_criteria *string

    Instance_platform string

    Instance_type string

    Tags *map[string]string

    Tenancy *string

}

// Aws_ec2_capacity_reservationHandler ...
type Aws_ec2_capacity_reservationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_capacity_reservationHandler) Create(desired *Aws_ec2_capacity_reservation) (*Aws_ec2_capacity_reservation, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_capacity_reservation", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_capacity_reservationHandler) Read(externalID string) (*Aws_ec2_capacity_reservation, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_capacity_reservation", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_capacity_reservation{ Aws_ec2_capacity_reservation_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_capacity_reservationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_capacity_reservation", externalID)
}

type Aws_ec2_fleet_launch_template_config_210_launch_template_specification_211 struct {

    Launch_template_id *string

    Launch_template_name *string

    Version string

}

type Aws_ec2_fleet_launch_template_config_210_override_212 struct {

    Availability_zone *string

    Instance_type *string

    Max_price *string

    Priority *float64

    Subnet_id *string

    Weighted_capacity *float64

}

type Aws_ec2_fleet_launch_template_config_210 struct {

    Launch_template_specification []Aws_ec2_fleet_launch_template_config_210_launch_template_specification_211

    Override *[]Aws_ec2_fleet_launch_template_config_210_override_212

}

type Aws_ec2_fleet_on_demand_options_213 struct {

    Allocation_strategy *string

}

type Aws_ec2_fleet_spot_options_214 struct {

    Allocation_strategy *string

    Instance_interruption_behavior *string

    Instance_pools_to_use_count *int

}

type Aws_ec2_fleet_target_capacity_specification_215 struct {

    Default_target_capacity_type string

    On_demand_target_capacity *int

    Spot_target_capacity *int

    Total_target_capacity int

}

type Aws_ec2_fleet struct {

    Aws_ec2_fleet_id *string `lyra:"ignore"`

    Excess_capacity_termination_policy *string

    Launch_template_config []Aws_ec2_fleet_launch_template_config_210

    On_demand_options *[]Aws_ec2_fleet_on_demand_options_213

    Replace_unhealthy_instances *bool

    Spot_options *[]Aws_ec2_fleet_spot_options_214

    Tags *map[string]string

    Target_capacity_specification []Aws_ec2_fleet_target_capacity_specification_215

    Terminate_instances *bool

    Terminate_instances_with_expiration *bool

    Type *string

}

// Aws_ec2_fleetHandler ...
type Aws_ec2_fleetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_fleetHandler) Create(desired *Aws_ec2_fleet) (*Aws_ec2_fleet, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_fleet", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_fleetHandler) Read(externalID string) (*Aws_ec2_fleet, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_fleet", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_fleet{ Aws_ec2_fleet_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_fleetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_fleet", externalID)
}

type Aws_ec2_transit_gateway struct {

    Aws_ec2_transit_gateway_id *string `lyra:"ignore"`

    Amazon_side_asn *int

    Arn *string

    Association_default_route_table_id *string

    Auto_accept_shared_attachments *string

    Default_route_table_association *string

    Default_route_table_propagation *string

    Description *string

    Dns_support *string

    Owner_id *string

    Propagation_default_route_table_id *string

    Tags *map[string]string

    Vpn_ecmp_support *string

}

// Aws_ec2_transit_gatewayHandler ...
type Aws_ec2_transit_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_transit_gatewayHandler) Create(desired *Aws_ec2_transit_gateway) (*Aws_ec2_transit_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_transit_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_transit_gatewayHandler) Read(externalID string) (*Aws_ec2_transit_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_transit_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_transit_gateway{ Aws_ec2_transit_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_transit_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_transit_gateway", externalID)
}

type Aws_ec2_transit_gateway_route struct {

    Aws_ec2_transit_gateway_route_id *string `lyra:"ignore"`

    Destination_cidr_block string

    Transit_gateway_attachment_id string

    Transit_gateway_route_table_id string

}

// Aws_ec2_transit_gateway_routeHandler ...
type Aws_ec2_transit_gateway_routeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_transit_gateway_routeHandler) Create(desired *Aws_ec2_transit_gateway_route) (*Aws_ec2_transit_gateway_route, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_transit_gateway_route", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_transit_gateway_routeHandler) Read(externalID string) (*Aws_ec2_transit_gateway_route, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_transit_gateway_route", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_transit_gateway_route{ Aws_ec2_transit_gateway_route_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_transit_gateway_routeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_transit_gateway_route", externalID)
}

type Aws_ec2_transit_gateway_route_table struct {

    Aws_ec2_transit_gateway_route_table_id *string `lyra:"ignore"`

    Default_association_route_table *bool

    Default_propagation_route_table *bool

    Tags *map[string]string

    Transit_gateway_id string

}

// Aws_ec2_transit_gateway_route_tableHandler ...
type Aws_ec2_transit_gateway_route_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_transit_gateway_route_tableHandler) Create(desired *Aws_ec2_transit_gateway_route_table) (*Aws_ec2_transit_gateway_route_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_transit_gateway_route_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_transit_gateway_route_tableHandler) Read(externalID string) (*Aws_ec2_transit_gateway_route_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_transit_gateway_route_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_transit_gateway_route_table{ Aws_ec2_transit_gateway_route_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_transit_gateway_route_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_transit_gateway_route_table", externalID)
}

type Aws_ec2_transit_gateway_route_table_association struct {

    Aws_ec2_transit_gateway_route_table_association_id *string `lyra:"ignore"`

    Resource_id *string

    Resource_type *string

    Transit_gateway_attachment_id string

    Transit_gateway_route_table_id string

}

// Aws_ec2_transit_gateway_route_table_associationHandler ...
type Aws_ec2_transit_gateway_route_table_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_transit_gateway_route_table_associationHandler) Create(desired *Aws_ec2_transit_gateway_route_table_association) (*Aws_ec2_transit_gateway_route_table_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_transit_gateway_route_table_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_transit_gateway_route_table_associationHandler) Read(externalID string) (*Aws_ec2_transit_gateway_route_table_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_transit_gateway_route_table_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_transit_gateway_route_table_association{ Aws_ec2_transit_gateway_route_table_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_transit_gateway_route_table_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_transit_gateway_route_table_association", externalID)
}

type Aws_ec2_transit_gateway_route_table_propagation struct {

    Aws_ec2_transit_gateway_route_table_propagation_id *string `lyra:"ignore"`

    Resource_id *string

    Resource_type *string

    Transit_gateway_attachment_id string

    Transit_gateway_route_table_id string

}

// Aws_ec2_transit_gateway_route_table_propagationHandler ...
type Aws_ec2_transit_gateway_route_table_propagationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_transit_gateway_route_table_propagationHandler) Create(desired *Aws_ec2_transit_gateway_route_table_propagation) (*Aws_ec2_transit_gateway_route_table_propagation, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_transit_gateway_route_table_propagation", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_transit_gateway_route_table_propagationHandler) Read(externalID string) (*Aws_ec2_transit_gateway_route_table_propagation, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_transit_gateway_route_table_propagation", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_transit_gateway_route_table_propagation{ Aws_ec2_transit_gateway_route_table_propagation_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_transit_gateway_route_table_propagationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_transit_gateway_route_table_propagation", externalID)
}

type Aws_ec2_transit_gateway_vpc_attachment struct {

    Aws_ec2_transit_gateway_vpc_attachment_id *string `lyra:"ignore"`

    Dns_support *string

    Ipv6_support *string

    Subnet_ids []string

    Tags *map[string]string

    Transit_gateway_default_route_table_association *bool

    Transit_gateway_default_route_table_propagation *bool

    Transit_gateway_id string

    Vpc_id string

    Vpc_owner_id *string

}

// Aws_ec2_transit_gateway_vpc_attachmentHandler ...
type Aws_ec2_transit_gateway_vpc_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ec2_transit_gateway_vpc_attachmentHandler) Create(desired *Aws_ec2_transit_gateway_vpc_attachment) (*Aws_ec2_transit_gateway_vpc_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ec2_transit_gateway_vpc_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ec2_transit_gateway_vpc_attachmentHandler) Read(externalID string) (*Aws_ec2_transit_gateway_vpc_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ec2_transit_gateway_vpc_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ec2_transit_gateway_vpc_attachment{ Aws_ec2_transit_gateway_vpc_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ec2_transit_gateway_vpc_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ec2_transit_gateway_vpc_attachment", externalID)
}

type Aws_ecr_lifecycle_policy struct {

    Aws_ecr_lifecycle_policy_id *string `lyra:"ignore"`

    Policy string

    Registry_id *string

    Repository string

}

// Aws_ecr_lifecycle_policyHandler ...
type Aws_ecr_lifecycle_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ecr_lifecycle_policyHandler) Create(desired *Aws_ecr_lifecycle_policy) (*Aws_ecr_lifecycle_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ecr_lifecycle_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ecr_lifecycle_policyHandler) Read(externalID string) (*Aws_ecr_lifecycle_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ecr_lifecycle_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ecr_lifecycle_policy{ Aws_ecr_lifecycle_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ecr_lifecycle_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ecr_lifecycle_policy", externalID)
}

type Aws_ecr_repository struct {

    Aws_ecr_repository_id *string `lyra:"ignore"`

    Arn *string

    Name string

    Registry_id *string

    Repository_url *string

    Tags *map[string]string

}

// Aws_ecr_repositoryHandler ...
type Aws_ecr_repositoryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ecr_repositoryHandler) Create(desired *Aws_ecr_repository) (*Aws_ecr_repository, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ecr_repository", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ecr_repositoryHandler) Read(externalID string) (*Aws_ecr_repository, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ecr_repository", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ecr_repository{ Aws_ecr_repository_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ecr_repositoryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ecr_repository", externalID)
}

type Aws_ecr_repository_policy struct {

    Aws_ecr_repository_policy_id *string `lyra:"ignore"`

    Policy string

    Registry_id *string

    Repository string

}

// Aws_ecr_repository_policyHandler ...
type Aws_ecr_repository_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ecr_repository_policyHandler) Create(desired *Aws_ecr_repository_policy) (*Aws_ecr_repository_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ecr_repository_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ecr_repository_policyHandler) Read(externalID string) (*Aws_ecr_repository_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ecr_repository_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ecr_repository_policy{ Aws_ecr_repository_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ecr_repository_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ecr_repository_policy", externalID)
}

type Aws_ecs_cluster struct {

    Aws_ecs_cluster_id *string `lyra:"ignore"`

    Arn *string

    Name string

    Tags *map[string]string

}

// Aws_ecs_clusterHandler ...
type Aws_ecs_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ecs_clusterHandler) Create(desired *Aws_ecs_cluster) (*Aws_ecs_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ecs_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ecs_clusterHandler) Read(externalID string) (*Aws_ecs_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ecs_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ecs_cluster{ Aws_ecs_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ecs_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ecs_cluster", externalID)
}

type Aws_ecs_service_deployment_controller_216 struct {

    Type *string

}

type Aws_ecs_service_load_balancer_217 struct {

    Container_name string

    Container_port int

    Elb_name *string

    Target_group_arn *string

}

type Aws_ecs_service_network_configuration_218 struct {

    Assign_public_ip *bool

    Security_groups *[]string

    Subnets []string

}

type Aws_ecs_service_ordered_placement_strategy_219 struct {

    Field *string

    Type string

}

type Aws_ecs_service_placement_constraints_220 struct {

    Expression *string

    Type string

}

type Aws_ecs_service_placement_strategy_221 struct {

    Field *string

    Type string

}

type Aws_ecs_service_service_registries_222 struct {

    Container_name *string

    Container_port *int

    Port *int

    Registry_arn string

}

type Aws_ecs_service struct {

    Aws_ecs_service_id *string `lyra:"ignore"`

    Cluster *string

    Deployment_controller *[]Aws_ecs_service_deployment_controller_216

    Deployment_maximum_percent *int

    Deployment_minimum_healthy_percent *int

    Desired_count *int

    Enable_ecs_managed_tags *bool

    Health_check_grace_period_seconds *int

    Iam_role *string

    Launch_type *string

    Load_balancer *[]Aws_ecs_service_load_balancer_217

    Name string

    Network_configuration *[]Aws_ecs_service_network_configuration_218

    Ordered_placement_strategy *[]Aws_ecs_service_ordered_placement_strategy_219

    Placement_constraints *[]Aws_ecs_service_placement_constraints_220

    Placement_strategy *[]Aws_ecs_service_placement_strategy_221

    Platform_version *string

    Propagate_tags *string

    Scheduling_strategy *string

    Service_registries *[]Aws_ecs_service_service_registries_222

    Tags *map[string]string

    Task_definition string

}

// Aws_ecs_serviceHandler ...
type Aws_ecs_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ecs_serviceHandler) Create(desired *Aws_ecs_service) (*Aws_ecs_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ecs_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ecs_serviceHandler) Read(externalID string) (*Aws_ecs_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ecs_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ecs_service{ Aws_ecs_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ecs_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ecs_service", externalID)
}

type Aws_ecs_task_definition_placement_constraints_223 struct {

    Expression *string

    Type string

}

type Aws_ecs_task_definition_volume_224_docker_volume_configuration_225 struct {

    Autoprovision *bool

    Driver *string

    Driver_opts *map[string]string

    Labels *map[string]string

    Scope *string

}

type Aws_ecs_task_definition_volume_224 struct {

    Docker_volume_configuration *[]Aws_ecs_task_definition_volume_224_docker_volume_configuration_225

    Host_path *string

    Name string

}

type Aws_ecs_task_definition struct {

    Aws_ecs_task_definition_id *string `lyra:"ignore"`

    Arn *string

    Container_definitions string

    Cpu *string

    Execution_role_arn *string

    Family string

    Ipc_mode *string

    Memory *string

    Network_mode *string

    Pid_mode *string

    Placement_constraints *[]Aws_ecs_task_definition_placement_constraints_223

    Requires_compatibilities *[]string

    Revision *int

    Tags *map[string]string

    Task_role_arn *string

    Volume *[]Aws_ecs_task_definition_volume_224

}

// Aws_ecs_task_definitionHandler ...
type Aws_ecs_task_definitionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ecs_task_definitionHandler) Create(desired *Aws_ecs_task_definition) (*Aws_ecs_task_definition, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ecs_task_definition", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ecs_task_definitionHandler) Read(externalID string) (*Aws_ecs_task_definition, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ecs_task_definition", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ecs_task_definition{ Aws_ecs_task_definition_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ecs_task_definitionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ecs_task_definition", externalID)
}

type Aws_efs_file_system struct {

    Aws_efs_file_system_id *string `lyra:"ignore"`

    Arn *string

    Creation_token *string

    Dns_name *string

    Encrypted *bool

    Kms_key_id *string

    Performance_mode *string

    Provisioned_throughput_in_mibps *float64

    Reference_name *string

    Tags *map[string]string

    Throughput_mode *string

}

// Aws_efs_file_systemHandler ...
type Aws_efs_file_systemHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_efs_file_systemHandler) Create(desired *Aws_efs_file_system) (*Aws_efs_file_system, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_efs_file_system", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_efs_file_systemHandler) Read(externalID string) (*Aws_efs_file_system, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_efs_file_system", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_efs_file_system{ Aws_efs_file_system_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_efs_file_systemHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_efs_file_system", externalID)
}

type Aws_efs_mount_target struct {

    Aws_efs_mount_target_id *string `lyra:"ignore"`

    Dns_name *string

    File_system_arn *string

    File_system_id string

    Ip_address *string

    Network_interface_id *string

    Security_groups *[]string

    Subnet_id string

}

// Aws_efs_mount_targetHandler ...
type Aws_efs_mount_targetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_efs_mount_targetHandler) Create(desired *Aws_efs_mount_target) (*Aws_efs_mount_target, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_efs_mount_target", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_efs_mount_targetHandler) Read(externalID string) (*Aws_efs_mount_target, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_efs_mount_target", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_efs_mount_target{ Aws_efs_mount_target_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_efs_mount_targetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_efs_mount_target", externalID)
}

type Aws_egress_only_internet_gateway struct {

    Aws_egress_only_internet_gateway_id *string `lyra:"ignore"`

    Vpc_id string

}

// Aws_egress_only_internet_gatewayHandler ...
type Aws_egress_only_internet_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_egress_only_internet_gatewayHandler) Create(desired *Aws_egress_only_internet_gateway) (*Aws_egress_only_internet_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_egress_only_internet_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_egress_only_internet_gatewayHandler) Read(externalID string) (*Aws_egress_only_internet_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_egress_only_internet_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_egress_only_internet_gateway{ Aws_egress_only_internet_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_egress_only_internet_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_egress_only_internet_gateway", externalID)
}

type Aws_eip struct {

    Aws_eip_id *string `lyra:"ignore"`

    Allocation_id *string

    Associate_with_private_ip *string

    Association_id *string

    Domain *string

    Instance *string

    Network_interface *string

    Private_ip *string

    Public_ip *string

    Public_ipv4_pool *string

    Tags *map[string]string

    Vpc *bool

}

// Aws_eipHandler ...
type Aws_eipHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_eipHandler) Create(desired *Aws_eip) (*Aws_eip, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_eip", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_eipHandler) Read(externalID string) (*Aws_eip, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_eip", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_eip{ Aws_eip_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_eipHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_eip", externalID)
}

type Aws_eip_association struct {

    Aws_eip_association_id *string `lyra:"ignore"`

    Allocation_id *string

    Allow_reassociation *bool

    Instance_id *string

    Network_interface_id *string

    Private_ip_address *string

    Public_ip *string

}

// Aws_eip_associationHandler ...
type Aws_eip_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_eip_associationHandler) Create(desired *Aws_eip_association) (*Aws_eip_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_eip_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_eip_associationHandler) Read(externalID string) (*Aws_eip_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_eip_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_eip_association{ Aws_eip_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_eip_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_eip_association", externalID)
}

type Aws_eks_cluster_certificate_authority_226 struct {

    Data *string

}

type Aws_eks_cluster_vpc_config_227 struct {

    Security_group_ids *[]string

    Subnet_ids []string

    Vpc_id *string

}

type Aws_eks_cluster struct {

    Aws_eks_cluster_id *string `lyra:"ignore"`

    Arn *string

    Certificate_authority *[]Aws_eks_cluster_certificate_authority_226

    Created_at *string

    Endpoint *string

    Name string

    Platform_version *string

    Role_arn string

    Version *string

    Vpc_config []Aws_eks_cluster_vpc_config_227

}

// Aws_eks_clusterHandler ...
type Aws_eks_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_eks_clusterHandler) Create(desired *Aws_eks_cluster) (*Aws_eks_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_eks_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_eks_clusterHandler) Read(externalID string) (*Aws_eks_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_eks_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_eks_cluster{ Aws_eks_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_eks_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_eks_cluster", externalID)
}

type Aws_elastic_beanstalk_application_appversion_lifecycle_228 struct {

    Delete_source_from_s3 *bool

    Max_age_in_days *int

    Max_count *int

    Service_role string

}

type Aws_elastic_beanstalk_application struct {

    Aws_elastic_beanstalk_application_id *string `lyra:"ignore"`

    Appversion_lifecycle *[]Aws_elastic_beanstalk_application_appversion_lifecycle_228

    Description *string

    Name string

}

// Aws_elastic_beanstalk_applicationHandler ...
type Aws_elastic_beanstalk_applicationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elastic_beanstalk_applicationHandler) Create(desired *Aws_elastic_beanstalk_application) (*Aws_elastic_beanstalk_application, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elastic_beanstalk_application", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elastic_beanstalk_applicationHandler) Read(externalID string) (*Aws_elastic_beanstalk_application, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elastic_beanstalk_application", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elastic_beanstalk_application{ Aws_elastic_beanstalk_application_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elastic_beanstalk_applicationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elastic_beanstalk_application", externalID)
}

type Aws_elastic_beanstalk_application_version struct {

    Aws_elastic_beanstalk_application_version_id *string `lyra:"ignore"`

    Application string

    Bucket string

    Description *string

    Force_delete *bool

    Key string

    Name string

}

// Aws_elastic_beanstalk_application_versionHandler ...
type Aws_elastic_beanstalk_application_versionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elastic_beanstalk_application_versionHandler) Create(desired *Aws_elastic_beanstalk_application_version) (*Aws_elastic_beanstalk_application_version, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elastic_beanstalk_application_version", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elastic_beanstalk_application_versionHandler) Read(externalID string) (*Aws_elastic_beanstalk_application_version, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elastic_beanstalk_application_version", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elastic_beanstalk_application_version{ Aws_elastic_beanstalk_application_version_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elastic_beanstalk_application_versionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elastic_beanstalk_application_version", externalID)
}

type Aws_elastic_beanstalk_configuration_template_setting_229 struct {

    Name string

    Namespace string

    Resource *string

    Value string

}

type Aws_elastic_beanstalk_configuration_template struct {

    Aws_elastic_beanstalk_configuration_template_id *string `lyra:"ignore"`

    Application string

    Description *string

    Environment_id *string

    Name string

    Setting *[]Aws_elastic_beanstalk_configuration_template_setting_229

    Solution_stack_name *string

}

// Aws_elastic_beanstalk_configuration_templateHandler ...
type Aws_elastic_beanstalk_configuration_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elastic_beanstalk_configuration_templateHandler) Create(desired *Aws_elastic_beanstalk_configuration_template) (*Aws_elastic_beanstalk_configuration_template, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elastic_beanstalk_configuration_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elastic_beanstalk_configuration_templateHandler) Read(externalID string) (*Aws_elastic_beanstalk_configuration_template, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elastic_beanstalk_configuration_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elastic_beanstalk_configuration_template{ Aws_elastic_beanstalk_configuration_template_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elastic_beanstalk_configuration_templateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elastic_beanstalk_configuration_template", externalID)
}

type Aws_elastic_beanstalk_environment_all_settings_230 struct {

    Name string

    Namespace string

    Resource *string

    Value string

}

type Aws_elastic_beanstalk_environment_setting_231 struct {

    Name string

    Namespace string

    Resource *string

    Value string

}

type Aws_elastic_beanstalk_environment struct {

    Aws_elastic_beanstalk_environment_id *string `lyra:"ignore"`

    All_settings *[]Aws_elastic_beanstalk_environment_all_settings_230

    Application string

    Arn *string

    Autoscaling_groups *[]string

    Cname *string

    Cname_prefix *string

    Description *string

    Instances *[]string

    Launch_configurations *[]string

    Load_balancers *[]string

    Name string

    Platform_arn *string

    Poll_interval *string

    Queues *[]string

    Setting *[]Aws_elastic_beanstalk_environment_setting_231

    Solution_stack_name *string

    Tags *map[string]string

    Template_name *string

    Tier *string

    Triggers *[]string

    Version_label *string

    Wait_for_ready_timeout *string

}

// Aws_elastic_beanstalk_environmentHandler ...
type Aws_elastic_beanstalk_environmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elastic_beanstalk_environmentHandler) Create(desired *Aws_elastic_beanstalk_environment) (*Aws_elastic_beanstalk_environment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elastic_beanstalk_environment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elastic_beanstalk_environmentHandler) Read(externalID string) (*Aws_elastic_beanstalk_environment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elastic_beanstalk_environment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elastic_beanstalk_environment{ Aws_elastic_beanstalk_environment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elastic_beanstalk_environmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elastic_beanstalk_environment", externalID)
}

type Aws_elasticache_cluster_cache_nodes_232 struct {

    Address *string

    Availability_zone *string

    Id *string

    Port *int

}

type Aws_elasticache_cluster struct {

    Aws_elasticache_cluster_id *string `lyra:"ignore"`

    Apply_immediately *bool

    Availability_zone *string

    Availability_zones *[]string

    Az_mode *string

    Cache_nodes *[]Aws_elasticache_cluster_cache_nodes_232

    Cluster_address *string

    Cluster_id string

    Configuration_endpoint *string

    Engine *string

    Engine_version *string

    Maintenance_window *string

    Node_type *string

    Notification_topic_arn *string

    Num_cache_nodes *int

    Parameter_group_name *string

    Port *int

    Preferred_availability_zones *[]string

    Replication_group_id *string

    Security_group_ids *[]string

    Security_group_names *[]string

    Snapshot_arns *[]string

    Snapshot_name *string

    Snapshot_retention_limit *int

    Snapshot_window *string

    Subnet_group_name *string

    Tags *map[string]string

}

// Aws_elasticache_clusterHandler ...
type Aws_elasticache_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elasticache_clusterHandler) Create(desired *Aws_elasticache_cluster) (*Aws_elasticache_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elasticache_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elasticache_clusterHandler) Read(externalID string) (*Aws_elasticache_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elasticache_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elasticache_cluster{ Aws_elasticache_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elasticache_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elasticache_cluster", externalID)
}

type Aws_elasticache_parameter_group_parameter_233 struct {

    Name string

    Value string

}

type Aws_elasticache_parameter_group struct {

    Aws_elasticache_parameter_group_id *string `lyra:"ignore"`

    Description *string

    Family string

    Name string

    Parameter *[]Aws_elasticache_parameter_group_parameter_233

}

// Aws_elasticache_parameter_groupHandler ...
type Aws_elasticache_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elasticache_parameter_groupHandler) Create(desired *Aws_elasticache_parameter_group) (*Aws_elasticache_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elasticache_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elasticache_parameter_groupHandler) Read(externalID string) (*Aws_elasticache_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elasticache_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elasticache_parameter_group{ Aws_elasticache_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elasticache_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elasticache_parameter_group", externalID)
}

type Aws_elasticache_replication_group_cluster_mode_234 struct {

    Num_node_groups int

    Replicas_per_node_group int

}

type Aws_elasticache_replication_group struct {

    Aws_elasticache_replication_group_id *string `lyra:"ignore"`

    Apply_immediately *bool

    At_rest_encryption_enabled *bool

    Auth_token *string

    Auto_minor_version_upgrade *bool

    Automatic_failover_enabled *bool

    Availability_zones *[]string

    Cluster_mode *[]Aws_elasticache_replication_group_cluster_mode_234

    Configuration_endpoint_address *string

    Engine *string

    Engine_version *string

    Maintenance_window *string

    Member_clusters *[]string

    Node_type *string

    Notification_topic_arn *string

    Number_cache_clusters *int

    Parameter_group_name *string

    Port *int

    Primary_endpoint_address *string

    Replication_group_description string

    Replication_group_id string

    Security_group_ids *[]string

    Security_group_names *[]string

    Snapshot_arns *[]string

    Snapshot_name *string

    Snapshot_retention_limit *int

    Snapshot_window *string

    Subnet_group_name *string

    Tags *map[string]string

    Transit_encryption_enabled *bool

}

// Aws_elasticache_replication_groupHandler ...
type Aws_elasticache_replication_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elasticache_replication_groupHandler) Create(desired *Aws_elasticache_replication_group) (*Aws_elasticache_replication_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elasticache_replication_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elasticache_replication_groupHandler) Read(externalID string) (*Aws_elasticache_replication_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elasticache_replication_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elasticache_replication_group{ Aws_elasticache_replication_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elasticache_replication_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elasticache_replication_group", externalID)
}

type Aws_elasticache_security_group struct {

    Aws_elasticache_security_group_id *string `lyra:"ignore"`

    Description *string

    Name string

    Security_group_names []string

}

// Aws_elasticache_security_groupHandler ...
type Aws_elasticache_security_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elasticache_security_groupHandler) Create(desired *Aws_elasticache_security_group) (*Aws_elasticache_security_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elasticache_security_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elasticache_security_groupHandler) Read(externalID string) (*Aws_elasticache_security_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elasticache_security_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elasticache_security_group{ Aws_elasticache_security_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elasticache_security_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elasticache_security_group", externalID)
}

type Aws_elasticache_subnet_group struct {

    Aws_elasticache_subnet_group_id *string `lyra:"ignore"`

    Description *string

    Name string

    Subnet_ids []string

}

// Aws_elasticache_subnet_groupHandler ...
type Aws_elasticache_subnet_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elasticache_subnet_groupHandler) Create(desired *Aws_elasticache_subnet_group) (*Aws_elasticache_subnet_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elasticache_subnet_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elasticache_subnet_groupHandler) Read(externalID string) (*Aws_elasticache_subnet_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elasticache_subnet_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elasticache_subnet_group{ Aws_elasticache_subnet_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elasticache_subnet_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elasticache_subnet_group", externalID)
}

type Aws_elasticsearch_domain_cluster_config_235 struct {

    Dedicated_master_count *int

    Dedicated_master_enabled *bool

    Dedicated_master_type *string

    Instance_count *int

    Instance_type *string

    Zone_awareness_enabled *bool

}

type Aws_elasticsearch_domain_cognito_options_236 struct {

    Enabled *bool

    Identity_pool_id string

    Role_arn string

    User_pool_id string

}

type Aws_elasticsearch_domain_ebs_options_237 struct {

    Ebs_enabled bool

    Iops *int

    Volume_size *int

    Volume_type *string

}

type Aws_elasticsearch_domain_encrypt_at_rest_238 struct {

    Enabled bool

    Kms_key_id *string

}

type Aws_elasticsearch_domain_log_publishing_options_239 struct {

    Cloudwatch_log_group_arn string

    Enabled *bool

    Log_type string

}

type Aws_elasticsearch_domain_node_to_node_encryption_240 struct {

    Enabled bool

}

type Aws_elasticsearch_domain_snapshot_options_241 struct {

    Automated_snapshot_start_hour int

}

type Aws_elasticsearch_domain_vpc_options_242 struct {

    Availability_zones *[]string

    Security_group_ids *[]string

    Subnet_ids *[]string

    Vpc_id *string

}

type Aws_elasticsearch_domain struct {

    Aws_elasticsearch_domain_id *string `lyra:"ignore"`

    Access_policies *string

    Advanced_options *map[string]string

    Arn *string

    Cluster_config *[]Aws_elasticsearch_domain_cluster_config_235

    Cognito_options *[]Aws_elasticsearch_domain_cognito_options_236

    Domain_id *string

    Domain_name string

    Ebs_options *[]Aws_elasticsearch_domain_ebs_options_237

    Elasticsearch_version *string

    Encrypt_at_rest *[]Aws_elasticsearch_domain_encrypt_at_rest_238

    Endpoint *string

    Kibana_endpoint *string

    Log_publishing_options *[]Aws_elasticsearch_domain_log_publishing_options_239

    Node_to_node_encryption *[]Aws_elasticsearch_domain_node_to_node_encryption_240

    Snapshot_options *[]Aws_elasticsearch_domain_snapshot_options_241

    Tags *map[string]string

    Vpc_options *[]Aws_elasticsearch_domain_vpc_options_242

}

// Aws_elasticsearch_domainHandler ...
type Aws_elasticsearch_domainHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elasticsearch_domainHandler) Create(desired *Aws_elasticsearch_domain) (*Aws_elasticsearch_domain, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elasticsearch_domain", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elasticsearch_domainHandler) Read(externalID string) (*Aws_elasticsearch_domain, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elasticsearch_domain", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elasticsearch_domain{ Aws_elasticsearch_domain_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elasticsearch_domainHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elasticsearch_domain", externalID)
}

type Aws_elasticsearch_domain_policy struct {

    Aws_elasticsearch_domain_policy_id *string `lyra:"ignore"`

    Access_policies string

    Domain_name string

}

// Aws_elasticsearch_domain_policyHandler ...
type Aws_elasticsearch_domain_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elasticsearch_domain_policyHandler) Create(desired *Aws_elasticsearch_domain_policy) (*Aws_elasticsearch_domain_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elasticsearch_domain_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elasticsearch_domain_policyHandler) Read(externalID string) (*Aws_elasticsearch_domain_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elasticsearch_domain_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elasticsearch_domain_policy{ Aws_elasticsearch_domain_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elasticsearch_domain_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elasticsearch_domain_policy", externalID)
}

type Aws_elastictranscoder_pipeline_content_config_243 struct {

    Bucket *string

    Storage_class *string

}

type Aws_elastictranscoder_pipeline_content_config_permissions_244 struct {

    Access *[]string

    Grantee *string

    Grantee_type *string

}

type Aws_elastictranscoder_pipeline_notifications_245 struct {

    Completed *string

    Error *string

    Progressing *string

    Warning *string

}

type Aws_elastictranscoder_pipeline_thumbnail_config_246 struct {

    Bucket *string

    Storage_class *string

}

type Aws_elastictranscoder_pipeline_thumbnail_config_permissions_247 struct {

    Access *[]string

    Grantee *string

    Grantee_type *string

}

type Aws_elastictranscoder_pipeline struct {

    Aws_elastictranscoder_pipeline_id *string `lyra:"ignore"`

    Arn *string

    Aws_kms_key_arn *string

    Content_config *[]Aws_elastictranscoder_pipeline_content_config_243

    Content_config_permissions *[]Aws_elastictranscoder_pipeline_content_config_permissions_244

    Input_bucket string

    Name *string

    Notifications *[]Aws_elastictranscoder_pipeline_notifications_245

    Output_bucket *string

    Role string

    Thumbnail_config *[]Aws_elastictranscoder_pipeline_thumbnail_config_246

    Thumbnail_config_permissions *[]Aws_elastictranscoder_pipeline_thumbnail_config_permissions_247

}

// Aws_elastictranscoder_pipelineHandler ...
type Aws_elastictranscoder_pipelineHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elastictranscoder_pipelineHandler) Create(desired *Aws_elastictranscoder_pipeline) (*Aws_elastictranscoder_pipeline, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elastictranscoder_pipeline", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elastictranscoder_pipelineHandler) Read(externalID string) (*Aws_elastictranscoder_pipeline, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elastictranscoder_pipeline", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elastictranscoder_pipeline{ Aws_elastictranscoder_pipeline_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elastictranscoder_pipelineHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elastictranscoder_pipeline", externalID)
}

type Aws_elastictranscoder_preset_audio_248 struct {

    Audio_packing_mode *string

    Bit_rate *string

    Channels *string

    Codec *string

    Sample_rate *string

}

type Aws_elastictranscoder_preset_audio_codec_options_249 struct {

    Bit_depth *string

    Bit_order *string

    Profile *string

    Signed *string

}

type Aws_elastictranscoder_preset_thumbnails_250 struct {

    Aspect_ratio *string

    Format *string

    Interval *string

    Max_height *string

    Max_width *string

    Padding_policy *string

    Resolution *string

    Sizing_policy *string

}

type Aws_elastictranscoder_preset_video_251 struct {

    Aspect_ratio *string

    Bit_rate *string

    Codec *string

    Display_aspect_ratio *string

    Fixed_gop *string

    Frame_rate *string

    Keyframes_max_dist *string

    Max_frame_rate *string

    Max_height *string

    Max_width *string

    Padding_policy *string

    Resolution *string

    Sizing_policy *string

}

type Aws_elastictranscoder_preset_video_watermarks_252 struct {

    Horizontal_align *string

    Horizontal_offset *string

    Id *string

    Max_height *string

    Max_width *string

    Opacity *string

    Sizing_policy *string

    Target *string

    Vertical_align *string

    Vertical_offset *string

}

type Aws_elastictranscoder_preset struct {

    Aws_elastictranscoder_preset_id *string `lyra:"ignore"`

    Arn *string

    Audio *[]Aws_elastictranscoder_preset_audio_248

    Audio_codec_options *[]Aws_elastictranscoder_preset_audio_codec_options_249

    Container string

    Description *string

    Name *string

    Thumbnails *[]Aws_elastictranscoder_preset_thumbnails_250

    Type *string

    Video *[]Aws_elastictranscoder_preset_video_251

    Video_codec_options *map[string]string

    Video_watermarks *[]Aws_elastictranscoder_preset_video_watermarks_252

}

// Aws_elastictranscoder_presetHandler ...
type Aws_elastictranscoder_presetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elastictranscoder_presetHandler) Create(desired *Aws_elastictranscoder_preset) (*Aws_elastictranscoder_preset, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elastictranscoder_preset", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elastictranscoder_presetHandler) Read(externalID string) (*Aws_elastictranscoder_preset, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elastictranscoder_preset", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elastictranscoder_preset{ Aws_elastictranscoder_preset_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elastictranscoder_presetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elastictranscoder_preset", externalID)
}

type Aws_elb_access_logs_253 struct {

    Bucket string

    Bucket_prefix *string

    Enabled *bool

    Interval *int

}

type Aws_elb_health_check_254 struct {

    Healthy_threshold int

    Interval int

    Target string

    Timeout int

    Unhealthy_threshold int

}

type Aws_elb_listener_255 struct {

    Instance_port int

    Instance_protocol string

    Lb_port int

    Lb_protocol string

    Ssl_certificate_id *string

}

type Aws_elb struct {

    Aws_elb_id *string `lyra:"ignore"`

    Access_logs *[]Aws_elb_access_logs_253

    Arn *string

    Availability_zones *[]string

    Connection_draining *bool

    Connection_draining_timeout *int

    Cross_zone_load_balancing *bool

    Dns_name *string

    Health_check *[]Aws_elb_health_check_254

    Idle_timeout *int

    Instances *[]string

    Internal *bool

    Listener []Aws_elb_listener_255

    Name *string

    Name_prefix *string

    Security_groups *[]string

    Source_security_group *string

    Source_security_group_id *string

    Subnets *[]string

    Tags *map[string]string

    Zone_id *string

}

// Aws_elbHandler ...
type Aws_elbHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elbHandler) Create(desired *Aws_elb) (*Aws_elb, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elb", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elbHandler) Read(externalID string) (*Aws_elb, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elb", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elb{ Aws_elb_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elbHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elb", externalID)
}

type Aws_elb_attachment struct {

    Aws_elb_attachment_id *string `lyra:"ignore"`

    Elb string

    Instance string

}

// Aws_elb_attachmentHandler ...
type Aws_elb_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_elb_attachmentHandler) Create(desired *Aws_elb_attachment) (*Aws_elb_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_elb_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_elb_attachmentHandler) Read(externalID string) (*Aws_elb_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_elb_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_elb_attachment{ Aws_elb_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_elb_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_elb_attachment", externalID)
}

type Aws_emr_cluster_bootstrap_action_256 struct {

    Args *[]string

    Name string

    Path string

}

type Aws_emr_cluster_ec2_attributes_257 struct {

    Additional_master_security_groups *string

    Additional_slave_security_groups *string

    Emr_managed_master_security_group *string

    Emr_managed_slave_security_group *string

    Instance_profile string

    Key_name *string

    Service_access_security_group *string

    Subnet_id *string

}

type Aws_emr_cluster_instance_group_258_ebs_config_259 struct {

    Iops *int

    Size int

    Type string

    Volumes_per_instance *int

}

type Aws_emr_cluster_instance_group_258 struct {

    Autoscaling_policy *string

    Bid_price *string

    Ebs_config *[]Aws_emr_cluster_instance_group_258_ebs_config_259

    Id *string

    Instance_count *int

    Instance_role string

    Instance_type string

    Name *string

}

type Aws_emr_cluster_kerberos_attributes_260 struct {

    Ad_domain_join_password *string

    Ad_domain_join_user *string

    Cross_realm_trust_principal_password *string

    Kdc_admin_password string

    Realm string

}

type Aws_emr_cluster_step_261_hadoop_jar_step_262 struct {

    Args *[]string

    Jar string

    Main_class *string

    Properties *map[string]string

}

type Aws_emr_cluster_step_261 struct {

    Action_on_failure string

    Hadoop_jar_step []Aws_emr_cluster_step_261_hadoop_jar_step_262

    Name string

}

type Aws_emr_cluster struct {

    Aws_emr_cluster_id *string `lyra:"ignore"`

    Additional_info *string

    Applications *[]string

    Autoscaling_role *string

    Bootstrap_action *[]Aws_emr_cluster_bootstrap_action_256

    Cluster_state *string

    Configurations *string

    Configurations_json *string

    Core_instance_count *int

    Core_instance_type *string

    Custom_ami_id *string

    Ebs_root_volume_size *int

    Ec2_attributes *[]Aws_emr_cluster_ec2_attributes_257

    Instance_group *[]Aws_emr_cluster_instance_group_258

    Keep_job_flow_alive_when_no_steps *bool

    Kerberos_attributes *[]Aws_emr_cluster_kerberos_attributes_260

    Log_uri *string

    Master_instance_type *string

    Master_public_dns *string

    Name string

    Release_label string

    Scale_down_behavior *string

    Security_configuration *string

    Service_role string

    Step *[]Aws_emr_cluster_step_261

    Tags *map[string]string

    Termination_protection *bool

    Visible_to_all_users *bool

}

// Aws_emr_clusterHandler ...
type Aws_emr_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_emr_clusterHandler) Create(desired *Aws_emr_cluster) (*Aws_emr_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_emr_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_emr_clusterHandler) Read(externalID string) (*Aws_emr_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_emr_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_emr_cluster{ Aws_emr_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_emr_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_emr_cluster", externalID)
}

type Aws_emr_instance_group_ebs_config_263 struct {

    Iops *int

    Size int

    Type string

    Volumes_per_instance *int

}

type Aws_emr_instance_group struct {

    Aws_emr_instance_group_id *string `lyra:"ignore"`

    Cluster_id string

    Ebs_config *[]Aws_emr_instance_group_ebs_config_263

    Ebs_optimized *bool

    Instance_count *int

    Instance_type string

    Name *string

    Running_instance_count *int

    Status *string

}

// Aws_emr_instance_groupHandler ...
type Aws_emr_instance_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_emr_instance_groupHandler) Create(desired *Aws_emr_instance_group) (*Aws_emr_instance_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_emr_instance_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_emr_instance_groupHandler) Read(externalID string) (*Aws_emr_instance_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_emr_instance_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_emr_instance_group{ Aws_emr_instance_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_emr_instance_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_emr_instance_group", externalID)
}

type Aws_emr_security_configuration struct {

    Aws_emr_security_configuration_id *string `lyra:"ignore"`

    Configuration string

    Creation_date *string

    Name *string

    Name_prefix *string

}

// Aws_emr_security_configurationHandler ...
type Aws_emr_security_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_emr_security_configurationHandler) Create(desired *Aws_emr_security_configuration) (*Aws_emr_security_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_emr_security_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_emr_security_configurationHandler) Read(externalID string) (*Aws_emr_security_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_emr_security_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_emr_security_configuration{ Aws_emr_security_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_emr_security_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_emr_security_configuration", externalID)
}

type Aws_flow_log struct {

    Aws_flow_log_id *string `lyra:"ignore"`

    Eni_id *string

    Iam_role_arn *string

    Log_destination *string

    Log_destination_type *string

    Log_group_name *string

    Subnet_id *string

    Traffic_type string

    Vpc_id *string

}

// Aws_flow_logHandler ...
type Aws_flow_logHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_flow_logHandler) Create(desired *Aws_flow_log) (*Aws_flow_log, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_flow_log", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_flow_logHandler) Read(externalID string) (*Aws_flow_log, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_flow_log", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_flow_log{ Aws_flow_log_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_flow_logHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_flow_log", externalID)
}

type Aws_gamelift_alias_routing_strategy_264 struct {

    Fleet_id *string

    Message *string

    Type string

}

type Aws_gamelift_alias struct {

    Aws_gamelift_alias_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Name string

    Routing_strategy []Aws_gamelift_alias_routing_strategy_264

}

// Aws_gamelift_aliasHandler ...
type Aws_gamelift_aliasHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_gamelift_aliasHandler) Create(desired *Aws_gamelift_alias) (*Aws_gamelift_alias, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_gamelift_alias", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_gamelift_aliasHandler) Read(externalID string) (*Aws_gamelift_alias, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_gamelift_alias", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_gamelift_alias{ Aws_gamelift_alias_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_gamelift_aliasHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_gamelift_alias", externalID)
}

type Aws_gamelift_build_storage_location_265 struct {

    Bucket string

    Key string

    Role_arn string

}

type Aws_gamelift_build struct {

    Aws_gamelift_build_id *string `lyra:"ignore"`

    Name string

    Operating_system string

    Storage_location []Aws_gamelift_build_storage_location_265

    Version *string

}

// Aws_gamelift_buildHandler ...
type Aws_gamelift_buildHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_gamelift_buildHandler) Create(desired *Aws_gamelift_build) (*Aws_gamelift_build, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_gamelift_build", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_gamelift_buildHandler) Read(externalID string) (*Aws_gamelift_build, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_gamelift_build", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_gamelift_build{ Aws_gamelift_build_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_gamelift_buildHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_gamelift_build", externalID)
}

type Aws_gamelift_fleet_ec2_inbound_permission_266 struct {

    From_port int

    Ip_range string

    Protocol string

    To_port int

}

type Aws_gamelift_fleet_resource_creation_limit_policy_267 struct {

    New_game_sessions_per_creator *int

    Policy_period_in_minutes *int

}

type Aws_gamelift_fleet_runtime_configuration_268_server_process_269 struct {

    Concurrent_executions int

    Launch_path string

    Parameters *string

}

type Aws_gamelift_fleet_runtime_configuration_268 struct {

    Game_session_activation_timeout_seconds *int

    Max_concurrent_game_session_activations *int

    Server_process *[]Aws_gamelift_fleet_runtime_configuration_268_server_process_269

}

type Aws_gamelift_fleet struct {

    Aws_gamelift_fleet_id *string `lyra:"ignore"`

    Arn *string

    Build_id string

    Description *string

    Ec2_inbound_permission *[]Aws_gamelift_fleet_ec2_inbound_permission_266

    Ec2_instance_type string

    Log_paths *[]string

    Metric_groups *[]string

    Name string

    New_game_session_protection_policy *string

    Operating_system *string

    Resource_creation_limit_policy *[]Aws_gamelift_fleet_resource_creation_limit_policy_267

    Runtime_configuration *[]Aws_gamelift_fleet_runtime_configuration_268

}

// Aws_gamelift_fleetHandler ...
type Aws_gamelift_fleetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_gamelift_fleetHandler) Create(desired *Aws_gamelift_fleet) (*Aws_gamelift_fleet, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_gamelift_fleet", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_gamelift_fleetHandler) Read(externalID string) (*Aws_gamelift_fleet, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_gamelift_fleet", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_gamelift_fleet{ Aws_gamelift_fleet_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_gamelift_fleetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_gamelift_fleet", externalID)
}

type Aws_gamelift_game_session_queue_player_latency_policy_270 struct {

    Maximum_individual_player_latency_milliseconds int

    Policy_duration_seconds *int

}

type Aws_gamelift_game_session_queue struct {

    Aws_gamelift_game_session_queue_id *string `lyra:"ignore"`

    Arn *string

    Destinations *[]string

    Name string

    Player_latency_policy *[]Aws_gamelift_game_session_queue_player_latency_policy_270

    Timeout_in_seconds *int

}

// Aws_gamelift_game_session_queueHandler ...
type Aws_gamelift_game_session_queueHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_gamelift_game_session_queueHandler) Create(desired *Aws_gamelift_game_session_queue) (*Aws_gamelift_game_session_queue, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_gamelift_game_session_queue", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_gamelift_game_session_queueHandler) Read(externalID string) (*Aws_gamelift_game_session_queue, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_gamelift_game_session_queue", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_gamelift_game_session_queue{ Aws_gamelift_game_session_queue_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_gamelift_game_session_queueHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_gamelift_game_session_queue", externalID)
}

type Aws_glacier_vault_notification_271 struct {

    Events []string

    Sns_topic string

}

type Aws_glacier_vault struct {

    Aws_glacier_vault_id *string `lyra:"ignore"`

    Access_policy *string

    Arn *string

    Location *string

    Name string

    Notification *[]Aws_glacier_vault_notification_271

    Tags *map[string]string

}

// Aws_glacier_vaultHandler ...
type Aws_glacier_vaultHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glacier_vaultHandler) Create(desired *Aws_glacier_vault) (*Aws_glacier_vault, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glacier_vault", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glacier_vaultHandler) Read(externalID string) (*Aws_glacier_vault, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glacier_vault", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glacier_vault{ Aws_glacier_vault_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glacier_vaultHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glacier_vault", externalID)
}

type Aws_glacier_vault_lock struct {

    Aws_glacier_vault_lock_id *string `lyra:"ignore"`

    Complete_lock bool

    Ignore_deletion_error *bool

    Policy string

    Vault_name string

}

// Aws_glacier_vault_lockHandler ...
type Aws_glacier_vault_lockHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glacier_vault_lockHandler) Create(desired *Aws_glacier_vault_lock) (*Aws_glacier_vault_lock, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glacier_vault_lock", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glacier_vault_lockHandler) Read(externalID string) (*Aws_glacier_vault_lock, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glacier_vault_lock", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glacier_vault_lock{ Aws_glacier_vault_lock_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glacier_vault_lockHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glacier_vault_lock", externalID)
}

type Aws_globalaccelerator_accelerator_attributes_272 struct {

    Flow_logs_enabled *bool

    Flow_logs_s3_bucket *string

    Flow_logs_s3_prefix *string

}

type Aws_globalaccelerator_accelerator_ip_sets_273 struct {

    Ip_addresses *[]string

    Ip_family *string

}

type Aws_globalaccelerator_accelerator struct {

    Aws_globalaccelerator_accelerator_id *string `lyra:"ignore"`

    Attributes *[]Aws_globalaccelerator_accelerator_attributes_272

    Enabled *bool

    Ip_address_type *string

    Ip_sets *[]Aws_globalaccelerator_accelerator_ip_sets_273

    Name string

}

// Aws_globalaccelerator_acceleratorHandler ...
type Aws_globalaccelerator_acceleratorHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_globalaccelerator_acceleratorHandler) Create(desired *Aws_globalaccelerator_accelerator) (*Aws_globalaccelerator_accelerator, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_globalaccelerator_accelerator", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_globalaccelerator_acceleratorHandler) Read(externalID string) (*Aws_globalaccelerator_accelerator, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_globalaccelerator_accelerator", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_globalaccelerator_accelerator{ Aws_globalaccelerator_accelerator_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_globalaccelerator_acceleratorHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_globalaccelerator_accelerator", externalID)
}

type Aws_glue_catalog_database struct {

    Aws_glue_catalog_database_id *string `lyra:"ignore"`

    Catalog_id *string

    Description *string

    Location_uri *string

    Name string

    Parameters *map[string]string

}

// Aws_glue_catalog_databaseHandler ...
type Aws_glue_catalog_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_catalog_databaseHandler) Create(desired *Aws_glue_catalog_database) (*Aws_glue_catalog_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_catalog_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_catalog_databaseHandler) Read(externalID string) (*Aws_glue_catalog_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_catalog_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_catalog_database{ Aws_glue_catalog_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_catalog_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_catalog_database", externalID)
}

type Aws_glue_catalog_table_partition_keys_274 struct {

    Comment *string

    Name string

    Type *string

}

type Aws_glue_catalog_table_storage_descriptor_275_columns_276 struct {

    Comment *string

    Name string

    Type *string

}

type Aws_glue_catalog_table_storage_descriptor_275_ser_de_info_277 struct {

    Name *string

    Parameters *map[string]string

    Serialization_library *string

}

type Aws_glue_catalog_table_storage_descriptor_275_skewed_info_278 struct {

    Skewed_column_names *[]string

    Skewed_column_value_location_maps *map[string]string

    Skewed_column_values *[]string

}

type Aws_glue_catalog_table_storage_descriptor_275_sort_columns_279 struct {

    Column string

    Sort_order int

}

type Aws_glue_catalog_table_storage_descriptor_275 struct {

    Bucket_columns *[]string

    Columns *[]Aws_glue_catalog_table_storage_descriptor_275_columns_276

    Compressed *bool

    Input_format *string

    Location *string

    Number_of_buckets *int

    Output_format *string

    Parameters *map[string]string

    Ser_de_info *[]Aws_glue_catalog_table_storage_descriptor_275_ser_de_info_277

    Skewed_info *[]Aws_glue_catalog_table_storage_descriptor_275_skewed_info_278

    Sort_columns *[]Aws_glue_catalog_table_storage_descriptor_275_sort_columns_279

    Stored_as_sub_directories *bool

}

type Aws_glue_catalog_table struct {

    Aws_glue_catalog_table_id *string `lyra:"ignore"`

    Catalog_id *string

    Database_name string

    Description *string

    Name string

    Owner *string

    Parameters *map[string]string

    Partition_keys *[]Aws_glue_catalog_table_partition_keys_274

    Retention *int

    Storage_descriptor *[]Aws_glue_catalog_table_storage_descriptor_275

    Table_type *string

    View_expanded_text *string

    View_original_text *string

}

// Aws_glue_catalog_tableHandler ...
type Aws_glue_catalog_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_catalog_tableHandler) Create(desired *Aws_glue_catalog_table) (*Aws_glue_catalog_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_catalog_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_catalog_tableHandler) Read(externalID string) (*Aws_glue_catalog_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_catalog_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_catalog_table{ Aws_glue_catalog_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_catalog_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_catalog_table", externalID)
}

type Aws_glue_classifier_grok_classifier_280 struct {

    Classification string

    Custom_patterns *string

    Grok_pattern string

}

type Aws_glue_classifier_json_classifier_281 struct {

    Json_path string

}

type Aws_glue_classifier_xml_classifier_282 struct {

    Classification string

    Row_tag string

}

type Aws_glue_classifier struct {

    Aws_glue_classifier_id *string `lyra:"ignore"`

    Grok_classifier *[]Aws_glue_classifier_grok_classifier_280

    Json_classifier *[]Aws_glue_classifier_json_classifier_281

    Name string

    Xml_classifier *[]Aws_glue_classifier_xml_classifier_282

}

// Aws_glue_classifierHandler ...
type Aws_glue_classifierHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_classifierHandler) Create(desired *Aws_glue_classifier) (*Aws_glue_classifier, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_classifier", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_classifierHandler) Read(externalID string) (*Aws_glue_classifier, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_classifier", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_classifier{ Aws_glue_classifier_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_classifierHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_classifier", externalID)
}

type Aws_glue_connection_physical_connection_requirements_283 struct {

    Availability_zone *string

    Security_group_id_list *[]string

    Subnet_id *string

}

type Aws_glue_connection struct {

    Aws_glue_connection_id *string `lyra:"ignore"`

    Catalog_id *string

    Connection_properties map[string]string

    Connection_type *string

    Description *string

    Match_criteria *[]string

    Name string

    Physical_connection_requirements *[]Aws_glue_connection_physical_connection_requirements_283

}

// Aws_glue_connectionHandler ...
type Aws_glue_connectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_connectionHandler) Create(desired *Aws_glue_connection) (*Aws_glue_connection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_connection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_connectionHandler) Read(externalID string) (*Aws_glue_connection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_connection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_connection{ Aws_glue_connection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_connectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_connection", externalID)
}

type Aws_glue_crawler_dynamodb_target_284 struct {

    Path string

}

type Aws_glue_crawler_jdbc_target_285 struct {

    Connection_name string

    Exclusions *[]string

    Path string

}

type Aws_glue_crawler_s3_target_286 struct {

    Exclusions *[]string

    Path string

}

type Aws_glue_crawler_schema_change_policy_287 struct {

    Delete_behavior *string

    Update_behavior *string

}

type Aws_glue_crawler struct {

    Aws_glue_crawler_id *string `lyra:"ignore"`

    Classifiers *[]string

    Configuration *string

    Database_name string

    Description *string

    Dynamodb_target *[]Aws_glue_crawler_dynamodb_target_284

    Jdbc_target *[]Aws_glue_crawler_jdbc_target_285

    Name string

    Role string

    S3_target *[]Aws_glue_crawler_s3_target_286

    Schedule *string

    Schema_change_policy *[]Aws_glue_crawler_schema_change_policy_287

    Security_configuration *string

    Table_prefix *string

}

// Aws_glue_crawlerHandler ...
type Aws_glue_crawlerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_crawlerHandler) Create(desired *Aws_glue_crawler) (*Aws_glue_crawler, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_crawler", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_crawlerHandler) Read(externalID string) (*Aws_glue_crawler, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_crawler", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_crawler{ Aws_glue_crawler_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_crawlerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_crawler", externalID)
}

type Aws_glue_job_command_288 struct {

    Name *string

    Script_location string

}

type Aws_glue_job_execution_property_289 struct {

    Max_concurrent_runs *int

}

type Aws_glue_job struct {

    Aws_glue_job_id *string `lyra:"ignore"`

    Allocated_capacity *int

    Command []Aws_glue_job_command_288

    Connections *[]string

    Default_arguments *map[string]string

    Description *string

    Execution_property *[]Aws_glue_job_execution_property_289

    Max_retries *int

    Name string

    Role_arn string

    Security_configuration *string

    Timeout *int

}

// Aws_glue_jobHandler ...
type Aws_glue_jobHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_jobHandler) Create(desired *Aws_glue_job) (*Aws_glue_job, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_job", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_jobHandler) Read(externalID string) (*Aws_glue_job, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_job", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_job{ Aws_glue_job_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_jobHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_job", externalID)
}

type Aws_glue_security_configuration_encryption_configuration_290_cloudwatch_encryption_291 struct {

    Cloudwatch_encryption_mode *string

    Kms_key_arn *string

}

type Aws_glue_security_configuration_encryption_configuration_290_job_bookmarks_encryption_292 struct {

    Job_bookmarks_encryption_mode *string

    Kms_key_arn *string

}

type Aws_glue_security_configuration_encryption_configuration_290_s3_encryption_293 struct {

    Kms_key_arn *string

    S3_encryption_mode *string

}

type Aws_glue_security_configuration_encryption_configuration_290 struct {

    Cloudwatch_encryption []Aws_glue_security_configuration_encryption_configuration_290_cloudwatch_encryption_291

    Job_bookmarks_encryption []Aws_glue_security_configuration_encryption_configuration_290_job_bookmarks_encryption_292

    S3_encryption []Aws_glue_security_configuration_encryption_configuration_290_s3_encryption_293

}

type Aws_glue_security_configuration struct {

    Aws_glue_security_configuration_id *string `lyra:"ignore"`

    Encryption_configuration []Aws_glue_security_configuration_encryption_configuration_290

    Name string

}

// Aws_glue_security_configurationHandler ...
type Aws_glue_security_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_security_configurationHandler) Create(desired *Aws_glue_security_configuration) (*Aws_glue_security_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_security_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_security_configurationHandler) Read(externalID string) (*Aws_glue_security_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_security_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_security_configuration{ Aws_glue_security_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_security_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_security_configuration", externalID)
}

type Aws_glue_trigger_actions_294 struct {

    Arguments *map[string]string

    Job_name string

    Timeout *int

}

type Aws_glue_trigger_predicate_295_conditions_296 struct {

    Job_name string

    Logical_operator *string

    State string

}

type Aws_glue_trigger_predicate_295 struct {

    Conditions []Aws_glue_trigger_predicate_295_conditions_296

    Logical *string

}

type Aws_glue_trigger struct {

    Aws_glue_trigger_id *string `lyra:"ignore"`

    Actions []Aws_glue_trigger_actions_294

    Description *string

    Enabled *bool

    Name string

    Predicate *[]Aws_glue_trigger_predicate_295

    Schedule *string

    Type string

}

// Aws_glue_triggerHandler ...
type Aws_glue_triggerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_glue_triggerHandler) Create(desired *Aws_glue_trigger) (*Aws_glue_trigger, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_glue_trigger", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_glue_triggerHandler) Read(externalID string) (*Aws_glue_trigger, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_glue_trigger", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_glue_trigger{ Aws_glue_trigger_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_glue_triggerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_glue_trigger", externalID)
}

type Aws_guardduty_detector struct {

    Aws_guardduty_detector_id *string `lyra:"ignore"`

    Account_id *string

    Enable *bool

    Finding_publishing_frequency *string

}

// Aws_guardduty_detectorHandler ...
type Aws_guardduty_detectorHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_guardduty_detectorHandler) Create(desired *Aws_guardduty_detector) (*Aws_guardduty_detector, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_guardduty_detector", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_guardduty_detectorHandler) Read(externalID string) (*Aws_guardduty_detector, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_guardduty_detector", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_guardduty_detector{ Aws_guardduty_detector_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_guardduty_detectorHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_guardduty_detector", externalID)
}

type Aws_guardduty_ipset struct {

    Aws_guardduty_ipset_id *string `lyra:"ignore"`

    Activate bool

    Detector_id string

    Format string

    Location string

    Name string

}

// Aws_guardduty_ipsetHandler ...
type Aws_guardduty_ipsetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_guardduty_ipsetHandler) Create(desired *Aws_guardduty_ipset) (*Aws_guardduty_ipset, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_guardduty_ipset", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_guardduty_ipsetHandler) Read(externalID string) (*Aws_guardduty_ipset, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_guardduty_ipset", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_guardduty_ipset{ Aws_guardduty_ipset_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_guardduty_ipsetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_guardduty_ipset", externalID)
}

type Aws_guardduty_member struct {

    Aws_guardduty_member_id *string `lyra:"ignore"`

    Account_id string

    Detector_id string

    Disable_email_notification *bool

    Email string

    Invitation_message *string

    Invite *bool

    Relationship_status *string

}

// Aws_guardduty_memberHandler ...
type Aws_guardduty_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_guardduty_memberHandler) Create(desired *Aws_guardduty_member) (*Aws_guardduty_member, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_guardduty_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_guardduty_memberHandler) Read(externalID string) (*Aws_guardduty_member, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_guardduty_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_guardduty_member{ Aws_guardduty_member_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_guardduty_memberHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_guardduty_member", externalID)
}

type Aws_guardduty_threatintelset struct {

    Aws_guardduty_threatintelset_id *string `lyra:"ignore"`

    Activate bool

    Detector_id string

    Format string

    Location string

    Name string

}

// Aws_guardduty_threatintelsetHandler ...
type Aws_guardduty_threatintelsetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_guardduty_threatintelsetHandler) Create(desired *Aws_guardduty_threatintelset) (*Aws_guardduty_threatintelset, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_guardduty_threatintelset", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_guardduty_threatintelsetHandler) Read(externalID string) (*Aws_guardduty_threatintelset, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_guardduty_threatintelset", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_guardduty_threatintelset{ Aws_guardduty_threatintelset_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_guardduty_threatintelsetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_guardduty_threatintelset", externalID)
}

type Aws_iam_access_key struct {

    Aws_iam_access_key_id *string `lyra:"ignore"`

    Encrypted_secret *string

    Key_fingerprint *string

    Pgp_key *string

    Secret *string

    Ses_smtp_password *string

    Status *string

    User string

}

// Aws_iam_access_keyHandler ...
type Aws_iam_access_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_access_keyHandler) Create(desired *Aws_iam_access_key) (*Aws_iam_access_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_access_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_access_keyHandler) Read(externalID string) (*Aws_iam_access_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_access_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_access_key{ Aws_iam_access_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_access_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_access_key", externalID)
}

type Aws_iam_account_alias struct {

    Aws_iam_account_alias_id *string `lyra:"ignore"`

    Account_alias string

}

// Aws_iam_account_aliasHandler ...
type Aws_iam_account_aliasHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_account_aliasHandler) Create(desired *Aws_iam_account_alias) (*Aws_iam_account_alias, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_account_alias", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_account_aliasHandler) Read(externalID string) (*Aws_iam_account_alias, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_account_alias", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_account_alias{ Aws_iam_account_alias_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_account_aliasHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_account_alias", externalID)
}

type Aws_iam_account_password_policy struct {

    Aws_iam_account_password_policy_id *string `lyra:"ignore"`

    Allow_users_to_change_password *bool

    Expire_passwords *bool

    Hard_expiry *bool

    Max_password_age *int

    Minimum_password_length *int

    Password_reuse_prevention *int

    Require_lowercase_characters *bool

    Require_numbers *bool

    Require_symbols *bool

    Require_uppercase_characters *bool

}

// Aws_iam_account_password_policyHandler ...
type Aws_iam_account_password_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_account_password_policyHandler) Create(desired *Aws_iam_account_password_policy) (*Aws_iam_account_password_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_account_password_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_account_password_policyHandler) Read(externalID string) (*Aws_iam_account_password_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_account_password_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_account_password_policy{ Aws_iam_account_password_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_account_password_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_account_password_policy", externalID)
}

type Aws_iam_group struct {

    Aws_iam_group_id *string `lyra:"ignore"`

    Arn *string

    Name string

    Path *string

    Unique_id *string

}

// Aws_iam_groupHandler ...
type Aws_iam_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_groupHandler) Create(desired *Aws_iam_group) (*Aws_iam_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_groupHandler) Read(externalID string) (*Aws_iam_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_group{ Aws_iam_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_group", externalID)
}

type Aws_iam_group_membership struct {

    Aws_iam_group_membership_id *string `lyra:"ignore"`

    Group string

    Name string

    Users []string

}

// Aws_iam_group_membershipHandler ...
type Aws_iam_group_membershipHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_group_membershipHandler) Create(desired *Aws_iam_group_membership) (*Aws_iam_group_membership, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_group_membership", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_group_membershipHandler) Read(externalID string) (*Aws_iam_group_membership, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_group_membership", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_group_membership{ Aws_iam_group_membership_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_group_membershipHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_group_membership", externalID)
}

type Aws_iam_group_policy struct {

    Aws_iam_group_policy_id *string `lyra:"ignore"`

    Group string

    Name *string

    Name_prefix *string

    Policy string

}

// Aws_iam_group_policyHandler ...
type Aws_iam_group_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_group_policyHandler) Create(desired *Aws_iam_group_policy) (*Aws_iam_group_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_group_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_group_policyHandler) Read(externalID string) (*Aws_iam_group_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_group_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_group_policy{ Aws_iam_group_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_group_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_group_policy", externalID)
}

type Aws_iam_group_policy_attachment struct {

    Aws_iam_group_policy_attachment_id *string `lyra:"ignore"`

    Group string

    Policy_arn string

}

// Aws_iam_group_policy_attachmentHandler ...
type Aws_iam_group_policy_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_group_policy_attachmentHandler) Create(desired *Aws_iam_group_policy_attachment) (*Aws_iam_group_policy_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_group_policy_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_group_policy_attachmentHandler) Read(externalID string) (*Aws_iam_group_policy_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_group_policy_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_group_policy_attachment{ Aws_iam_group_policy_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_group_policy_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_group_policy_attachment", externalID)
}

type Aws_iam_instance_profile struct {

    Aws_iam_instance_profile_id *string `lyra:"ignore"`

    Arn *string

    Create_date *string

    Name *string

    Name_prefix *string

    Path *string

    Role *string

    Roles *[]string

    Unique_id *string

}

// Aws_iam_instance_profileHandler ...
type Aws_iam_instance_profileHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_instance_profileHandler) Create(desired *Aws_iam_instance_profile) (*Aws_iam_instance_profile, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_instance_profile", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_instance_profileHandler) Read(externalID string) (*Aws_iam_instance_profile, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_instance_profile", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_instance_profile{ Aws_iam_instance_profile_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_instance_profileHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_instance_profile", externalID)
}

type Aws_iam_openid_connect_provider struct {

    Aws_iam_openid_connect_provider_id *string `lyra:"ignore"`

    Arn *string

    Client_id_list []string

    Thumbprint_list []string

    Url string

}

// Aws_iam_openid_connect_providerHandler ...
type Aws_iam_openid_connect_providerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_openid_connect_providerHandler) Create(desired *Aws_iam_openid_connect_provider) (*Aws_iam_openid_connect_provider, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_openid_connect_provider", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_openid_connect_providerHandler) Read(externalID string) (*Aws_iam_openid_connect_provider, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_openid_connect_provider", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_openid_connect_provider{ Aws_iam_openid_connect_provider_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_openid_connect_providerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_openid_connect_provider", externalID)
}

type Aws_iam_policy struct {

    Aws_iam_policy_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Name *string

    Name_prefix *string

    Path *string

    Policy string

}

// Aws_iam_policyHandler ...
type Aws_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_policyHandler) Create(desired *Aws_iam_policy) (*Aws_iam_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_policyHandler) Read(externalID string) (*Aws_iam_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_policy{ Aws_iam_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_policy", externalID)
}

type Aws_iam_policy_attachment struct {

    Aws_iam_policy_attachment_id *string `lyra:"ignore"`

    Groups *[]string

    Name string

    Policy_arn string

    Roles *[]string

    Users *[]string

}

// Aws_iam_policy_attachmentHandler ...
type Aws_iam_policy_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_policy_attachmentHandler) Create(desired *Aws_iam_policy_attachment) (*Aws_iam_policy_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_policy_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_policy_attachmentHandler) Read(externalID string) (*Aws_iam_policy_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_policy_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_policy_attachment{ Aws_iam_policy_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_policy_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_policy_attachment", externalID)
}

type Aws_iam_role struct {

    Aws_iam_role_id *string `lyra:"ignore"`

    Arn *string

    Assume_role_policy string

    Create_date *string

    Description *string

    Force_detach_policies *bool

    Max_session_duration *int

    Name *string

    Name_prefix *string

    Path *string

    Permissions_boundary *string

    Tags *map[string]string

    Unique_id *string

}

// Aws_iam_roleHandler ...
type Aws_iam_roleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_roleHandler) Create(desired *Aws_iam_role) (*Aws_iam_role, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_role", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_roleHandler) Read(externalID string) (*Aws_iam_role, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_role", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_role{ Aws_iam_role_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_roleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_role", externalID)
}

type Aws_iam_role_policy struct {

    Aws_iam_role_policy_id *string `lyra:"ignore"`

    Name *string

    Name_prefix *string

    Policy string

    Role string

}

// Aws_iam_role_policyHandler ...
type Aws_iam_role_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_role_policyHandler) Create(desired *Aws_iam_role_policy) (*Aws_iam_role_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_role_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_role_policyHandler) Read(externalID string) (*Aws_iam_role_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_role_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_role_policy{ Aws_iam_role_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_role_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_role_policy", externalID)
}

type Aws_iam_role_policy_attachment struct {

    Aws_iam_role_policy_attachment_id *string `lyra:"ignore"`

    Policy_arn string

    Role string

}

// Aws_iam_role_policy_attachmentHandler ...
type Aws_iam_role_policy_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_role_policy_attachmentHandler) Create(desired *Aws_iam_role_policy_attachment) (*Aws_iam_role_policy_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_role_policy_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_role_policy_attachmentHandler) Read(externalID string) (*Aws_iam_role_policy_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_role_policy_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_role_policy_attachment{ Aws_iam_role_policy_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_role_policy_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_role_policy_attachment", externalID)
}

type Aws_iam_saml_provider struct {

    Aws_iam_saml_provider_id *string `lyra:"ignore"`

    Arn *string

    Name string

    Saml_metadata_document string

    Valid_until *string

}

// Aws_iam_saml_providerHandler ...
type Aws_iam_saml_providerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_saml_providerHandler) Create(desired *Aws_iam_saml_provider) (*Aws_iam_saml_provider, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_saml_provider", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_saml_providerHandler) Read(externalID string) (*Aws_iam_saml_provider, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_saml_provider", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_saml_provider{ Aws_iam_saml_provider_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_saml_providerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_saml_provider", externalID)
}

type Aws_iam_server_certificate struct {

    Aws_iam_server_certificate_id *string `lyra:"ignore"`

    Arn *string

    Certificate_body string

    Certificate_chain *string

    Name *string

    Name_prefix *string

    Path *string

    Private_key string

}

// Aws_iam_server_certificateHandler ...
type Aws_iam_server_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_server_certificateHandler) Create(desired *Aws_iam_server_certificate) (*Aws_iam_server_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_server_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_server_certificateHandler) Read(externalID string) (*Aws_iam_server_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_server_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_server_certificate{ Aws_iam_server_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_server_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_server_certificate", externalID)
}

type Aws_iam_service_linked_role struct {

    Aws_iam_service_linked_role_id *string `lyra:"ignore"`

    Arn *string

    Aws_service_name string

    Create_date *string

    Custom_suffix *string

    Description *string

    Name *string

    Path *string

    Unique_id *string

}

// Aws_iam_service_linked_roleHandler ...
type Aws_iam_service_linked_roleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_service_linked_roleHandler) Create(desired *Aws_iam_service_linked_role) (*Aws_iam_service_linked_role, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_service_linked_role", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_service_linked_roleHandler) Read(externalID string) (*Aws_iam_service_linked_role, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_service_linked_role", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_service_linked_role{ Aws_iam_service_linked_role_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_service_linked_roleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_service_linked_role", externalID)
}

type Aws_iam_user struct {

    Aws_iam_user_id *string `lyra:"ignore"`

    Arn *string

    Force_destroy *bool

    Name string

    Path *string

    Permissions_boundary *string

    Tags *map[string]string

    Unique_id *string

}

// Aws_iam_userHandler ...
type Aws_iam_userHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_userHandler) Create(desired *Aws_iam_user) (*Aws_iam_user, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_user", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_userHandler) Read(externalID string) (*Aws_iam_user, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_user", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_user{ Aws_iam_user_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_userHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_user", externalID)
}

type Aws_iam_user_group_membership struct {

    Aws_iam_user_group_membership_id *string `lyra:"ignore"`

    Groups []string

    User string

}

// Aws_iam_user_group_membershipHandler ...
type Aws_iam_user_group_membershipHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_user_group_membershipHandler) Create(desired *Aws_iam_user_group_membership) (*Aws_iam_user_group_membership, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_user_group_membership", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_user_group_membershipHandler) Read(externalID string) (*Aws_iam_user_group_membership, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_user_group_membership", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_user_group_membership{ Aws_iam_user_group_membership_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_user_group_membershipHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_user_group_membership", externalID)
}

type Aws_iam_user_login_profile struct {

    Aws_iam_user_login_profile_id *string `lyra:"ignore"`

    Encrypted_password *string

    Key_fingerprint *string

    Password_length *int

    Password_reset_required *bool

    Pgp_key string

    User string

}

// Aws_iam_user_login_profileHandler ...
type Aws_iam_user_login_profileHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_user_login_profileHandler) Create(desired *Aws_iam_user_login_profile) (*Aws_iam_user_login_profile, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_user_login_profile", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_user_login_profileHandler) Read(externalID string) (*Aws_iam_user_login_profile, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_user_login_profile", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_user_login_profile{ Aws_iam_user_login_profile_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_user_login_profileHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_user_login_profile", externalID)
}

type Aws_iam_user_policy struct {

    Aws_iam_user_policy_id *string `lyra:"ignore"`

    Name *string

    Name_prefix *string

    Policy string

    User string

}

// Aws_iam_user_policyHandler ...
type Aws_iam_user_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_user_policyHandler) Create(desired *Aws_iam_user_policy) (*Aws_iam_user_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_user_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_user_policyHandler) Read(externalID string) (*Aws_iam_user_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_user_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_user_policy{ Aws_iam_user_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_user_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_user_policy", externalID)
}

type Aws_iam_user_policy_attachment struct {

    Aws_iam_user_policy_attachment_id *string `lyra:"ignore"`

    Policy_arn string

    User string

}

// Aws_iam_user_policy_attachmentHandler ...
type Aws_iam_user_policy_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_user_policy_attachmentHandler) Create(desired *Aws_iam_user_policy_attachment) (*Aws_iam_user_policy_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_user_policy_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_user_policy_attachmentHandler) Read(externalID string) (*Aws_iam_user_policy_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_user_policy_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_user_policy_attachment{ Aws_iam_user_policy_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_user_policy_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_user_policy_attachment", externalID)
}

type Aws_iam_user_ssh_key struct {

    Aws_iam_user_ssh_key_id *string `lyra:"ignore"`

    Encoding string

    Fingerprint *string

    Public_key string

    Ssh_public_key_id *string

    Status *string

    Username string

}

// Aws_iam_user_ssh_keyHandler ...
type Aws_iam_user_ssh_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iam_user_ssh_keyHandler) Create(desired *Aws_iam_user_ssh_key) (*Aws_iam_user_ssh_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iam_user_ssh_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iam_user_ssh_keyHandler) Read(externalID string) (*Aws_iam_user_ssh_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iam_user_ssh_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iam_user_ssh_key{ Aws_iam_user_ssh_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iam_user_ssh_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iam_user_ssh_key", externalID)
}

type Aws_inspector_assessment_target struct {

    Aws_inspector_assessment_target_id *string `lyra:"ignore"`

    Arn *string

    Name string

    Resource_group_arn *string

}

// Aws_inspector_assessment_targetHandler ...
type Aws_inspector_assessment_targetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_inspector_assessment_targetHandler) Create(desired *Aws_inspector_assessment_target) (*Aws_inspector_assessment_target, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_inspector_assessment_target", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_inspector_assessment_targetHandler) Read(externalID string) (*Aws_inspector_assessment_target, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_inspector_assessment_target", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_inspector_assessment_target{ Aws_inspector_assessment_target_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_inspector_assessment_targetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_inspector_assessment_target", externalID)
}

type Aws_inspector_assessment_template struct {

    Aws_inspector_assessment_template_id *string `lyra:"ignore"`

    Arn *string

    Duration int

    Name string

    Rules_package_arns []string

    Target_arn string

}

// Aws_inspector_assessment_templateHandler ...
type Aws_inspector_assessment_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_inspector_assessment_templateHandler) Create(desired *Aws_inspector_assessment_template) (*Aws_inspector_assessment_template, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_inspector_assessment_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_inspector_assessment_templateHandler) Read(externalID string) (*Aws_inspector_assessment_template, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_inspector_assessment_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_inspector_assessment_template{ Aws_inspector_assessment_template_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_inspector_assessment_templateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_inspector_assessment_template", externalID)
}

type Aws_inspector_resource_group struct {

    Aws_inspector_resource_group_id *string `lyra:"ignore"`

    Arn *string

    Tags map[string]string

}

// Aws_inspector_resource_groupHandler ...
type Aws_inspector_resource_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_inspector_resource_groupHandler) Create(desired *Aws_inspector_resource_group) (*Aws_inspector_resource_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_inspector_resource_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_inspector_resource_groupHandler) Read(externalID string) (*Aws_inspector_resource_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_inspector_resource_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_inspector_resource_group{ Aws_inspector_resource_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_inspector_resource_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_inspector_resource_group", externalID)
}

type Aws_instance_credit_specification_297 struct {

    Cpu_credits *string

}

type Aws_instance_ebs_block_device_298 struct {

    Delete_on_termination *bool

    Device_name string

    Encrypted *bool

    Iops *int

    Snapshot_id *string

    Volume_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_instance_ephemeral_block_device_299 struct {

    Device_name string

    No_device *bool

    Virtual_name *string

}

type Aws_instance_network_interface_300 struct {

    Delete_on_termination *bool

    Device_index int

    Network_interface_id string

}

type Aws_instance_root_block_device_301 struct {

    Delete_on_termination *bool

    Iops *int

    Volume_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_instance struct {

    Aws_instance_id *string `lyra:"ignore"`

    Ami string

    Arn *string

    Associate_public_ip_address *bool

    Availability_zone *string

    Block_device *map[string]string

    Cpu_core_count *int

    Cpu_threads_per_core *int

    Credit_specification *[]Aws_instance_credit_specification_297

    Disable_api_termination *bool

    Ebs_block_device *[]Aws_instance_ebs_block_device_298

    Ebs_optimized *bool

    Ephemeral_block_device *[]Aws_instance_ephemeral_block_device_299

    Get_password_data *bool

    Host_id *string

    Iam_instance_profile *string

    Instance_initiated_shutdown_behavior *string

    Instance_state *string

    Instance_type string

    Ipv6_address_count *int

    Ipv6_addresses *[]string

    Key_name *string

    Monitoring *bool

    Network_interface *[]Aws_instance_network_interface_300

    Network_interface_id *string

    Password_data *string

    Placement_group *string

    Primary_network_interface_id *string

    Private_dns *string

    Private_ip *string

    Public_dns *string

    Public_ip *string

    Root_block_device *[]Aws_instance_root_block_device_301

    Security_groups *[]string

    Source_dest_check *bool

    Subnet_id *string

    Tags *map[string]string

    Tenancy *string

    User_data *string

    User_data_base64 *string

    Volume_tags *map[string]string

    Vpc_security_group_ids *[]string

}

// Aws_instanceHandler ...
type Aws_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_instanceHandler) Create(desired *Aws_instance) (*Aws_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_instanceHandler) Read(externalID string) (*Aws_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_instance{ Aws_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_instance", externalID)
}

type Aws_internet_gateway struct {

    Aws_internet_gateway_id *string `lyra:"ignore"`

    Owner_id *string

    Tags *map[string]string

    Vpc_id *string

}

// Aws_internet_gatewayHandler ...
type Aws_internet_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_internet_gatewayHandler) Create(desired *Aws_internet_gateway) (*Aws_internet_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_internet_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_internet_gatewayHandler) Read(externalID string) (*Aws_internet_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_internet_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_internet_gateway{ Aws_internet_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_internet_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_internet_gateway", externalID)
}

type Aws_iot_certificate struct {

    Aws_iot_certificate_id *string `lyra:"ignore"`

    Active bool

    Arn *string

    Csr string

}

// Aws_iot_certificateHandler ...
type Aws_iot_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iot_certificateHandler) Create(desired *Aws_iot_certificate) (*Aws_iot_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iot_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iot_certificateHandler) Read(externalID string) (*Aws_iot_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iot_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iot_certificate{ Aws_iot_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iot_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iot_certificate", externalID)
}

type Aws_iot_policy struct {

    Aws_iot_policy_id *string `lyra:"ignore"`

    Arn *string

    Default_version_id *string

    Name string

    Policy string

}

// Aws_iot_policyHandler ...
type Aws_iot_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iot_policyHandler) Create(desired *Aws_iot_policy) (*Aws_iot_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iot_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iot_policyHandler) Read(externalID string) (*Aws_iot_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iot_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iot_policy{ Aws_iot_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iot_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iot_policy", externalID)
}

type Aws_iot_policy_attachment struct {

    Aws_iot_policy_attachment_id *string `lyra:"ignore"`

    Policy string

    Target string

}

// Aws_iot_policy_attachmentHandler ...
type Aws_iot_policy_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iot_policy_attachmentHandler) Create(desired *Aws_iot_policy_attachment) (*Aws_iot_policy_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iot_policy_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iot_policy_attachmentHandler) Read(externalID string) (*Aws_iot_policy_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iot_policy_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iot_policy_attachment{ Aws_iot_policy_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iot_policy_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iot_policy_attachment", externalID)
}

type Aws_iot_thing struct {

    Aws_iot_thing_id *string `lyra:"ignore"`

    Arn *string

    Attributes *map[string]string

    Default_client_id *string

    Name string

    Thing_type_name *string

    Version *int

}

// Aws_iot_thingHandler ...
type Aws_iot_thingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iot_thingHandler) Create(desired *Aws_iot_thing) (*Aws_iot_thing, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iot_thing", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iot_thingHandler) Read(externalID string) (*Aws_iot_thing, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iot_thing", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iot_thing{ Aws_iot_thing_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iot_thingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iot_thing", externalID)
}

type Aws_iot_thing_principal_attachment struct {

    Aws_iot_thing_principal_attachment_id *string `lyra:"ignore"`

    Principal string

    Thing string

}

// Aws_iot_thing_principal_attachmentHandler ...
type Aws_iot_thing_principal_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iot_thing_principal_attachmentHandler) Create(desired *Aws_iot_thing_principal_attachment) (*Aws_iot_thing_principal_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iot_thing_principal_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iot_thing_principal_attachmentHandler) Read(externalID string) (*Aws_iot_thing_principal_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iot_thing_principal_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iot_thing_principal_attachment{ Aws_iot_thing_principal_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iot_thing_principal_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iot_thing_principal_attachment", externalID)
}

type Aws_iot_thing_type_properties_302 struct {

    Description *string

    Searchable_attributes *[]string

}

type Aws_iot_thing_type struct {

    Aws_iot_thing_type_id *string `lyra:"ignore"`

    Arn *string

    Deprecated *bool

    Name string

    Properties *[]Aws_iot_thing_type_properties_302

}

// Aws_iot_thing_typeHandler ...
type Aws_iot_thing_typeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iot_thing_typeHandler) Create(desired *Aws_iot_thing_type) (*Aws_iot_thing_type, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iot_thing_type", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iot_thing_typeHandler) Read(externalID string) (*Aws_iot_thing_type, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iot_thing_type", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iot_thing_type{ Aws_iot_thing_type_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iot_thing_typeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iot_thing_type", externalID)
}

type Aws_iot_topic_rule_cloudwatch_alarm_303 struct {

    Alarm_name string

    Role_arn string

    State_reason string

    State_value string

}

type Aws_iot_topic_rule_cloudwatch_metric_304 struct {

    Metric_name string

    Metric_namespace string

    Metric_timestamp *string

    Metric_unit string

    Metric_value string

    Role_arn string

}

type Aws_iot_topic_rule_dynamodb_305 struct {

    Hash_key_field string

    Hash_key_type *string

    Hash_key_value string

    Payload_field *string

    Range_key_field string

    Range_key_type *string

    Range_key_value string

    Role_arn string

    Table_name string

}

type Aws_iot_topic_rule_elasticsearch_306 struct {

    Endpoint string

    Id string

    Index string

    Role_arn string

    Type string

}

type Aws_iot_topic_rule_firehose_307 struct {

    Delivery_stream_name string

    Role_arn string

    Separator *string

}

type Aws_iot_topic_rule_kinesis_308 struct {

    Partition_key *string

    Role_arn string

    Stream_name string

}

type Aws_iot_topic_rule_lambda_309 struct {

    Function_arn string

}

type Aws_iot_topic_rule_republish_310 struct {

    Role_arn string

    Topic string

}

type Aws_iot_topic_rule_s3_311 struct {

    Bucket_name string

    Key string

    Role_arn string

}

type Aws_iot_topic_rule_sns_312 struct {

    Message_format *string

    Role_arn string

    Target_arn string

}

type Aws_iot_topic_rule_sqs_313 struct {

    Queue_url string

    Role_arn string

    Use_base64 bool

}

type Aws_iot_topic_rule struct {

    Aws_iot_topic_rule_id *string `lyra:"ignore"`

    Arn *string

    Cloudwatch_alarm *[]Aws_iot_topic_rule_cloudwatch_alarm_303

    Cloudwatch_metric *[]Aws_iot_topic_rule_cloudwatch_metric_304

    Description *string

    Dynamodb *[]Aws_iot_topic_rule_dynamodb_305

    Elasticsearch *[]Aws_iot_topic_rule_elasticsearch_306

    Enabled bool

    Firehose *[]Aws_iot_topic_rule_firehose_307

    Kinesis *[]Aws_iot_topic_rule_kinesis_308

    Lambda *[]Aws_iot_topic_rule_lambda_309

    Name string

    Republish *[]Aws_iot_topic_rule_republish_310

    S3 *[]Aws_iot_topic_rule_s3_311

    Sns *[]Aws_iot_topic_rule_sns_312

    Sql string

    Sql_version string

    Sqs *[]Aws_iot_topic_rule_sqs_313

}

// Aws_iot_topic_ruleHandler ...
type Aws_iot_topic_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_iot_topic_ruleHandler) Create(desired *Aws_iot_topic_rule) (*Aws_iot_topic_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_iot_topic_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_iot_topic_ruleHandler) Read(externalID string) (*Aws_iot_topic_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_iot_topic_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_iot_topic_rule{ Aws_iot_topic_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_iot_topic_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_iot_topic_rule", externalID)
}

type Aws_key_pair struct {

    Aws_key_pair_id *string `lyra:"ignore"`

    Fingerprint *string

    Key_name *string

    Key_name_prefix *string

    Public_key string

}

// Aws_key_pairHandler ...
type Aws_key_pairHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_key_pairHandler) Create(desired *Aws_key_pair) (*Aws_key_pair, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_key_pair", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_key_pairHandler) Read(externalID string) (*Aws_key_pair, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_key_pair", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_key_pair{ Aws_key_pair_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_key_pairHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_key_pair", externalID)
}

type Aws_kinesis_analytics_application_cloudwatch_logging_options_314 struct {

    Id *string

    Log_stream_arn string

    Role_arn string

}

type Aws_kinesis_analytics_application_inputs_315_kinesis_firehose_316 struct {

    Resource_arn string

    Role_arn string

}

type Aws_kinesis_analytics_application_inputs_315_kinesis_stream_317 struct {

    Resource_arn string

    Role_arn string

}

type Aws_kinesis_analytics_application_inputs_315_parallelism_318 struct {

    Count int

}

type Aws_kinesis_analytics_application_inputs_315_processing_configuration_319_lambda_320 struct {

    Resource_arn string

    Role_arn string

}

type Aws_kinesis_analytics_application_inputs_315_processing_configuration_319 struct {

    Lambda []Aws_kinesis_analytics_application_inputs_315_processing_configuration_319_lambda_320

}

type Aws_kinesis_analytics_application_inputs_315_schema_321_record_columns_322 struct {

    Mapping *string

    Name string

    Sql_type string

}

type Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323_mapping_parameters_324_csv_325 struct {

    Record_column_delimiter string

    Record_row_delimiter string

}

type Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323_mapping_parameters_324_json_326 struct {

    Record_row_path string

}

type Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323_mapping_parameters_324 struct {

    Csv *[]Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323_mapping_parameters_324_csv_325

    Json *[]Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323_mapping_parameters_324_json_326

}

type Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323 struct {

    Mapping_parameters *[]Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323_mapping_parameters_324

    Record_format_type *string

}

type Aws_kinesis_analytics_application_inputs_315_schema_321 struct {

    Record_columns []Aws_kinesis_analytics_application_inputs_315_schema_321_record_columns_322

    Record_encoding *string

    Record_format []Aws_kinesis_analytics_application_inputs_315_schema_321_record_format_323

}

type Aws_kinesis_analytics_application_inputs_315_starting_position_configuration_327 struct {

    Starting_position *string

}

type Aws_kinesis_analytics_application_inputs_315 struct {

    Id *string

    Kinesis_firehose *[]Aws_kinesis_analytics_application_inputs_315_kinesis_firehose_316

    Kinesis_stream *[]Aws_kinesis_analytics_application_inputs_315_kinesis_stream_317

    Name_prefix string

    Parallelism *[]Aws_kinesis_analytics_application_inputs_315_parallelism_318

    Processing_configuration *[]Aws_kinesis_analytics_application_inputs_315_processing_configuration_319

    Schema []Aws_kinesis_analytics_application_inputs_315_schema_321

    Starting_position_configuration *[]Aws_kinesis_analytics_application_inputs_315_starting_position_configuration_327

    Stream_names *[]string

}

type Aws_kinesis_analytics_application_outputs_328_kinesis_firehose_329 struct {

    Resource_arn string

    Role_arn string

}

type Aws_kinesis_analytics_application_outputs_328_kinesis_stream_330 struct {

    Resource_arn string

    Role_arn string

}

type Aws_kinesis_analytics_application_outputs_328_lambda_331 struct {

    Resource_arn string

    Role_arn string

}

type Aws_kinesis_analytics_application_outputs_328_schema_332 struct {

    Record_format_type *string

}

type Aws_kinesis_analytics_application_outputs_328 struct {

    Id *string

    Kinesis_firehose *[]Aws_kinesis_analytics_application_outputs_328_kinesis_firehose_329

    Kinesis_stream *[]Aws_kinesis_analytics_application_outputs_328_kinesis_stream_330

    Lambda *[]Aws_kinesis_analytics_application_outputs_328_lambda_331

    Name string

    Schema []Aws_kinesis_analytics_application_outputs_328_schema_332

}

type Aws_kinesis_analytics_application_reference_data_sources_333_s3_334 struct {

    Bucket_arn string

    File_key string

    Role_arn string

}

type Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_columns_336 struct {

    Mapping *string

    Name string

    Sql_type string

}

type Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337_mapping_parameters_338_csv_339 struct {

    Record_column_delimiter string

    Record_row_delimiter string

}

type Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337_mapping_parameters_338_json_340 struct {

    Record_row_path string

}

type Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337_mapping_parameters_338 struct {

    Csv *[]Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337_mapping_parameters_338_csv_339

    Json *[]Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337_mapping_parameters_338_json_340

}

type Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337 struct {

    Mapping_parameters *[]Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337_mapping_parameters_338

    Record_format_type *string

}

type Aws_kinesis_analytics_application_reference_data_sources_333_schema_335 struct {

    Record_columns []Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_columns_336

    Record_encoding *string

    Record_format []Aws_kinesis_analytics_application_reference_data_sources_333_schema_335_record_format_337

}

type Aws_kinesis_analytics_application_reference_data_sources_333 struct {

    Id *string

    S3 []Aws_kinesis_analytics_application_reference_data_sources_333_s3_334

    Schema []Aws_kinesis_analytics_application_reference_data_sources_333_schema_335

    Table_name string

}

type Aws_kinesis_analytics_application struct {

    Aws_kinesis_analytics_application_id *string `lyra:"ignore"`

    Arn *string

    Cloudwatch_logging_options *[]Aws_kinesis_analytics_application_cloudwatch_logging_options_314

    Code *string

    Create_timestamp *string

    Description *string

    Inputs *[]Aws_kinesis_analytics_application_inputs_315

    Last_update_timestamp *string

    Name string

    Outputs *[]Aws_kinesis_analytics_application_outputs_328

    Reference_data_sources *[]Aws_kinesis_analytics_application_reference_data_sources_333

    Status *string

    Version *int

}

// Aws_kinesis_analytics_applicationHandler ...
type Aws_kinesis_analytics_applicationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_kinesis_analytics_applicationHandler) Create(desired *Aws_kinesis_analytics_application) (*Aws_kinesis_analytics_application, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_kinesis_analytics_application", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_kinesis_analytics_applicationHandler) Read(externalID string) (*Aws_kinesis_analytics_application, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_kinesis_analytics_application", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_kinesis_analytics_application{ Aws_kinesis_analytics_application_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_kinesis_analytics_applicationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_kinesis_analytics_application", externalID)
}

type Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_cloudwatch_logging_options_342 struct {

    Enabled *bool

    Log_group_name *string

    Log_stream_name *string

}

type Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_processing_configuration_343_processors_344_parameters_345 struct {

    Parameter_name string

    Parameter_value string

}

type Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_processing_configuration_343_processors_344 struct {

    Parameters *[]Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_processing_configuration_343_processors_344_parameters_345

    Type string

}

type Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_processing_configuration_343 struct {

    Enabled *bool

    Processors *[]Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_processing_configuration_343_processors_344

}

type Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341 struct {

    Buffering_interval *int

    Buffering_size *int

    Cloudwatch_logging_options *[]Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_cloudwatch_logging_options_342

    Domain_arn string

    Index_name string

    Index_rotation_period *string

    Processing_configuration *[]Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341_processing_configuration_343

    Retry_duration *int

    Role_arn string

    S3_backup_mode *string

    Type_name *string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_cloudwatch_logging_options_347 struct {

    Enabled *bool

    Log_group_name *string

    Log_stream_name *string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349_deserializer_350_hive_json_ser_de_351 struct {

    Timestamp_formats *[]string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349_deserializer_350_open_x_json_ser_de_352 struct {

    Case_insensitive *bool

    Column_to_json_key_mappings *map[string]string

    Convert_dots_in_json_keys_to_underscores *bool

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349_deserializer_350 struct {

    Hive_json_ser_de *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349_deserializer_350_hive_json_ser_de_351

    Open_x_json_ser_de *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349_deserializer_350_open_x_json_ser_de_352

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349 struct {

    Deserializer []Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349_deserializer_350

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353_serializer_354_orc_ser_de_355 struct {

    Block_size_bytes *int

    Bloom_filter_columns *[]string

    Bloom_filter_false_positive_probability *float64

    Compression *string

    Dictionary_key_threshold *float64

    Enable_padding *bool

    Format_version *string

    Padding_tolerance *float64

    Row_index_stride *int

    Stripe_size_bytes *int

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353_serializer_354_parquet_ser_de_356 struct {

    Block_size_bytes *int

    Compression *string

    Enable_dictionary_compression *bool

    Max_padding_bytes *int

    Page_size_bytes *int

    Writer_version *string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353_serializer_354 struct {

    Orc_ser_de *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353_serializer_354_orc_ser_de_355

    Parquet_ser_de *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353_serializer_354_parquet_ser_de_356

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353 struct {

    Serializer []Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353_serializer_354

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_schema_configuration_357 struct {

    Catalog_id *string

    Database_name string

    Region *string

    Role_arn string

    Table_name string

    Version_id *string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348 struct {

    Enabled *bool

    Input_format_configuration []Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_input_format_configuration_349

    Output_format_configuration []Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_output_format_configuration_353

    Schema_configuration []Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348_schema_configuration_357

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_processing_configuration_358_processors_359_parameters_360 struct {

    Parameter_name string

    Parameter_value string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_processing_configuration_358_processors_359 struct {

    Parameters *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_processing_configuration_358_processors_359_parameters_360

    Type string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_processing_configuration_358 struct {

    Enabled *bool

    Processors *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_processing_configuration_358_processors_359

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_s3_backup_configuration_361_cloudwatch_logging_options_362 struct {

    Enabled *bool

    Log_group_name *string

    Log_stream_name *string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_s3_backup_configuration_361 struct {

    Bucket_arn string

    Buffer_interval *int

    Buffer_size *int

    Cloudwatch_logging_options *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_s3_backup_configuration_361_cloudwatch_logging_options_362

    Compression_format *string

    Kms_key_arn *string

    Prefix *string

    Role_arn string

}

type Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346 struct {

    Bucket_arn string

    Buffer_interval *int

    Buffer_size *int

    Cloudwatch_logging_options *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_cloudwatch_logging_options_347

    Compression_format *string

    Data_format_conversion_configuration *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_data_format_conversion_configuration_348

    Error_output_prefix *string

    Kms_key_arn *string

    Prefix *string

    Processing_configuration *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_processing_configuration_358

    Role_arn string

    S3_backup_configuration *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346_s3_backup_configuration_361

    S3_backup_mode *string

}

type Aws_kinesis_firehose_delivery_stream_kinesis_source_configuration_363 struct {

    Kinesis_stream_arn string

    Role_arn string

}

type Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_cloudwatch_logging_options_365 struct {

    Enabled *bool

    Log_group_name *string

    Log_stream_name *string

}

type Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_processing_configuration_366_processors_367_parameters_368 struct {

    Parameter_name string

    Parameter_value string

}

type Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_processing_configuration_366_processors_367 struct {

    Parameters *[]Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_processing_configuration_366_processors_367_parameters_368

    Type string

}

type Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_processing_configuration_366 struct {

    Enabled *bool

    Processors *[]Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_processing_configuration_366_processors_367

}

type Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_s3_backup_configuration_369_cloudwatch_logging_options_370 struct {

    Enabled *bool

    Log_group_name *string

    Log_stream_name *string

}

type Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_s3_backup_configuration_369 struct {

    Bucket_arn string

    Buffer_interval *int

    Buffer_size *int

    Cloudwatch_logging_options *[]Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_s3_backup_configuration_369_cloudwatch_logging_options_370

    Compression_format *string

    Kms_key_arn *string

    Prefix *string

    Role_arn string

}

type Aws_kinesis_firehose_delivery_stream_redshift_configuration_364 struct {

    Cloudwatch_logging_options *[]Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_cloudwatch_logging_options_365

    Cluster_jdbcurl string

    Copy_options *string

    Data_table_columns *string

    Data_table_name string

    Password string

    Processing_configuration *[]Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_processing_configuration_366

    Retry_duration *int

    Role_arn string

    S3_backup_configuration *[]Aws_kinesis_firehose_delivery_stream_redshift_configuration_364_s3_backup_configuration_369

    S3_backup_mode *string

    Username string

}

type Aws_kinesis_firehose_delivery_stream_s3_configuration_371_cloudwatch_logging_options_372 struct {

    Enabled *bool

    Log_group_name *string

    Log_stream_name *string

}

type Aws_kinesis_firehose_delivery_stream_s3_configuration_371 struct {

    Bucket_arn string

    Buffer_interval *int

    Buffer_size *int

    Cloudwatch_logging_options *[]Aws_kinesis_firehose_delivery_stream_s3_configuration_371_cloudwatch_logging_options_372

    Compression_format *string

    Kms_key_arn *string

    Prefix *string

    Role_arn string

}

type Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_cloudwatch_logging_options_374 struct {

    Enabled *bool

    Log_group_name *string

    Log_stream_name *string

}

type Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_processing_configuration_375_processors_376_parameters_377 struct {

    Parameter_name string

    Parameter_value string

}

type Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_processing_configuration_375_processors_376 struct {

    Parameters *[]Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_processing_configuration_375_processors_376_parameters_377

    Type string

}

type Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_processing_configuration_375 struct {

    Enabled *bool

    Processors *[]Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_processing_configuration_375_processors_376

}

type Aws_kinesis_firehose_delivery_stream_splunk_configuration_373 struct {

    Cloudwatch_logging_options *[]Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_cloudwatch_logging_options_374

    Hec_acknowledgment_timeout *int

    Hec_endpoint string

    Hec_endpoint_type *string

    Hec_token string

    Processing_configuration *[]Aws_kinesis_firehose_delivery_stream_splunk_configuration_373_processing_configuration_375

    Retry_duration *int

    S3_backup_mode *string

}

type Aws_kinesis_firehose_delivery_stream struct {

    Aws_kinesis_firehose_delivery_stream_id *string `lyra:"ignore"`

    Arn *string

    Destination string

    Destination_id *string

    Elasticsearch_configuration *[]Aws_kinesis_firehose_delivery_stream_elasticsearch_configuration_341

    Extended_s3_configuration *[]Aws_kinesis_firehose_delivery_stream_extended_s3_configuration_346

    Kinesis_source_configuration *[]Aws_kinesis_firehose_delivery_stream_kinesis_source_configuration_363

    Name string

    Redshift_configuration *[]Aws_kinesis_firehose_delivery_stream_redshift_configuration_364

    S3_configuration *[]Aws_kinesis_firehose_delivery_stream_s3_configuration_371

    Splunk_configuration *[]Aws_kinesis_firehose_delivery_stream_splunk_configuration_373

    Tags *map[string]string

    Version_id *string

}

// Aws_kinesis_firehose_delivery_streamHandler ...
type Aws_kinesis_firehose_delivery_streamHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_kinesis_firehose_delivery_streamHandler) Create(desired *Aws_kinesis_firehose_delivery_stream) (*Aws_kinesis_firehose_delivery_stream, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_kinesis_firehose_delivery_stream", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_kinesis_firehose_delivery_streamHandler) Read(externalID string) (*Aws_kinesis_firehose_delivery_stream, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_kinesis_firehose_delivery_stream", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_kinesis_firehose_delivery_stream{ Aws_kinesis_firehose_delivery_stream_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_kinesis_firehose_delivery_streamHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_kinesis_firehose_delivery_stream", externalID)
}

type Aws_kinesis_stream struct {

    Aws_kinesis_stream_id *string `lyra:"ignore"`

    Arn *string

    Encryption_type *string

    Kms_key_id *string

    Name string

    Retention_period *int

    Shard_count int

    Shard_level_metrics *[]string

    Tags *map[string]string

}

// Aws_kinesis_streamHandler ...
type Aws_kinesis_streamHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_kinesis_streamHandler) Create(desired *Aws_kinesis_stream) (*Aws_kinesis_stream, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_kinesis_stream", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_kinesis_streamHandler) Read(externalID string) (*Aws_kinesis_stream, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_kinesis_stream", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_kinesis_stream{ Aws_kinesis_stream_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_kinesis_streamHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_kinesis_stream", externalID)
}

type Aws_kms_alias struct {

    Aws_kms_alias_id *string `lyra:"ignore"`

    Arn *string

    Name *string

    Name_prefix *string

    Target_key_arn *string

    Target_key_id string

}

// Aws_kms_aliasHandler ...
type Aws_kms_aliasHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_kms_aliasHandler) Create(desired *Aws_kms_alias) (*Aws_kms_alias, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_kms_alias", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_kms_aliasHandler) Read(externalID string) (*Aws_kms_alias, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_kms_alias", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_kms_alias{ Aws_kms_alias_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_kms_aliasHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_kms_alias", externalID)
}

type Aws_kms_grant_constraints_378 struct {

    Encryption_context_equals *map[string]string

    Encryption_context_subset *map[string]string

}

type Aws_kms_grant struct {

    Aws_kms_grant_id *string `lyra:"ignore"`

    Constraints *[]Aws_kms_grant_constraints_378

    Grant_creation_tokens *[]string

    Grant_id *string

    Grant_token *string

    Grantee_principal string

    Key_id string

    Name *string

    Operations []string

    Retire_on_delete *bool

    Retiring_principal *string

}

// Aws_kms_grantHandler ...
type Aws_kms_grantHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_kms_grantHandler) Create(desired *Aws_kms_grant) (*Aws_kms_grant, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_kms_grant", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_kms_grantHandler) Read(externalID string) (*Aws_kms_grant, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_kms_grant", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_kms_grant{ Aws_kms_grant_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_kms_grantHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_kms_grant", externalID)
}

type Aws_kms_key struct {

    Aws_kms_key_id *string `lyra:"ignore"`

    Arn *string

    Deletion_window_in_days *int

    Description *string

    Enable_key_rotation *bool

    Is_enabled *bool

    Key_id *string

    Key_usage *string

    Policy *string

    Tags *map[string]string

}

// Aws_kms_keyHandler ...
type Aws_kms_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_kms_keyHandler) Create(desired *Aws_kms_key) (*Aws_kms_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_kms_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_kms_keyHandler) Read(externalID string) (*Aws_kms_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_kms_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_kms_key{ Aws_kms_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_kms_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_kms_key", externalID)
}

type Aws_lambda_alias_routing_config_379 struct {

    Additional_version_weights *map[string]string

}

type Aws_lambda_alias struct {

    Aws_lambda_alias_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Function_name string

    Function_version string

    Invoke_arn *string

    Name string

    Routing_config *[]Aws_lambda_alias_routing_config_379

}

// Aws_lambda_aliasHandler ...
type Aws_lambda_aliasHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lambda_aliasHandler) Create(desired *Aws_lambda_alias) (*Aws_lambda_alias, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lambda_alias", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lambda_aliasHandler) Read(externalID string) (*Aws_lambda_alias, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lambda_alias", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lambda_alias{ Aws_lambda_alias_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lambda_aliasHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lambda_alias", externalID)
}

type Aws_lambda_event_source_mapping struct {

    Aws_lambda_event_source_mapping_id *string `lyra:"ignore"`

    Batch_size *int

    Enabled *bool

    Event_source_arn string

    Function_arn *string

    Function_name string

    Last_modified *string

    Last_processing_result *string

    Starting_position *string

    Starting_position_timestamp *string

    State *string

    State_transition_reason *string

    Uuid *string

}

// Aws_lambda_event_source_mappingHandler ...
type Aws_lambda_event_source_mappingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lambda_event_source_mappingHandler) Create(desired *Aws_lambda_event_source_mapping) (*Aws_lambda_event_source_mapping, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lambda_event_source_mapping", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lambda_event_source_mappingHandler) Read(externalID string) (*Aws_lambda_event_source_mapping, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lambda_event_source_mapping", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lambda_event_source_mapping{ Aws_lambda_event_source_mapping_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lambda_event_source_mappingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lambda_event_source_mapping", externalID)
}

type Aws_lambda_function_dead_letter_config_380 struct {

    Target_arn string

}

type Aws_lambda_function_environment_381 struct {

    Variables *map[string]string

}

type Aws_lambda_function_tracing_config_382 struct {

    Mode string

}

type Aws_lambda_function_vpc_config_383 struct {

    Security_group_ids []string

    Subnet_ids []string

    Vpc_id *string

}

type Aws_lambda_function struct {

    Aws_lambda_function_id *string `lyra:"ignore"`

    Arn *string

    Dead_letter_config *[]Aws_lambda_function_dead_letter_config_380

    Description *string

    Environment *[]Aws_lambda_function_environment_381

    Filename *string

    Function_name string

    Handler string

    Invoke_arn *string

    Kms_key_arn *string

    Last_modified *string

    Layers *[]string

    Memory_size *int

    Publish *bool

    Qualified_arn *string

    Reserved_concurrent_executions *int

    Role string

    Runtime string

    S3_bucket *string

    S3_key *string

    S3_object_version *string

    Source_code_hash *string

    Source_code_size *int

    Tags *map[string]string

    Timeout *int

    Tracing_config *[]Aws_lambda_function_tracing_config_382

    Version *string

    Vpc_config *[]Aws_lambda_function_vpc_config_383

}

// Aws_lambda_functionHandler ...
type Aws_lambda_functionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lambda_functionHandler) Create(desired *Aws_lambda_function) (*Aws_lambda_function, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lambda_function", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lambda_functionHandler) Read(externalID string) (*Aws_lambda_function, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lambda_function", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lambda_function{ Aws_lambda_function_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lambda_functionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lambda_function", externalID)
}

type Aws_lambda_layer_version struct {

    Aws_lambda_layer_version_id *string `lyra:"ignore"`

    Arn *string

    Compatible_runtimes *[]string

    Created_date *string

    Description *string

    Filename *string

    Layer_arn *string

    Layer_name string

    License_info *string

    S3_bucket *string

    S3_key *string

    S3_object_version *string

    Source_code_hash *string

    Source_code_size *int

    Version *string

}

// Aws_lambda_layer_versionHandler ...
type Aws_lambda_layer_versionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lambda_layer_versionHandler) Create(desired *Aws_lambda_layer_version) (*Aws_lambda_layer_version, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lambda_layer_version", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lambda_layer_versionHandler) Read(externalID string) (*Aws_lambda_layer_version, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lambda_layer_version", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lambda_layer_version{ Aws_lambda_layer_version_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lambda_layer_versionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lambda_layer_version", externalID)
}

type Aws_lambda_permission struct {

    Aws_lambda_permission_id *string `lyra:"ignore"`

    Action string

    Event_source_token *string

    Function_name string

    Principal string

    Qualifier *string

    Source_account *string

    Source_arn *string

    Statement_id *string

    Statement_id_prefix *string

}

// Aws_lambda_permissionHandler ...
type Aws_lambda_permissionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lambda_permissionHandler) Create(desired *Aws_lambda_permission) (*Aws_lambda_permission, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lambda_permission", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lambda_permissionHandler) Read(externalID string) (*Aws_lambda_permission, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lambda_permission", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lambda_permission{ Aws_lambda_permission_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lambda_permissionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lambda_permission", externalID)
}

type Aws_launch_configuration_ebs_block_device_384 struct {

    Delete_on_termination *bool

    Device_name string

    Encrypted *bool

    Iops *int

    No_device *bool

    Snapshot_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_launch_configuration_ephemeral_block_device_385 struct {

    Device_name string

    Virtual_name string

}

type Aws_launch_configuration_root_block_device_386 struct {

    Delete_on_termination *bool

    Iops *int

    Volume_size *int

    Volume_type *string

}

type Aws_launch_configuration struct {

    Aws_launch_configuration_id *string `lyra:"ignore"`

    Associate_public_ip_address *bool

    Ebs_block_device *[]Aws_launch_configuration_ebs_block_device_384

    Ebs_optimized *bool

    Enable_monitoring *bool

    Ephemeral_block_device *[]Aws_launch_configuration_ephemeral_block_device_385

    Iam_instance_profile *string

    Image_id string

    Instance_type string

    Key_name *string

    Name *string

    Name_prefix *string

    Placement_tenancy *string

    Root_block_device *[]Aws_launch_configuration_root_block_device_386

    Security_groups *[]string

    Spot_price *string

    User_data *string

    User_data_base64 *string

    Vpc_classic_link_id *string

    Vpc_classic_link_security_groups *[]string

}

// Aws_launch_configurationHandler ...
type Aws_launch_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_launch_configurationHandler) Create(desired *Aws_launch_configuration) (*Aws_launch_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_launch_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_launch_configurationHandler) Read(externalID string) (*Aws_launch_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_launch_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_launch_configuration{ Aws_launch_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_launch_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_launch_configuration", externalID)
}

type Aws_launch_template_block_device_mappings_387_ebs_388 struct {

    Delete_on_termination *string

    Encrypted *string

    Iops *int

    Kms_key_id *string

    Snapshot_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_launch_template_block_device_mappings_387 struct {

    Device_name *string

    Ebs *[]Aws_launch_template_block_device_mappings_387_ebs_388

    No_device *string

    Virtual_name *string

}

type Aws_launch_template_capacity_reservation_specification_389_capacity_reservation_target_390 struct {

    Capacity_reservation_id *string

}

type Aws_launch_template_capacity_reservation_specification_389 struct {

    Capacity_reservation_preference *string

    Capacity_reservation_target *[]Aws_launch_template_capacity_reservation_specification_389_capacity_reservation_target_390

}

type Aws_launch_template_credit_specification_391 struct {

    Cpu_credits *string

}

type Aws_launch_template_elastic_gpu_specifications_392 struct {

    Type string

}

type Aws_launch_template_iam_instance_profile_393 struct {

    Arn *string

    Name *string

}

type Aws_launch_template_instance_market_options_394_spot_options_395 struct {

    Block_duration_minutes *int

    Instance_interruption_behavior *string

    Max_price *string

    Spot_instance_type *string

    Valid_until *string

}

type Aws_launch_template_instance_market_options_394 struct {

    Market_type *string

    Spot_options *[]Aws_launch_template_instance_market_options_394_spot_options_395

}

type Aws_launch_template_license_specification_396 struct {

    License_configuration_arn string

}

type Aws_launch_template_monitoring_397 struct {

    Enabled *bool

}

type Aws_launch_template_network_interfaces_398 struct {

    Associate_public_ip_address *bool

    Delete_on_termination *bool

    Description *string

    Device_index *int

    Ipv4_address_count *int

    Ipv4_addresses *[]string

    Ipv6_address_count *int

    Ipv6_addresses *[]string

    Network_interface_id *string

    Private_ip_address *string

    Security_groups *[]string

    Subnet_id *string

}

type Aws_launch_template_placement_399 struct {

    Affinity *string

    Availability_zone *string

    Group_name *string

    Host_id *string

    Spread_domain *string

    Tenancy *string

}

type Aws_launch_template_tag_specifications_400 struct {

    Resource_type *string

    Tags *map[string]string

}

type Aws_launch_template struct {

    Aws_launch_template_id *string `lyra:"ignore"`

    Arn *string

    Block_device_mappings *[]Aws_launch_template_block_device_mappings_387

    Capacity_reservation_specification *[]Aws_launch_template_capacity_reservation_specification_389

    Credit_specification *[]Aws_launch_template_credit_specification_391

    Default_version *int

    Description *string

    Disable_api_termination *bool

    Ebs_optimized *string

    Elastic_gpu_specifications *[]Aws_launch_template_elastic_gpu_specifications_392

    Iam_instance_profile *[]Aws_launch_template_iam_instance_profile_393

    Image_id *string

    Instance_initiated_shutdown_behavior *string

    Instance_market_options *[]Aws_launch_template_instance_market_options_394

    Instance_type *string

    Kernel_id *string

    Key_name *string

    Latest_version *int

    License_specification *[]Aws_launch_template_license_specification_396

    Monitoring *[]Aws_launch_template_monitoring_397

    Name *string

    Name_prefix *string

    Network_interfaces *[]Aws_launch_template_network_interfaces_398

    Placement *[]Aws_launch_template_placement_399

    Ram_disk_id *string

    Security_group_names *[]string

    Tag_specifications *[]Aws_launch_template_tag_specifications_400

    Tags *map[string]string

    User_data *string

    Vpc_security_group_ids *[]string

}

// Aws_launch_templateHandler ...
type Aws_launch_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_launch_templateHandler) Create(desired *Aws_launch_template) (*Aws_launch_template, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_launch_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_launch_templateHandler) Read(externalID string) (*Aws_launch_template, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_launch_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_launch_template{ Aws_launch_template_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_launch_templateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_launch_template", externalID)
}

type Aws_lb_access_logs_401 struct {

    Bucket string

    Enabled *bool

    Prefix *string

}

type Aws_lb_subnet_mapping_402 struct {

    Allocation_id *string

    Subnet_id string

}

type Aws_lb struct {

    Aws_lb_id *string `lyra:"ignore"`

    Access_logs *[]Aws_lb_access_logs_401

    Arn *string

    Arn_suffix *string

    Dns_name *string

    Enable_cross_zone_load_balancing *bool

    Enable_deletion_protection *bool

    Enable_http2 *bool

    Idle_timeout *int

    Internal *bool

    Ip_address_type *string

    Load_balancer_type *string

    Name *string

    Name_prefix *string

    Security_groups *[]string

    Subnet_mapping *[]Aws_lb_subnet_mapping_402

    Subnets *[]string

    Tags *map[string]string

    Vpc_id *string

    Zone_id *string

}

// Aws_lbHandler ...
type Aws_lbHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lbHandler) Create(desired *Aws_lb) (*Aws_lb, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lbHandler) Read(externalID string) (*Aws_lb, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb{ Aws_lb_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lbHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb", externalID)
}

type Aws_lb_cookie_stickiness_policy struct {

    Aws_lb_cookie_stickiness_policy_id *string `lyra:"ignore"`

    Cookie_expiration_period *int

    Lb_port int

    Load_balancer string

    Name string

}

// Aws_lb_cookie_stickiness_policyHandler ...
type Aws_lb_cookie_stickiness_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lb_cookie_stickiness_policyHandler) Create(desired *Aws_lb_cookie_stickiness_policy) (*Aws_lb_cookie_stickiness_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb_cookie_stickiness_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lb_cookie_stickiness_policyHandler) Read(externalID string) (*Aws_lb_cookie_stickiness_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb_cookie_stickiness_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb_cookie_stickiness_policy{ Aws_lb_cookie_stickiness_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lb_cookie_stickiness_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb_cookie_stickiness_policy", externalID)
}

type Aws_lb_listener_default_action_403_authenticate_cognito_404 struct {

    Authentication_request_extra_params *map[string]string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    User_pool_arn string

    User_pool_client_id string

    User_pool_domain string

}

type Aws_lb_listener_default_action_403_authenticate_oidc_405 struct {

    Authentication_request_extra_params *map[string]string

    Authorization_endpoint string

    Client_id string

    Client_secret string

    Issuer string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    Token_endpoint string

    User_info_endpoint string

}

type Aws_lb_listener_default_action_403_fixed_response_406 struct {

    Content_type string

    Message_body *string

    Status_code *string

}

type Aws_lb_listener_default_action_403_redirect_407 struct {

    Host *string

    Path *string

    Port *string

    Protocol *string

    Query *string

    Status_code string

}

type Aws_lb_listener_default_action_403 struct {

    Authenticate_cognito *[]Aws_lb_listener_default_action_403_authenticate_cognito_404

    Authenticate_oidc *[]Aws_lb_listener_default_action_403_authenticate_oidc_405

    Fixed_response *[]Aws_lb_listener_default_action_403_fixed_response_406

    Order *int

    Redirect *[]Aws_lb_listener_default_action_403_redirect_407

    Target_group_arn *string

    Type string

}

type Aws_lb_listener struct {

    Aws_lb_listener_id *string `lyra:"ignore"`

    Arn *string

    Certificate_arn *string

    Default_action []Aws_lb_listener_default_action_403

    Load_balancer_arn string

    Port int

    Protocol *string

    Ssl_policy *string

}

// Aws_lb_listenerHandler ...
type Aws_lb_listenerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lb_listenerHandler) Create(desired *Aws_lb_listener) (*Aws_lb_listener, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb_listener", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lb_listenerHandler) Read(externalID string) (*Aws_lb_listener, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb_listener", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb_listener{ Aws_lb_listener_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lb_listenerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb_listener", externalID)
}

type Aws_lb_listener_certificate struct {

    Aws_lb_listener_certificate_id *string `lyra:"ignore"`

    Certificate_arn string

    Listener_arn string

}

// Aws_lb_listener_certificateHandler ...
type Aws_lb_listener_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lb_listener_certificateHandler) Create(desired *Aws_lb_listener_certificate) (*Aws_lb_listener_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb_listener_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lb_listener_certificateHandler) Read(externalID string) (*Aws_lb_listener_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb_listener_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb_listener_certificate{ Aws_lb_listener_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lb_listener_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb_listener_certificate", externalID)
}

type Aws_lb_listener_rule_action_408_authenticate_cognito_409 struct {

    Authentication_request_extra_params *map[string]string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    User_pool_arn string

    User_pool_client_id string

    User_pool_domain string

}

type Aws_lb_listener_rule_action_408_authenticate_oidc_410 struct {

    Authentication_request_extra_params *map[string]string

    Authorization_endpoint string

    Client_id string

    Client_secret string

    Issuer string

    On_unauthenticated_request *string

    Scope *string

    Session_cookie_name *string

    Session_timeout *int

    Token_endpoint string

    User_info_endpoint string

}

type Aws_lb_listener_rule_action_408_fixed_response_411 struct {

    Content_type string

    Message_body *string

    Status_code *string

}

type Aws_lb_listener_rule_action_408_redirect_412 struct {

    Host *string

    Path *string

    Port *string

    Protocol *string

    Query *string

    Status_code string

}

type Aws_lb_listener_rule_action_408 struct {

    Authenticate_cognito *[]Aws_lb_listener_rule_action_408_authenticate_cognito_409

    Authenticate_oidc *[]Aws_lb_listener_rule_action_408_authenticate_oidc_410

    Fixed_response *[]Aws_lb_listener_rule_action_408_fixed_response_411

    Order *int

    Redirect *[]Aws_lb_listener_rule_action_408_redirect_412

    Target_group_arn *string

    Type string

}

type Aws_lb_listener_rule_condition_413 struct {

    Field *string

    Values *[]string

}

type Aws_lb_listener_rule struct {

    Aws_lb_listener_rule_id *string `lyra:"ignore"`

    Action []Aws_lb_listener_rule_action_408

    Arn *string

    Condition []Aws_lb_listener_rule_condition_413

    Listener_arn string

    Priority *int

}

// Aws_lb_listener_ruleHandler ...
type Aws_lb_listener_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lb_listener_ruleHandler) Create(desired *Aws_lb_listener_rule) (*Aws_lb_listener_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb_listener_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lb_listener_ruleHandler) Read(externalID string) (*Aws_lb_listener_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb_listener_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb_listener_rule{ Aws_lb_listener_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lb_listener_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb_listener_rule", externalID)
}

type Aws_lb_ssl_negotiation_policy_attribute_414 struct {

    Name string

    Value string

}

type Aws_lb_ssl_negotiation_policy struct {

    Aws_lb_ssl_negotiation_policy_id *string `lyra:"ignore"`

    Attribute *[]Aws_lb_ssl_negotiation_policy_attribute_414

    Lb_port int

    Load_balancer string

    Name string

}

// Aws_lb_ssl_negotiation_policyHandler ...
type Aws_lb_ssl_negotiation_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lb_ssl_negotiation_policyHandler) Create(desired *Aws_lb_ssl_negotiation_policy) (*Aws_lb_ssl_negotiation_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb_ssl_negotiation_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lb_ssl_negotiation_policyHandler) Read(externalID string) (*Aws_lb_ssl_negotiation_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb_ssl_negotiation_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb_ssl_negotiation_policy{ Aws_lb_ssl_negotiation_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lb_ssl_negotiation_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb_ssl_negotiation_policy", externalID)
}

type Aws_lb_target_group_health_check_415 struct {

    Healthy_threshold *int

    Interval *int

    Matcher *string

    Path *string

    Port *string

    Protocol *string

    Timeout *int

    Unhealthy_threshold *int

}

type Aws_lb_target_group_stickiness_416 struct {

    Cookie_duration *int

    Enabled *bool

    Type string

}

type Aws_lb_target_group struct {

    Aws_lb_target_group_id *string `lyra:"ignore"`

    Arn *string

    Arn_suffix *string

    Deregistration_delay *int

    Health_check *[]Aws_lb_target_group_health_check_415

    Name *string

    Name_prefix *string

    Port *int

    Protocol *string

    Proxy_protocol_v2 *bool

    Slow_start *int

    Stickiness *[]Aws_lb_target_group_stickiness_416

    Tags *map[string]string

    Target_type *string

    Vpc_id *string

}

// Aws_lb_target_groupHandler ...
type Aws_lb_target_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lb_target_groupHandler) Create(desired *Aws_lb_target_group) (*Aws_lb_target_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb_target_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lb_target_groupHandler) Read(externalID string) (*Aws_lb_target_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb_target_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb_target_group{ Aws_lb_target_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lb_target_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb_target_group", externalID)
}

type Aws_lb_target_group_attachment struct {

    Aws_lb_target_group_attachment_id *string `lyra:"ignore"`

    Availability_zone *string

    Port *int

    Target_group_arn string

    Target_id string

}

// Aws_lb_target_group_attachmentHandler ...
type Aws_lb_target_group_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lb_target_group_attachmentHandler) Create(desired *Aws_lb_target_group_attachment) (*Aws_lb_target_group_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lb_target_group_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lb_target_group_attachmentHandler) Read(externalID string) (*Aws_lb_target_group_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lb_target_group_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lb_target_group_attachment{ Aws_lb_target_group_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lb_target_group_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lb_target_group_attachment", externalID)
}

type Aws_licensemanager_association struct {

    Aws_licensemanager_association_id *string `lyra:"ignore"`

    License_configuration_arn string

    Resource_arn string

}

// Aws_licensemanager_associationHandler ...
type Aws_licensemanager_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_licensemanager_associationHandler) Create(desired *Aws_licensemanager_association) (*Aws_licensemanager_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_licensemanager_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_licensemanager_associationHandler) Read(externalID string) (*Aws_licensemanager_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_licensemanager_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_licensemanager_association{ Aws_licensemanager_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_licensemanager_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_licensemanager_association", externalID)
}

type Aws_licensemanager_license_configuration struct {

    Aws_licensemanager_license_configuration_id *string `lyra:"ignore"`

    Description *string

    License_count *int

    License_count_hard_limit *bool

    License_counting_type string

    License_rules *[]string

    Name string

    Tags *map[string]string

}

// Aws_licensemanager_license_configurationHandler ...
type Aws_licensemanager_license_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_licensemanager_license_configurationHandler) Create(desired *Aws_licensemanager_license_configuration) (*Aws_licensemanager_license_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_licensemanager_license_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_licensemanager_license_configurationHandler) Read(externalID string) (*Aws_licensemanager_license_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_licensemanager_license_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_licensemanager_license_configuration{ Aws_licensemanager_license_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_licensemanager_license_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_licensemanager_license_configuration", externalID)
}

type Aws_lightsail_domain struct {

    Aws_lightsail_domain_id *string `lyra:"ignore"`

    Arn *string

    Domain_name string

}

// Aws_lightsail_domainHandler ...
type Aws_lightsail_domainHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lightsail_domainHandler) Create(desired *Aws_lightsail_domain) (*Aws_lightsail_domain, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lightsail_domain", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lightsail_domainHandler) Read(externalID string) (*Aws_lightsail_domain, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lightsail_domain", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lightsail_domain{ Aws_lightsail_domain_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lightsail_domainHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lightsail_domain", externalID)
}

type Aws_lightsail_instance struct {

    Aws_lightsail_instance_id *string `lyra:"ignore"`

    Arn *string

    Availability_zone string

    Blueprint_id string

    Bundle_id string

    Cpu_count *int

    Created_at *string

    Ipv6_address *string

    Is_static_ip *bool

    Key_pair_name *string

    Name string

    Private_ip_address *string

    Public_ip_address *string

    Ram_size *int

    User_data *string

    Username *string

}

// Aws_lightsail_instanceHandler ...
type Aws_lightsail_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lightsail_instanceHandler) Create(desired *Aws_lightsail_instance) (*Aws_lightsail_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lightsail_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lightsail_instanceHandler) Read(externalID string) (*Aws_lightsail_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lightsail_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lightsail_instance{ Aws_lightsail_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lightsail_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lightsail_instance", externalID)
}

type Aws_lightsail_key_pair struct {

    Aws_lightsail_key_pair_id *string `lyra:"ignore"`

    Arn *string

    Encrypted_fingerprint *string

    Encrypted_private_key *string

    Fingerprint *string

    Name *string

    Name_prefix *string

    Pgp_key *string

    Private_key *string

    Public_key *string

}

// Aws_lightsail_key_pairHandler ...
type Aws_lightsail_key_pairHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lightsail_key_pairHandler) Create(desired *Aws_lightsail_key_pair) (*Aws_lightsail_key_pair, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lightsail_key_pair", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lightsail_key_pairHandler) Read(externalID string) (*Aws_lightsail_key_pair, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lightsail_key_pair", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lightsail_key_pair{ Aws_lightsail_key_pair_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lightsail_key_pairHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lightsail_key_pair", externalID)
}

type Aws_lightsail_static_ip struct {

    Aws_lightsail_static_ip_id *string `lyra:"ignore"`

    Arn *string

    Ip_address *string

    Name string

    Support_code *string

}

// Aws_lightsail_static_ipHandler ...
type Aws_lightsail_static_ipHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lightsail_static_ipHandler) Create(desired *Aws_lightsail_static_ip) (*Aws_lightsail_static_ip, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lightsail_static_ip", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lightsail_static_ipHandler) Read(externalID string) (*Aws_lightsail_static_ip, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lightsail_static_ip", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lightsail_static_ip{ Aws_lightsail_static_ip_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lightsail_static_ipHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lightsail_static_ip", externalID)
}

type Aws_lightsail_static_ip_attachment struct {

    Aws_lightsail_static_ip_attachment_id *string `lyra:"ignore"`

    Instance_name string

    Static_ip_name string

}

// Aws_lightsail_static_ip_attachmentHandler ...
type Aws_lightsail_static_ip_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_lightsail_static_ip_attachmentHandler) Create(desired *Aws_lightsail_static_ip_attachment) (*Aws_lightsail_static_ip_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_lightsail_static_ip_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_lightsail_static_ip_attachmentHandler) Read(externalID string) (*Aws_lightsail_static_ip_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_lightsail_static_ip_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_lightsail_static_ip_attachment{ Aws_lightsail_static_ip_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_lightsail_static_ip_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_lightsail_static_ip_attachment", externalID)
}

type Aws_load_balancer_backend_server_policy struct {

    Aws_load_balancer_backend_server_policy_id *string `lyra:"ignore"`

    Instance_port int

    Load_balancer_name string

    Policy_names *[]string

}

// Aws_load_balancer_backend_server_policyHandler ...
type Aws_load_balancer_backend_server_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_load_balancer_backend_server_policyHandler) Create(desired *Aws_load_balancer_backend_server_policy) (*Aws_load_balancer_backend_server_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_load_balancer_backend_server_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_load_balancer_backend_server_policyHandler) Read(externalID string) (*Aws_load_balancer_backend_server_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_load_balancer_backend_server_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_load_balancer_backend_server_policy{ Aws_load_balancer_backend_server_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_load_balancer_backend_server_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_load_balancer_backend_server_policy", externalID)
}

type Aws_load_balancer_listener_policy struct {

    Aws_load_balancer_listener_policy_id *string `lyra:"ignore"`

    Load_balancer_name string

    Load_balancer_port int

    Policy_names *[]string

}

// Aws_load_balancer_listener_policyHandler ...
type Aws_load_balancer_listener_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_load_balancer_listener_policyHandler) Create(desired *Aws_load_balancer_listener_policy) (*Aws_load_balancer_listener_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_load_balancer_listener_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_load_balancer_listener_policyHandler) Read(externalID string) (*Aws_load_balancer_listener_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_load_balancer_listener_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_load_balancer_listener_policy{ Aws_load_balancer_listener_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_load_balancer_listener_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_load_balancer_listener_policy", externalID)
}

type Aws_load_balancer_policy_policy_attribute_417 struct {

    Name *string

    Value *string

}

type Aws_load_balancer_policy struct {

    Aws_load_balancer_policy_id *string `lyra:"ignore"`

    Load_balancer_name string

    Policy_attribute *[]Aws_load_balancer_policy_policy_attribute_417

    Policy_name string

    Policy_type_name string

}

// Aws_load_balancer_policyHandler ...
type Aws_load_balancer_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_load_balancer_policyHandler) Create(desired *Aws_load_balancer_policy) (*Aws_load_balancer_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_load_balancer_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_load_balancer_policyHandler) Read(externalID string) (*Aws_load_balancer_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_load_balancer_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_load_balancer_policy{ Aws_load_balancer_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_load_balancer_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_load_balancer_policy", externalID)
}

type Aws_macie_member_account_association struct {

    Aws_macie_member_account_association_id *string `lyra:"ignore"`

    Member_account_id string

}

// Aws_macie_member_account_associationHandler ...
type Aws_macie_member_account_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_macie_member_account_associationHandler) Create(desired *Aws_macie_member_account_association) (*Aws_macie_member_account_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_macie_member_account_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_macie_member_account_associationHandler) Read(externalID string) (*Aws_macie_member_account_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_macie_member_account_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_macie_member_account_association{ Aws_macie_member_account_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_macie_member_account_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_macie_member_account_association", externalID)
}

type Aws_macie_s3_bucket_association_classification_type_418 struct {

    Continuous *string

    One_time *string

}

type Aws_macie_s3_bucket_association struct {

    Aws_macie_s3_bucket_association_id *string `lyra:"ignore"`

    Bucket_name string

    Classification_type *[]Aws_macie_s3_bucket_association_classification_type_418

    Member_account_id *string

    Prefix *string

}

// Aws_macie_s3_bucket_associationHandler ...
type Aws_macie_s3_bucket_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_macie_s3_bucket_associationHandler) Create(desired *Aws_macie_s3_bucket_association) (*Aws_macie_s3_bucket_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_macie_s3_bucket_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_macie_s3_bucket_associationHandler) Read(externalID string) (*Aws_macie_s3_bucket_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_macie_s3_bucket_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_macie_s3_bucket_association{ Aws_macie_s3_bucket_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_macie_s3_bucket_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_macie_s3_bucket_association", externalID)
}

type Aws_main_route_table_association struct {

    Aws_main_route_table_association_id *string `lyra:"ignore"`

    Original_route_table_id *string

    Route_table_id string

    Vpc_id string

}

// Aws_main_route_table_associationHandler ...
type Aws_main_route_table_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_main_route_table_associationHandler) Create(desired *Aws_main_route_table_association) (*Aws_main_route_table_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_main_route_table_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_main_route_table_associationHandler) Read(externalID string) (*Aws_main_route_table_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_main_route_table_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_main_route_table_association{ Aws_main_route_table_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_main_route_table_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_main_route_table_association", externalID)
}

type Aws_media_package_channel_hls_ingest_419_ingest_endpoints_420 struct {

    Password *string

    Url *string

    Username *string

}

type Aws_media_package_channel_hls_ingest_419 struct {

    Ingest_endpoints *[]Aws_media_package_channel_hls_ingest_419_ingest_endpoints_420

}

type Aws_media_package_channel struct {

    Aws_media_package_channel_id *string `lyra:"ignore"`

    Arn *string

    Channel_id string

    Description *string

    Hls_ingest *[]Aws_media_package_channel_hls_ingest_419

}

// Aws_media_package_channelHandler ...
type Aws_media_package_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_media_package_channelHandler) Create(desired *Aws_media_package_channel) (*Aws_media_package_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_media_package_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_media_package_channelHandler) Read(externalID string) (*Aws_media_package_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_media_package_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_media_package_channel{ Aws_media_package_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_media_package_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_media_package_channel", externalID)
}

type Aws_media_store_container struct {

    Aws_media_store_container_id *string `lyra:"ignore"`

    Arn *string

    Endpoint *string

    Name string

}

// Aws_media_store_containerHandler ...
type Aws_media_store_containerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_media_store_containerHandler) Create(desired *Aws_media_store_container) (*Aws_media_store_container, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_media_store_container", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_media_store_containerHandler) Read(externalID string) (*Aws_media_store_container, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_media_store_container", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_media_store_container{ Aws_media_store_container_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_media_store_containerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_media_store_container", externalID)
}

type Aws_media_store_container_policy struct {

    Aws_media_store_container_policy_id *string `lyra:"ignore"`

    Container_name string

    Policy string

}

// Aws_media_store_container_policyHandler ...
type Aws_media_store_container_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_media_store_container_policyHandler) Create(desired *Aws_media_store_container_policy) (*Aws_media_store_container_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_media_store_container_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_media_store_container_policyHandler) Read(externalID string) (*Aws_media_store_container_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_media_store_container_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_media_store_container_policy{ Aws_media_store_container_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_media_store_container_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_media_store_container_policy", externalID)
}

type Aws_mq_broker_configuration_421 struct {

    Id *string

    Revision *int

}

type Aws_mq_broker_instances_422 struct {

    Console_url *string

    Endpoints *[]string

    Ip_address *string

}

type Aws_mq_broker_logs_423 struct {

    Audit *bool

    General *bool

}

type Aws_mq_broker_maintenance_window_start_time_424 struct {

    Day_of_week string

    Time_of_day string

    Time_zone string

}

type Aws_mq_broker_user_425 struct {

    Console_access *bool

    Groups *[]string

    Password string

    Username string

}

type Aws_mq_broker struct {

    Aws_mq_broker_id *string `lyra:"ignore"`

    Apply_immediately *bool

    Arn *string

    Auto_minor_version_upgrade *bool

    Broker_name string

    Configuration *[]Aws_mq_broker_configuration_421

    Deployment_mode *string

    Engine_type string

    Engine_version string

    Host_instance_type string

    Instances *[]Aws_mq_broker_instances_422

    Logs *[]Aws_mq_broker_logs_423

    Maintenance_window_start_time *[]Aws_mq_broker_maintenance_window_start_time_424

    Publicly_accessible *bool

    Security_groups []string

    Subnet_ids *[]string

    Tags *map[string]string

    User []Aws_mq_broker_user_425

}

// Aws_mq_brokerHandler ...
type Aws_mq_brokerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_mq_brokerHandler) Create(desired *Aws_mq_broker) (*Aws_mq_broker, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_mq_broker", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_mq_brokerHandler) Read(externalID string) (*Aws_mq_broker, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_mq_broker", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_mq_broker{ Aws_mq_broker_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_mq_brokerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_mq_broker", externalID)
}

type Aws_mq_configuration struct {

    Aws_mq_configuration_id *string `lyra:"ignore"`

    Arn *string

    Data string

    Description *string

    Engine_type string

    Engine_version string

    Latest_revision *int

    Name string

    Tags *map[string]string

}

// Aws_mq_configurationHandler ...
type Aws_mq_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_mq_configurationHandler) Create(desired *Aws_mq_configuration) (*Aws_mq_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_mq_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_mq_configurationHandler) Read(externalID string) (*Aws_mq_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_mq_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_mq_configuration{ Aws_mq_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_mq_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_mq_configuration", externalID)
}

type Aws_nat_gateway struct {

    Aws_nat_gateway_id *string `lyra:"ignore"`

    Allocation_id string

    Network_interface_id *string

    Private_ip *string

    Public_ip *string

    Subnet_id string

    Tags *map[string]string

}

// Aws_nat_gatewayHandler ...
type Aws_nat_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_nat_gatewayHandler) Create(desired *Aws_nat_gateway) (*Aws_nat_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_nat_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_nat_gatewayHandler) Read(externalID string) (*Aws_nat_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_nat_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_nat_gateway{ Aws_nat_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_nat_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_nat_gateway", externalID)
}

type Aws_neptune_cluster struct {

    Aws_neptune_cluster_id *string `lyra:"ignore"`

    Apply_immediately *bool

    Arn *string

    Availability_zones *[]string

    Backup_retention_period *int

    Cluster_identifier *string

    Cluster_identifier_prefix *string

    Cluster_members *[]string

    Cluster_resource_id *string

    Endpoint *string

    Engine *string

    Engine_version *string

    Final_snapshot_identifier *string

    Hosted_zone_id *string

    Iam_database_authentication_enabled *bool

    Iam_roles *[]string

    Kms_key_arn *string

    Neptune_cluster_parameter_group_name *string

    Neptune_subnet_group_name *string

    Port *int

    Preferred_backup_window *string

    Preferred_maintenance_window *string

    Reader_endpoint *string

    Replication_source_identifier *string

    Skip_final_snapshot *bool

    Snapshot_identifier *string

    Storage_encrypted *bool

    Tags *map[string]string

    Vpc_security_group_ids *[]string

}

// Aws_neptune_clusterHandler ...
type Aws_neptune_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_neptune_clusterHandler) Create(desired *Aws_neptune_cluster) (*Aws_neptune_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_neptune_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_neptune_clusterHandler) Read(externalID string) (*Aws_neptune_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_neptune_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_neptune_cluster{ Aws_neptune_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_neptune_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_neptune_cluster", externalID)
}

type Aws_neptune_cluster_instance struct {

    Aws_neptune_cluster_instance_id *string `lyra:"ignore"`

    Address *string

    Apply_immediately *bool

    Arn *string

    Auto_minor_version_upgrade *bool

    Availability_zone *string

    Cluster_identifier string

    Dbi_resource_id *string

    Endpoint *string

    Engine *string

    Engine_version *string

    Identifier *string

    Identifier_prefix *string

    Instance_class string

    Kms_key_arn *string

    Neptune_parameter_group_name *string

    Neptune_subnet_group_name *string

    Port *int

    Preferred_backup_window *string

    Preferred_maintenance_window *string

    Promotion_tier *int

    Publicly_accessible *bool

    Storage_encrypted *bool

    Tags *map[string]string

    Writer *bool

}

// Aws_neptune_cluster_instanceHandler ...
type Aws_neptune_cluster_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_neptune_cluster_instanceHandler) Create(desired *Aws_neptune_cluster_instance) (*Aws_neptune_cluster_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_neptune_cluster_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_neptune_cluster_instanceHandler) Read(externalID string) (*Aws_neptune_cluster_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_neptune_cluster_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_neptune_cluster_instance{ Aws_neptune_cluster_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_neptune_cluster_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_neptune_cluster_instance", externalID)
}

type Aws_neptune_cluster_parameter_group_parameter_426 struct {

    Apply_method *string

    Name string

    Value string

}

type Aws_neptune_cluster_parameter_group struct {

    Aws_neptune_cluster_parameter_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Family string

    Name *string

    Name_prefix *string

    Parameter *[]Aws_neptune_cluster_parameter_group_parameter_426

    Tags *map[string]string

}

// Aws_neptune_cluster_parameter_groupHandler ...
type Aws_neptune_cluster_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_neptune_cluster_parameter_groupHandler) Create(desired *Aws_neptune_cluster_parameter_group) (*Aws_neptune_cluster_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_neptune_cluster_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_neptune_cluster_parameter_groupHandler) Read(externalID string) (*Aws_neptune_cluster_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_neptune_cluster_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_neptune_cluster_parameter_group{ Aws_neptune_cluster_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_neptune_cluster_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_neptune_cluster_parameter_group", externalID)
}

type Aws_neptune_cluster_snapshot struct {

    Aws_neptune_cluster_snapshot_id *string `lyra:"ignore"`

    Allocated_storage *int

    Availability_zones *[]string

    Db_cluster_identifier string

    Db_cluster_snapshot_arn *string

    Db_cluster_snapshot_identifier string

    Engine *string

    Engine_version *string

    Kms_key_id *string

    License_model *string

    Port *int

    Snapshot_type *string

    Source_db_cluster_snapshot_arn *string

    Status *string

    Storage_encrypted *bool

    Vpc_id *string

}

// Aws_neptune_cluster_snapshotHandler ...
type Aws_neptune_cluster_snapshotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_neptune_cluster_snapshotHandler) Create(desired *Aws_neptune_cluster_snapshot) (*Aws_neptune_cluster_snapshot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_neptune_cluster_snapshot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_neptune_cluster_snapshotHandler) Read(externalID string) (*Aws_neptune_cluster_snapshot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_neptune_cluster_snapshot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_neptune_cluster_snapshot{ Aws_neptune_cluster_snapshot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_neptune_cluster_snapshotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_neptune_cluster_snapshot", externalID)
}

type Aws_neptune_event_subscription struct {

    Aws_neptune_event_subscription_id *string `lyra:"ignore"`

    Arn *string

    Customer_aws_id *string

    Enabled *bool

    Event_categories *[]string

    Name *string

    Name_prefix *string

    Sns_topic_arn string

    Source_ids *[]string

    Source_type *string

    Tags *map[string]string

}

// Aws_neptune_event_subscriptionHandler ...
type Aws_neptune_event_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_neptune_event_subscriptionHandler) Create(desired *Aws_neptune_event_subscription) (*Aws_neptune_event_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_neptune_event_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_neptune_event_subscriptionHandler) Read(externalID string) (*Aws_neptune_event_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_neptune_event_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_neptune_event_subscription{ Aws_neptune_event_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_neptune_event_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_neptune_event_subscription", externalID)
}

type Aws_neptune_parameter_group_parameter_427 struct {

    Apply_method *string

    Name string

    Value string

}

type Aws_neptune_parameter_group struct {

    Aws_neptune_parameter_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Family string

    Name string

    Parameter *[]Aws_neptune_parameter_group_parameter_427

    Tags *map[string]string

}

// Aws_neptune_parameter_groupHandler ...
type Aws_neptune_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_neptune_parameter_groupHandler) Create(desired *Aws_neptune_parameter_group) (*Aws_neptune_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_neptune_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_neptune_parameter_groupHandler) Read(externalID string) (*Aws_neptune_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_neptune_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_neptune_parameter_group{ Aws_neptune_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_neptune_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_neptune_parameter_group", externalID)
}

type Aws_neptune_subnet_group struct {

    Aws_neptune_subnet_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Name *string

    Name_prefix *string

    Subnet_ids []string

    Tags *map[string]string

}

// Aws_neptune_subnet_groupHandler ...
type Aws_neptune_subnet_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_neptune_subnet_groupHandler) Create(desired *Aws_neptune_subnet_group) (*Aws_neptune_subnet_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_neptune_subnet_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_neptune_subnet_groupHandler) Read(externalID string) (*Aws_neptune_subnet_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_neptune_subnet_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_neptune_subnet_group{ Aws_neptune_subnet_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_neptune_subnet_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_neptune_subnet_group", externalID)
}

type Aws_network_acl_egress_428 struct {

    Action string

    Cidr_block *string

    From_port int

    Icmp_code *int

    Icmp_type *int

    Ipv6_cidr_block *string

    Protocol string

    Rule_no int

    To_port int

}

type Aws_network_acl_ingress_429 struct {

    Action string

    Cidr_block *string

    From_port int

    Icmp_code *int

    Icmp_type *int

    Ipv6_cidr_block *string

    Protocol string

    Rule_no int

    To_port int

}

type Aws_network_acl struct {

    Aws_network_acl_id *string `lyra:"ignore"`

    Egress *[]Aws_network_acl_egress_428

    Ingress *[]Aws_network_acl_ingress_429

    Owner_id *string

    Subnet_id *string

    Subnet_ids *[]string

    Tags *map[string]string

    Vpc_id string

}

// Aws_network_aclHandler ...
type Aws_network_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_network_aclHandler) Create(desired *Aws_network_acl) (*Aws_network_acl, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_network_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_network_aclHandler) Read(externalID string) (*Aws_network_acl, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_network_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_network_acl{ Aws_network_acl_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_network_aclHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_network_acl", externalID)
}

type Aws_network_acl_rule struct {

    Aws_network_acl_rule_id *string `lyra:"ignore"`

    Cidr_block *string

    Egress *bool

    From_port *int

    Icmp_code *string

    Icmp_type *string

    Ipv6_cidr_block *string

    Network_acl_id string

    Protocol string

    Rule_action string

    Rule_number int

    To_port *int

}

// Aws_network_acl_ruleHandler ...
type Aws_network_acl_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_network_acl_ruleHandler) Create(desired *Aws_network_acl_rule) (*Aws_network_acl_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_network_acl_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_network_acl_ruleHandler) Read(externalID string) (*Aws_network_acl_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_network_acl_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_network_acl_rule{ Aws_network_acl_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_network_acl_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_network_acl_rule", externalID)
}

type Aws_network_interface_attachment_430 struct {

    Attachment_id *string

    Device_index int

    Instance string

}

type Aws_network_interface struct {

    Aws_network_interface_id *string `lyra:"ignore"`

    Attachment *[]Aws_network_interface_attachment_430

    Description *string

    Private_dns_name *string

    Private_ip *string

    Private_ips *[]string

    Private_ips_count *int

    Security_groups *[]string

    Source_dest_check *bool

    Subnet_id string

    Tags *map[string]string

}

// Aws_network_interfaceHandler ...
type Aws_network_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_network_interfaceHandler) Create(desired *Aws_network_interface) (*Aws_network_interface, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_network_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_network_interfaceHandler) Read(externalID string) (*Aws_network_interface, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_network_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_network_interface{ Aws_network_interface_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_network_interfaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_network_interface", externalID)
}

type Aws_network_interface_attachment struct {

    Aws_network_interface_attachment_id *string `lyra:"ignore"`

    Attachment_id *string

    Device_index int

    Instance_id string

    Network_interface_id string

    Status *string

}

// Aws_network_interface_attachmentHandler ...
type Aws_network_interface_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_network_interface_attachmentHandler) Create(desired *Aws_network_interface_attachment) (*Aws_network_interface_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_network_interface_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_network_interface_attachmentHandler) Read(externalID string) (*Aws_network_interface_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_network_interface_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_network_interface_attachment{ Aws_network_interface_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_network_interface_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_network_interface_attachment", externalID)
}

type Aws_network_interface_sg_attachment struct {

    Aws_network_interface_sg_attachment_id *string `lyra:"ignore"`

    Network_interface_id string

    Security_group_id string

}

// Aws_network_interface_sg_attachmentHandler ...
type Aws_network_interface_sg_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_network_interface_sg_attachmentHandler) Create(desired *Aws_network_interface_sg_attachment) (*Aws_network_interface_sg_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_network_interface_sg_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_network_interface_sg_attachmentHandler) Read(externalID string) (*Aws_network_interface_sg_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_network_interface_sg_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_network_interface_sg_attachment{ Aws_network_interface_sg_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_network_interface_sg_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_network_interface_sg_attachment", externalID)
}

type Aws_opsworks_application_app_source_431 struct {

    Password *string

    Revision *string

    Ssh_key *string

    Type string

    Url *string

    Username *string

}

type Aws_opsworks_application_environment_432 struct {

    Key string

    Secure *bool

    Value string

}

type Aws_opsworks_application_ssl_configuration_433 struct {

    Certificate string

    Chain *string

    Private_key string

}

type Aws_opsworks_application struct {

    Aws_opsworks_application_id *string `lyra:"ignore"`

    App_source *[]Aws_opsworks_application_app_source_431

    Auto_bundle_on_deploy *string

    Aws_flow_ruby_settings *string

    Data_source_arn *string

    Data_source_database_name *string

    Data_source_type *string

    Description *string

    Document_root *string

    Domains *[]string

    Enable_ssl *bool

    Environment *[]Aws_opsworks_application_environment_432

    Name string

    Rails_env *string

    Short_name *string

    Ssl_configuration *[]Aws_opsworks_application_ssl_configuration_433

    Stack_id string

    Type string

}

// Aws_opsworks_applicationHandler ...
type Aws_opsworks_applicationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_applicationHandler) Create(desired *Aws_opsworks_application) (*Aws_opsworks_application, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_application", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_applicationHandler) Read(externalID string) (*Aws_opsworks_application, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_application", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_application{ Aws_opsworks_application_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_applicationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_application", externalID)
}

type Aws_opsworks_custom_layer_ebs_volume_434 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_custom_layer struct {

    Aws_opsworks_custom_layer_id *string `lyra:"ignore"`

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_custom_layer_ebs_volume_434

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name string

    Short_name string

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_custom_layerHandler ...
type Aws_opsworks_custom_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_custom_layerHandler) Create(desired *Aws_opsworks_custom_layer) (*Aws_opsworks_custom_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_custom_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_custom_layerHandler) Read(externalID string) (*Aws_opsworks_custom_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_custom_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_custom_layer{ Aws_opsworks_custom_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_custom_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_custom_layer", externalID)
}

type Aws_opsworks_ganglia_layer_ebs_volume_435 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_ganglia_layer struct {

    Aws_opsworks_ganglia_layer_id *string `lyra:"ignore"`

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_ganglia_layer_ebs_volume_435

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name *string

    Password string

    Stack_id string

    System_packages *[]string

    Url *string

    Use_ebs_optimized_instances *bool

    Username *string

}

// Aws_opsworks_ganglia_layerHandler ...
type Aws_opsworks_ganglia_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_ganglia_layerHandler) Create(desired *Aws_opsworks_ganglia_layer) (*Aws_opsworks_ganglia_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_ganglia_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_ganglia_layerHandler) Read(externalID string) (*Aws_opsworks_ganglia_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_ganglia_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_ganglia_layer{ Aws_opsworks_ganglia_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_ganglia_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_ganglia_layer", externalID)
}

type Aws_opsworks_haproxy_layer_ebs_volume_436 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_haproxy_layer struct {

    Aws_opsworks_haproxy_layer_id *string `lyra:"ignore"`

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_haproxy_layer_ebs_volume_436

    Elastic_load_balancer *string

    Healthcheck_method *string

    Healthcheck_url *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name *string

    Stack_id string

    Stats_enabled *bool

    Stats_password string

    Stats_url *string

    Stats_user *string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_haproxy_layerHandler ...
type Aws_opsworks_haproxy_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_haproxy_layerHandler) Create(desired *Aws_opsworks_haproxy_layer) (*Aws_opsworks_haproxy_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_haproxy_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_haproxy_layerHandler) Read(externalID string) (*Aws_opsworks_haproxy_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_haproxy_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_haproxy_layer{ Aws_opsworks_haproxy_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_haproxy_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_haproxy_layer", externalID)
}

type Aws_opsworks_instance_ebs_block_device_437 struct {

    Delete_on_termination *bool

    Device_name string

    Iops *int

    Snapshot_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_opsworks_instance_ephemeral_block_device_438 struct {

    Device_name string

    Virtual_name string

}

type Aws_opsworks_instance_root_block_device_439 struct {

    Delete_on_termination *bool

    Iops *int

    Volume_size *int

    Volume_type *string

}

type Aws_opsworks_instance struct {

    Aws_opsworks_instance_id *string `lyra:"ignore"`

    Agent_version *string

    Ami_id *string

    Architecture *string

    Auto_scaling_type *string

    Availability_zone *string

    Created_at *string

    Delete_ebs *bool

    Delete_eip *bool

    Ebs_block_device *[]Aws_opsworks_instance_ebs_block_device_437

    Ebs_optimized *bool

    Ec2_instance_id *string

    Ecs_cluster_arn *string

    Elastic_ip *string

    Ephemeral_block_device *[]Aws_opsworks_instance_ephemeral_block_device_438

    Hostname *string

    Infrastructure_class *string

    Install_updates_on_boot *bool

    Instance_profile_arn *string

    Instance_type *string

    Last_service_error_id *string

    Layer_ids []string

    Os *string

    Platform *string

    Private_dns *string

    Private_ip *string

    Public_dns *string

    Public_ip *string

    Registered_by *string

    Reported_agent_version *string

    Reported_os_family *string

    Reported_os_name *string

    Reported_os_version *string

    Root_block_device *[]Aws_opsworks_instance_root_block_device_439

    Root_device_type *string

    Root_device_volume_id *string

    Security_group_ids *[]string

    Ssh_host_dsa_key_fingerprint *string

    Ssh_host_rsa_key_fingerprint *string

    Ssh_key_name *string

    Stack_id string

    State *string

    Status *string

    Subnet_id *string

    Tenancy *string

    Virtualization_type *string

}

// Aws_opsworks_instanceHandler ...
type Aws_opsworks_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_instanceHandler) Create(desired *Aws_opsworks_instance) (*Aws_opsworks_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_instanceHandler) Read(externalID string) (*Aws_opsworks_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_instance{ Aws_opsworks_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_instance", externalID)
}

type Aws_opsworks_java_app_layer_ebs_volume_440 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_java_app_layer struct {

    Aws_opsworks_java_app_layer_id *string `lyra:"ignore"`

    App_server *string

    App_server_version *string

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_java_app_layer_ebs_volume_440

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Jvm_options *string

    Jvm_type *string

    Jvm_version *string

    Name *string

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_java_app_layerHandler ...
type Aws_opsworks_java_app_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_java_app_layerHandler) Create(desired *Aws_opsworks_java_app_layer) (*Aws_opsworks_java_app_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_java_app_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_java_app_layerHandler) Read(externalID string) (*Aws_opsworks_java_app_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_java_app_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_java_app_layer{ Aws_opsworks_java_app_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_java_app_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_java_app_layer", externalID)
}

type Aws_opsworks_memcached_layer_ebs_volume_441 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_memcached_layer struct {

    Aws_opsworks_memcached_layer_id *string `lyra:"ignore"`

    Allocated_memory *int

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_memcached_layer_ebs_volume_441

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name *string

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_memcached_layerHandler ...
type Aws_opsworks_memcached_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_memcached_layerHandler) Create(desired *Aws_opsworks_memcached_layer) (*Aws_opsworks_memcached_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_memcached_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_memcached_layerHandler) Read(externalID string) (*Aws_opsworks_memcached_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_memcached_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_memcached_layer{ Aws_opsworks_memcached_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_memcached_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_memcached_layer", externalID)
}

type Aws_opsworks_mysql_layer_ebs_volume_442 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_mysql_layer struct {

    Aws_opsworks_mysql_layer_id *string `lyra:"ignore"`

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_mysql_layer_ebs_volume_442

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name *string

    Root_password *string

    Root_password_on_all_instances *bool

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_mysql_layerHandler ...
type Aws_opsworks_mysql_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_mysql_layerHandler) Create(desired *Aws_opsworks_mysql_layer) (*Aws_opsworks_mysql_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_mysql_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_mysql_layerHandler) Read(externalID string) (*Aws_opsworks_mysql_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_mysql_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_mysql_layer{ Aws_opsworks_mysql_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_mysql_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_mysql_layer", externalID)
}

type Aws_opsworks_nodejs_app_layer_ebs_volume_443 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_nodejs_app_layer struct {

    Aws_opsworks_nodejs_app_layer_id *string `lyra:"ignore"`

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_nodejs_app_layer_ebs_volume_443

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name *string

    Nodejs_version *string

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_nodejs_app_layerHandler ...
type Aws_opsworks_nodejs_app_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_nodejs_app_layerHandler) Create(desired *Aws_opsworks_nodejs_app_layer) (*Aws_opsworks_nodejs_app_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_nodejs_app_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_nodejs_app_layerHandler) Read(externalID string) (*Aws_opsworks_nodejs_app_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_nodejs_app_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_nodejs_app_layer{ Aws_opsworks_nodejs_app_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_nodejs_app_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_nodejs_app_layer", externalID)
}

type Aws_opsworks_permission struct {

    Aws_opsworks_permission_id *string `lyra:"ignore"`

    Allow_ssh *bool

    Allow_sudo *bool

    Level *string

    Stack_id *string

    User_arn string

}

// Aws_opsworks_permissionHandler ...
type Aws_opsworks_permissionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_permissionHandler) Create(desired *Aws_opsworks_permission) (*Aws_opsworks_permission, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_permission", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_permissionHandler) Read(externalID string) (*Aws_opsworks_permission, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_permission", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_permission{ Aws_opsworks_permission_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_permissionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_permission", externalID)
}

type Aws_opsworks_php_app_layer_ebs_volume_444 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_php_app_layer struct {

    Aws_opsworks_php_app_layer_id *string `lyra:"ignore"`

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_php_app_layer_ebs_volume_444

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name *string

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_php_app_layerHandler ...
type Aws_opsworks_php_app_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_php_app_layerHandler) Create(desired *Aws_opsworks_php_app_layer) (*Aws_opsworks_php_app_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_php_app_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_php_app_layerHandler) Read(externalID string) (*Aws_opsworks_php_app_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_php_app_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_php_app_layer{ Aws_opsworks_php_app_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_php_app_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_php_app_layer", externalID)
}

type Aws_opsworks_rails_app_layer_ebs_volume_445 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_rails_app_layer struct {

    Aws_opsworks_rails_app_layer_id *string `lyra:"ignore"`

    App_server *string

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Bundler_version *string

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_rails_app_layer_ebs_volume_445

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Manage_bundler *bool

    Name *string

    Passenger_version *string

    Ruby_version *string

    Rubygems_version *string

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_rails_app_layerHandler ...
type Aws_opsworks_rails_app_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_rails_app_layerHandler) Create(desired *Aws_opsworks_rails_app_layer) (*Aws_opsworks_rails_app_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_rails_app_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_rails_app_layerHandler) Read(externalID string) (*Aws_opsworks_rails_app_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_rails_app_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_rails_app_layer{ Aws_opsworks_rails_app_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_rails_app_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_rails_app_layer", externalID)
}

type Aws_opsworks_rds_db_instance struct {

    Aws_opsworks_rds_db_instance_id *string `lyra:"ignore"`

    Db_password string

    Db_user string

    Rds_db_instance_arn string

    Stack_id string

}

// Aws_opsworks_rds_db_instanceHandler ...
type Aws_opsworks_rds_db_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_rds_db_instanceHandler) Create(desired *Aws_opsworks_rds_db_instance) (*Aws_opsworks_rds_db_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_rds_db_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_rds_db_instanceHandler) Read(externalID string) (*Aws_opsworks_rds_db_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_rds_db_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_rds_db_instance{ Aws_opsworks_rds_db_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_rds_db_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_rds_db_instance", externalID)
}

type Aws_opsworks_stack_custom_cookbooks_source_446 struct {

    Password *string

    Revision *string

    Ssh_key *string

    Type string

    Url string

    Username *string

}

type Aws_opsworks_stack struct {

    Aws_opsworks_stack_id *string `lyra:"ignore"`

    Agent_version *string

    Arn *string

    Berkshelf_version *string

    Color *string

    Configuration_manager_name *string

    Configuration_manager_version *string

    Custom_cookbooks_source *[]Aws_opsworks_stack_custom_cookbooks_source_446

    Custom_json *string

    Default_availability_zone *string

    Default_instance_profile_arn string

    Default_os *string

    Default_root_device_type *string

    Default_ssh_key_name *string

    Default_subnet_id *string

    Hostname_theme *string

    Manage_berkshelf *bool

    Name string

    Region string

    Service_role_arn string

    Stack_endpoint *string

    Tags *map[string]string

    Use_custom_cookbooks *bool

    Use_opsworks_security_groups *bool

    Vpc_id *string

}

// Aws_opsworks_stackHandler ...
type Aws_opsworks_stackHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_stackHandler) Create(desired *Aws_opsworks_stack) (*Aws_opsworks_stack, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_stack", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_stackHandler) Read(externalID string) (*Aws_opsworks_stack, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_stack", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_stack{ Aws_opsworks_stack_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_stackHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_stack", externalID)
}

type Aws_opsworks_static_web_layer_ebs_volume_447 struct {

    Iops *int

    Mount_point string

    Number_of_disks int

    Raid_level *string

    Size int

    Type *string

}

type Aws_opsworks_static_web_layer struct {

    Aws_opsworks_static_web_layer_id *string `lyra:"ignore"`

    Auto_assign_elastic_ips *bool

    Auto_assign_public_ips *bool

    Auto_healing *bool

    Custom_configure_recipes *[]string

    Custom_deploy_recipes *[]string

    Custom_instance_profile_arn *string

    Custom_json *string

    Custom_security_group_ids *[]string

    Custom_setup_recipes *[]string

    Custom_shutdown_recipes *[]string

    Custom_undeploy_recipes *[]string

    Drain_elb_on_shutdown *bool

    Ebs_volume *[]Aws_opsworks_static_web_layer_ebs_volume_447

    Elastic_load_balancer *string

    Install_updates_on_boot *bool

    Instance_shutdown_timeout *int

    Name *string

    Stack_id string

    System_packages *[]string

    Use_ebs_optimized_instances *bool

}

// Aws_opsworks_static_web_layerHandler ...
type Aws_opsworks_static_web_layerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_static_web_layerHandler) Create(desired *Aws_opsworks_static_web_layer) (*Aws_opsworks_static_web_layer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_static_web_layer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_static_web_layerHandler) Read(externalID string) (*Aws_opsworks_static_web_layer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_static_web_layer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_static_web_layer{ Aws_opsworks_static_web_layer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_static_web_layerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_static_web_layer", externalID)
}

type Aws_opsworks_user_profile struct {

    Aws_opsworks_user_profile_id *string `lyra:"ignore"`

    Allow_self_management *bool

    Ssh_public_key *string

    Ssh_username string

    User_arn string

}

// Aws_opsworks_user_profileHandler ...
type Aws_opsworks_user_profileHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_opsworks_user_profileHandler) Create(desired *Aws_opsworks_user_profile) (*Aws_opsworks_user_profile, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_opsworks_user_profile", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_opsworks_user_profileHandler) Read(externalID string) (*Aws_opsworks_user_profile, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_opsworks_user_profile", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_opsworks_user_profile{ Aws_opsworks_user_profile_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_opsworks_user_profileHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_opsworks_user_profile", externalID)
}

type Aws_organizations_account struct {

    Aws_organizations_account_id *string `lyra:"ignore"`

    Arn *string

    Email string

    Iam_user_access_to_billing *string

    Joined_method *string

    Joined_timestamp *string

    Name string

    Role_name *string

    Status *string

}

// Aws_organizations_accountHandler ...
type Aws_organizations_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_organizations_accountHandler) Create(desired *Aws_organizations_account) (*Aws_organizations_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_organizations_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_organizations_accountHandler) Read(externalID string) (*Aws_organizations_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_organizations_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_organizations_account{ Aws_organizations_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_organizations_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_organizations_account", externalID)
}

type Aws_organizations_organization struct {

    Aws_organizations_organization_id *string `lyra:"ignore"`

    Arn *string

    Aws_service_access_principals *[]string

    Feature_set *string

    Master_account_arn *string

    Master_account_email *string

    Master_account_id *string

}

// Aws_organizations_organizationHandler ...
type Aws_organizations_organizationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_organizations_organizationHandler) Create(desired *Aws_organizations_organization) (*Aws_organizations_organization, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_organizations_organization", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_organizations_organizationHandler) Read(externalID string) (*Aws_organizations_organization, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_organizations_organization", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_organizations_organization{ Aws_organizations_organization_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_organizations_organizationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_organizations_organization", externalID)
}

type Aws_organizations_policy struct {

    Aws_organizations_policy_id *string `lyra:"ignore"`

    Arn *string

    Content string

    Description *string

    Name string

    Type *string

}

// Aws_organizations_policyHandler ...
type Aws_organizations_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_organizations_policyHandler) Create(desired *Aws_organizations_policy) (*Aws_organizations_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_organizations_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_organizations_policyHandler) Read(externalID string) (*Aws_organizations_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_organizations_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_organizations_policy{ Aws_organizations_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_organizations_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_organizations_policy", externalID)
}

type Aws_organizations_policy_attachment struct {

    Aws_organizations_policy_attachment_id *string `lyra:"ignore"`

    Policy_id string

    Target_id string

}

// Aws_organizations_policy_attachmentHandler ...
type Aws_organizations_policy_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_organizations_policy_attachmentHandler) Create(desired *Aws_organizations_policy_attachment) (*Aws_organizations_policy_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_organizations_policy_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_organizations_policy_attachmentHandler) Read(externalID string) (*Aws_organizations_policy_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_organizations_policy_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_organizations_policy_attachment{ Aws_organizations_policy_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_organizations_policy_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_organizations_policy_attachment", externalID)
}

type Aws_pinpoint_adm_channel struct {

    Aws_pinpoint_adm_channel_id *string `lyra:"ignore"`

    Application_id string

    Client_id string

    Client_secret string

    Enabled *bool

}

// Aws_pinpoint_adm_channelHandler ...
type Aws_pinpoint_adm_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_adm_channelHandler) Create(desired *Aws_pinpoint_adm_channel) (*Aws_pinpoint_adm_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_adm_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_adm_channelHandler) Read(externalID string) (*Aws_pinpoint_adm_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_adm_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_adm_channel{ Aws_pinpoint_adm_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_adm_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_adm_channel", externalID)
}

type Aws_pinpoint_apns_channel struct {

    Aws_pinpoint_apns_channel_id *string `lyra:"ignore"`

    Application_id string

    Bundle_id *string

    Certificate *string

    Default_authentication_method *string

    Enabled *bool

    Private_key *string

    Team_id *string

    Token_key *string

    Token_key_id *string

}

// Aws_pinpoint_apns_channelHandler ...
type Aws_pinpoint_apns_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_apns_channelHandler) Create(desired *Aws_pinpoint_apns_channel) (*Aws_pinpoint_apns_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_apns_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_apns_channelHandler) Read(externalID string) (*Aws_pinpoint_apns_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_apns_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_apns_channel{ Aws_pinpoint_apns_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_apns_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_apns_channel", externalID)
}

type Aws_pinpoint_apns_sandbox_channel struct {

    Aws_pinpoint_apns_sandbox_channel_id *string `lyra:"ignore"`

    Application_id string

    Bundle_id *string

    Certificate *string

    Default_authentication_method *string

    Enabled *bool

    Private_key *string

    Team_id *string

    Token_key *string

    Token_key_id *string

}

// Aws_pinpoint_apns_sandbox_channelHandler ...
type Aws_pinpoint_apns_sandbox_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_apns_sandbox_channelHandler) Create(desired *Aws_pinpoint_apns_sandbox_channel) (*Aws_pinpoint_apns_sandbox_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_apns_sandbox_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_apns_sandbox_channelHandler) Read(externalID string) (*Aws_pinpoint_apns_sandbox_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_apns_sandbox_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_apns_sandbox_channel{ Aws_pinpoint_apns_sandbox_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_apns_sandbox_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_apns_sandbox_channel", externalID)
}

type Aws_pinpoint_apns_voip_channel struct {

    Aws_pinpoint_apns_voip_channel_id *string `lyra:"ignore"`

    Application_id string

    Bundle_id *string

    Certificate *string

    Default_authentication_method *string

    Enabled *bool

    Private_key *string

    Team_id *string

    Token_key *string

    Token_key_id *string

}

// Aws_pinpoint_apns_voip_channelHandler ...
type Aws_pinpoint_apns_voip_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_apns_voip_channelHandler) Create(desired *Aws_pinpoint_apns_voip_channel) (*Aws_pinpoint_apns_voip_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_apns_voip_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_apns_voip_channelHandler) Read(externalID string) (*Aws_pinpoint_apns_voip_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_apns_voip_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_apns_voip_channel{ Aws_pinpoint_apns_voip_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_apns_voip_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_apns_voip_channel", externalID)
}

type Aws_pinpoint_apns_voip_sandbox_channel struct {

    Aws_pinpoint_apns_voip_sandbox_channel_id *string `lyra:"ignore"`

    Application_id string

    Bundle_id *string

    Certificate *string

    Default_authentication_method *string

    Enabled *bool

    Private_key *string

    Team_id *string

    Token_key *string

    Token_key_id *string

}

// Aws_pinpoint_apns_voip_sandbox_channelHandler ...
type Aws_pinpoint_apns_voip_sandbox_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_apns_voip_sandbox_channelHandler) Create(desired *Aws_pinpoint_apns_voip_sandbox_channel) (*Aws_pinpoint_apns_voip_sandbox_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_apns_voip_sandbox_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_apns_voip_sandbox_channelHandler) Read(externalID string) (*Aws_pinpoint_apns_voip_sandbox_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_apns_voip_sandbox_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_apns_voip_sandbox_channel{ Aws_pinpoint_apns_voip_sandbox_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_apns_voip_sandbox_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_apns_voip_sandbox_channel", externalID)
}

type Aws_pinpoint_app_campaign_hook_448 struct {

    Lambda_function_name *string

    Mode *string

    Web_url *string

}

type Aws_pinpoint_app_limits_449 struct {

    Daily *int

    Maximum_duration *int

    Messages_per_second *int

    Total *int

}

type Aws_pinpoint_app_quiet_time_450 struct {

    End *string

    Start *string

}

type Aws_pinpoint_app struct {

    Aws_pinpoint_app_id *string `lyra:"ignore"`

    Application_id *string

    Campaign_hook *[]Aws_pinpoint_app_campaign_hook_448

    Limits *[]Aws_pinpoint_app_limits_449

    Name *string

    Name_prefix *string

    Quiet_time *[]Aws_pinpoint_app_quiet_time_450

}

// Aws_pinpoint_appHandler ...
type Aws_pinpoint_appHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_appHandler) Create(desired *Aws_pinpoint_app) (*Aws_pinpoint_app, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_app", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_appHandler) Read(externalID string) (*Aws_pinpoint_app, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_app", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_app{ Aws_pinpoint_app_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_appHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_app", externalID)
}

type Aws_pinpoint_baidu_channel struct {

    Aws_pinpoint_baidu_channel_id *string `lyra:"ignore"`

    Api_key string

    Application_id string

    Enabled *bool

    Secret_key string

}

// Aws_pinpoint_baidu_channelHandler ...
type Aws_pinpoint_baidu_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_baidu_channelHandler) Create(desired *Aws_pinpoint_baidu_channel) (*Aws_pinpoint_baidu_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_baidu_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_baidu_channelHandler) Read(externalID string) (*Aws_pinpoint_baidu_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_baidu_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_baidu_channel{ Aws_pinpoint_baidu_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_baidu_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_baidu_channel", externalID)
}

type Aws_pinpoint_email_channel struct {

    Aws_pinpoint_email_channel_id *string `lyra:"ignore"`

    Application_id string

    Enabled *bool

    From_address string

    Identity string

    Messages_per_second *int

    Role_arn string

}

// Aws_pinpoint_email_channelHandler ...
type Aws_pinpoint_email_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_email_channelHandler) Create(desired *Aws_pinpoint_email_channel) (*Aws_pinpoint_email_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_email_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_email_channelHandler) Read(externalID string) (*Aws_pinpoint_email_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_email_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_email_channel{ Aws_pinpoint_email_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_email_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_email_channel", externalID)
}

type Aws_pinpoint_event_stream struct {

    Aws_pinpoint_event_stream_id *string `lyra:"ignore"`

    Application_id string

    Destination_stream_arn string

    Role_arn string

}

// Aws_pinpoint_event_streamHandler ...
type Aws_pinpoint_event_streamHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_event_streamHandler) Create(desired *Aws_pinpoint_event_stream) (*Aws_pinpoint_event_stream, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_event_stream", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_event_streamHandler) Read(externalID string) (*Aws_pinpoint_event_stream, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_event_stream", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_event_stream{ Aws_pinpoint_event_stream_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_event_streamHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_event_stream", externalID)
}

type Aws_pinpoint_gcm_channel struct {

    Aws_pinpoint_gcm_channel_id *string `lyra:"ignore"`

    Api_key string

    Application_id string

    Enabled *bool

}

// Aws_pinpoint_gcm_channelHandler ...
type Aws_pinpoint_gcm_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_gcm_channelHandler) Create(desired *Aws_pinpoint_gcm_channel) (*Aws_pinpoint_gcm_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_gcm_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_gcm_channelHandler) Read(externalID string) (*Aws_pinpoint_gcm_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_gcm_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_gcm_channel{ Aws_pinpoint_gcm_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_gcm_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_gcm_channel", externalID)
}

type Aws_pinpoint_sms_channel struct {

    Aws_pinpoint_sms_channel_id *string `lyra:"ignore"`

    Application_id string

    Enabled *bool

    Promotional_messages_per_second *int

    Sender_id *string

    Short_code *string

    Transactional_messages_per_second *int

}

// Aws_pinpoint_sms_channelHandler ...
type Aws_pinpoint_sms_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_pinpoint_sms_channelHandler) Create(desired *Aws_pinpoint_sms_channel) (*Aws_pinpoint_sms_channel, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_pinpoint_sms_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_pinpoint_sms_channelHandler) Read(externalID string) (*Aws_pinpoint_sms_channel, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_pinpoint_sms_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_pinpoint_sms_channel{ Aws_pinpoint_sms_channel_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_pinpoint_sms_channelHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_pinpoint_sms_channel", externalID)
}

type Aws_placement_group struct {

    Aws_placement_group_id *string `lyra:"ignore"`

    Name string

    Strategy string

}

// Aws_placement_groupHandler ...
type Aws_placement_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_placement_groupHandler) Create(desired *Aws_placement_group) (*Aws_placement_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_placement_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_placement_groupHandler) Read(externalID string) (*Aws_placement_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_placement_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_placement_group{ Aws_placement_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_placement_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_placement_group", externalID)
}

type Aws_proxy_protocol_policy struct {

    Aws_proxy_protocol_policy_id *string `lyra:"ignore"`

    Instance_ports []string

    Load_balancer string

}

// Aws_proxy_protocol_policyHandler ...
type Aws_proxy_protocol_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_proxy_protocol_policyHandler) Create(desired *Aws_proxy_protocol_policy) (*Aws_proxy_protocol_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_proxy_protocol_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_proxy_protocol_policyHandler) Read(externalID string) (*Aws_proxy_protocol_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_proxy_protocol_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_proxy_protocol_policy{ Aws_proxy_protocol_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_proxy_protocol_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_proxy_protocol_policy", externalID)
}

type Aws_ram_resource_share struct {

    Aws_ram_resource_share_id *string `lyra:"ignore"`

    Allow_external_principals *bool

    Name string

    Tags *map[string]string

}

// Aws_ram_resource_shareHandler ...
type Aws_ram_resource_shareHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ram_resource_shareHandler) Create(desired *Aws_ram_resource_share) (*Aws_ram_resource_share, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ram_resource_share", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ram_resource_shareHandler) Read(externalID string) (*Aws_ram_resource_share, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ram_resource_share", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ram_resource_share{ Aws_ram_resource_share_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ram_resource_shareHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ram_resource_share", externalID)
}

type Aws_rds_cluster_s3_import_451 struct {

    Bucket_name string

    Bucket_prefix *string

    Ingestion_role string

    Source_engine string

    Source_engine_version string

}

type Aws_rds_cluster_scaling_configuration_452 struct {

    Auto_pause *bool

    Max_capacity *int

    Min_capacity *int

    Seconds_until_auto_pause *int

}

type Aws_rds_cluster struct {

    Aws_rds_cluster_id *string `lyra:"ignore"`

    Apply_immediately *bool

    Arn *string

    Availability_zones *[]string

    Backtrack_window *int

    Backup_retention_period *int

    Cluster_identifier *string

    Cluster_identifier_prefix *string

    Cluster_members *[]string

    Cluster_resource_id *string

    Database_name *string

    Db_cluster_parameter_group_name *string

    Db_subnet_group_name *string

    Deletion_protection *bool

    Enabled_cloudwatch_logs_exports *[]string

    Endpoint *string

    Engine *string

    Engine_mode *string

    Engine_version *string

    Final_snapshot_identifier *string

    Global_cluster_identifier *string

    Hosted_zone_id *string

    Iam_database_authentication_enabled *bool

    Iam_roles *[]string

    Kms_key_id *string

    Master_password *string

    Master_username *string

    Port *int

    Preferred_backup_window *string

    Preferred_maintenance_window *string

    Reader_endpoint *string

    Replication_source_identifier *string

    S3_import *[]Aws_rds_cluster_s3_import_451

    Scaling_configuration *[]Aws_rds_cluster_scaling_configuration_452

    Skip_final_snapshot *bool

    Snapshot_identifier *string

    Source_region *string

    Storage_encrypted *bool

    Tags *map[string]string

    Vpc_security_group_ids *[]string

}

// Aws_rds_clusterHandler ...
type Aws_rds_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_rds_clusterHandler) Create(desired *Aws_rds_cluster) (*Aws_rds_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_rds_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_rds_clusterHandler) Read(externalID string) (*Aws_rds_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_rds_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_rds_cluster{ Aws_rds_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_rds_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_rds_cluster", externalID)
}

type Aws_rds_cluster_endpoint struct {

    Aws_rds_cluster_endpoint_id *string `lyra:"ignore"`

    Arn *string

    Cluster_endpoint_identifier string

    Cluster_identifier string

    Custom_endpoint_type string

    Endpoint *string

    Excluded_members *[]string

    Static_members *[]string

}

// Aws_rds_cluster_endpointHandler ...
type Aws_rds_cluster_endpointHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_rds_cluster_endpointHandler) Create(desired *Aws_rds_cluster_endpoint) (*Aws_rds_cluster_endpoint, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_rds_cluster_endpoint", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_rds_cluster_endpointHandler) Read(externalID string) (*Aws_rds_cluster_endpoint, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_rds_cluster_endpoint", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_rds_cluster_endpoint{ Aws_rds_cluster_endpoint_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_rds_cluster_endpointHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_rds_cluster_endpoint", externalID)
}

type Aws_rds_cluster_instance struct {

    Aws_rds_cluster_instance_id *string `lyra:"ignore"`

    Apply_immediately *bool

    Arn *string

    Auto_minor_version_upgrade *bool

    Availability_zone *string

    Cluster_identifier string

    Copy_tags_to_snapshot *bool

    Db_parameter_group_name *string

    Db_subnet_group_name *string

    Dbi_resource_id *string

    Endpoint *string

    Engine *string

    Engine_version *string

    Identifier *string

    Identifier_prefix *string

    Instance_class string

    Kms_key_id *string

    Monitoring_interval *int

    Monitoring_role_arn *string

    Performance_insights_enabled *bool

    Performance_insights_kms_key_id *string

    Port *int

    Preferred_backup_window *string

    Preferred_maintenance_window *string

    Promotion_tier *int

    Publicly_accessible *bool

    Storage_encrypted *bool

    Tags *map[string]string

    Writer *bool

}

// Aws_rds_cluster_instanceHandler ...
type Aws_rds_cluster_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_rds_cluster_instanceHandler) Create(desired *Aws_rds_cluster_instance) (*Aws_rds_cluster_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_rds_cluster_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_rds_cluster_instanceHandler) Read(externalID string) (*Aws_rds_cluster_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_rds_cluster_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_rds_cluster_instance{ Aws_rds_cluster_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_rds_cluster_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_rds_cluster_instance", externalID)
}

type Aws_rds_cluster_parameter_group_parameter_453 struct {

    Apply_method *string

    Name string

    Value string

}

type Aws_rds_cluster_parameter_group struct {

    Aws_rds_cluster_parameter_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Family string

    Name *string

    Name_prefix *string

    Parameter *[]Aws_rds_cluster_parameter_group_parameter_453

    Tags *map[string]string

}

// Aws_rds_cluster_parameter_groupHandler ...
type Aws_rds_cluster_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_rds_cluster_parameter_groupHandler) Create(desired *Aws_rds_cluster_parameter_group) (*Aws_rds_cluster_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_rds_cluster_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_rds_cluster_parameter_groupHandler) Read(externalID string) (*Aws_rds_cluster_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_rds_cluster_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_rds_cluster_parameter_group{ Aws_rds_cluster_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_rds_cluster_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_rds_cluster_parameter_group", externalID)
}

type Aws_rds_global_cluster struct {

    Aws_rds_global_cluster_id *string `lyra:"ignore"`

    Arn *string

    Database_name *string

    Deletion_protection *bool

    Engine *string

    Engine_version *string

    Global_cluster_identifier string

    Global_cluster_resource_id *string

    Storage_encrypted *bool

}

// Aws_rds_global_clusterHandler ...
type Aws_rds_global_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_rds_global_clusterHandler) Create(desired *Aws_rds_global_cluster) (*Aws_rds_global_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_rds_global_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_rds_global_clusterHandler) Read(externalID string) (*Aws_rds_global_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_rds_global_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_rds_global_cluster{ Aws_rds_global_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_rds_global_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_rds_global_cluster", externalID)
}

type Aws_redshift_cluster_logging_454 struct {

    Bucket_name *string

    Enable bool

    S3_key_prefix *string

}

type Aws_redshift_cluster_snapshot_copy_455 struct {

    Destination_region string

    Grant_name *string

    Retention_period *int

}

type Aws_redshift_cluster struct {

    Aws_redshift_cluster_id *string `lyra:"ignore"`

    Allow_version_upgrade *bool

    Automated_snapshot_retention_period *int

    Availability_zone *string

    Bucket_name *string

    Cluster_identifier string

    Cluster_parameter_group_name *string

    Cluster_public_key *string

    Cluster_revision_number *string

    Cluster_security_groups *[]string

    Cluster_subnet_group_name *string

    Cluster_type *string

    Cluster_version *string

    Database_name *string

    Dns_name *string

    Elastic_ip *string

    Enable_logging *bool

    Encrypted *bool

    Endpoint *string

    Enhanced_vpc_routing *bool

    Final_snapshot_identifier *string

    Iam_roles *[]string

    Kms_key_id *string

    Logging *[]Aws_redshift_cluster_logging_454

    Master_password *string

    Master_username *string

    Node_type string

    Number_of_nodes *int

    Owner_account *string

    Port *int

    Preferred_maintenance_window *string

    Publicly_accessible *bool

    S3_key_prefix *string

    Skip_final_snapshot *bool

    Snapshot_cluster_identifier *string

    Snapshot_copy *[]Aws_redshift_cluster_snapshot_copy_455

    Snapshot_identifier *string

    Tags *map[string]string

    Vpc_security_group_ids *[]string

}

// Aws_redshift_clusterHandler ...
type Aws_redshift_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_redshift_clusterHandler) Create(desired *Aws_redshift_cluster) (*Aws_redshift_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_redshift_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_redshift_clusterHandler) Read(externalID string) (*Aws_redshift_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_redshift_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_redshift_cluster{ Aws_redshift_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_redshift_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_redshift_cluster", externalID)
}

type Aws_redshift_event_subscription struct {

    Aws_redshift_event_subscription_id *string `lyra:"ignore"`

    Customer_aws_id *string

    Enabled *bool

    Event_categories *[]string

    Name string

    Severity *string

    Sns_topic_arn string

    Source_ids *[]string

    Source_type *string

    Status *string

    Tags *map[string]string

}

// Aws_redshift_event_subscriptionHandler ...
type Aws_redshift_event_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_redshift_event_subscriptionHandler) Create(desired *Aws_redshift_event_subscription) (*Aws_redshift_event_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_redshift_event_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_redshift_event_subscriptionHandler) Read(externalID string) (*Aws_redshift_event_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_redshift_event_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_redshift_event_subscription{ Aws_redshift_event_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_redshift_event_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_redshift_event_subscription", externalID)
}

type Aws_redshift_parameter_group_parameter_456 struct {

    Name string

    Value string

}

type Aws_redshift_parameter_group struct {

    Aws_redshift_parameter_group_id *string `lyra:"ignore"`

    Description *string

    Family string

    Name string

    Parameter *[]Aws_redshift_parameter_group_parameter_456

}

// Aws_redshift_parameter_groupHandler ...
type Aws_redshift_parameter_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_redshift_parameter_groupHandler) Create(desired *Aws_redshift_parameter_group) (*Aws_redshift_parameter_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_redshift_parameter_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_redshift_parameter_groupHandler) Read(externalID string) (*Aws_redshift_parameter_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_redshift_parameter_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_redshift_parameter_group{ Aws_redshift_parameter_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_redshift_parameter_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_redshift_parameter_group", externalID)
}

type Aws_redshift_security_group_ingress_457 struct {

    Cidr *string

    Security_group_name *string

    Security_group_owner_id *string

}

type Aws_redshift_security_group struct {

    Aws_redshift_security_group_id *string `lyra:"ignore"`

    Description *string

    Ingress []Aws_redshift_security_group_ingress_457

    Name string

}

// Aws_redshift_security_groupHandler ...
type Aws_redshift_security_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_redshift_security_groupHandler) Create(desired *Aws_redshift_security_group) (*Aws_redshift_security_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_redshift_security_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_redshift_security_groupHandler) Read(externalID string) (*Aws_redshift_security_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_redshift_security_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_redshift_security_group{ Aws_redshift_security_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_redshift_security_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_redshift_security_group", externalID)
}

type Aws_redshift_snapshot_copy_grant struct {

    Aws_redshift_snapshot_copy_grant_id *string `lyra:"ignore"`

    Kms_key_id *string

    Snapshot_copy_grant_name string

    Tags *map[string]string

}

// Aws_redshift_snapshot_copy_grantHandler ...
type Aws_redshift_snapshot_copy_grantHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_redshift_snapshot_copy_grantHandler) Create(desired *Aws_redshift_snapshot_copy_grant) (*Aws_redshift_snapshot_copy_grant, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_redshift_snapshot_copy_grant", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_redshift_snapshot_copy_grantHandler) Read(externalID string) (*Aws_redshift_snapshot_copy_grant, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_redshift_snapshot_copy_grant", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_redshift_snapshot_copy_grant{ Aws_redshift_snapshot_copy_grant_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_redshift_snapshot_copy_grantHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_redshift_snapshot_copy_grant", externalID)
}

type Aws_redshift_subnet_group struct {

    Aws_redshift_subnet_group_id *string `lyra:"ignore"`

    Description *string

    Name string

    Subnet_ids []string

    Tags *map[string]string

}

// Aws_redshift_subnet_groupHandler ...
type Aws_redshift_subnet_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_redshift_subnet_groupHandler) Create(desired *Aws_redshift_subnet_group) (*Aws_redshift_subnet_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_redshift_subnet_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_redshift_subnet_groupHandler) Read(externalID string) (*Aws_redshift_subnet_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_redshift_subnet_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_redshift_subnet_group{ Aws_redshift_subnet_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_redshift_subnet_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_redshift_subnet_group", externalID)
}

type Aws_resourcegroups_group_resource_query_458 struct {

    Query string

    Type *string

}

type Aws_resourcegroups_group struct {

    Aws_resourcegroups_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Name string

    Resource_query []Aws_resourcegroups_group_resource_query_458

}

// Aws_resourcegroups_groupHandler ...
type Aws_resourcegroups_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_resourcegroups_groupHandler) Create(desired *Aws_resourcegroups_group) (*Aws_resourcegroups_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_resourcegroups_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_resourcegroups_groupHandler) Read(externalID string) (*Aws_resourcegroups_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_resourcegroups_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_resourcegroups_group{ Aws_resourcegroups_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_resourcegroups_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_resourcegroups_group", externalID)
}

type Aws_route struct {

    Aws_route_id *string `lyra:"ignore"`

    Destination_cidr_block *string

    Destination_ipv6_cidr_block *string

    Destination_prefix_list_id *string

    Egress_only_gateway_id *string

    Gateway_id *string

    Instance_id *string

    Instance_owner_id *string

    Nat_gateway_id *string

    Network_interface_id *string

    Origin *string

    Route_table_id string

    State *string

    Transit_gateway_id *string

    Vpc_peering_connection_id *string

}

// Aws_routeHandler ...
type Aws_routeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_routeHandler) Create(desired *Aws_route) (*Aws_route, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_routeHandler) Read(externalID string) (*Aws_route, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route{ Aws_route_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_routeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route", externalID)
}

type Aws_route53_delegation_set struct {

    Aws_route53_delegation_set_id *string `lyra:"ignore"`

    Name_servers *[]string

    Reference_name *string

}

// Aws_route53_delegation_setHandler ...
type Aws_route53_delegation_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route53_delegation_setHandler) Create(desired *Aws_route53_delegation_set) (*Aws_route53_delegation_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route53_delegation_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route53_delegation_setHandler) Read(externalID string) (*Aws_route53_delegation_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route53_delegation_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route53_delegation_set{ Aws_route53_delegation_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route53_delegation_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route53_delegation_set", externalID)
}

type Aws_route53_health_check struct {

    Aws_route53_health_check_id *string `lyra:"ignore"`

    Child_health_threshold *int

    Child_healthchecks *[]string

    Cloudwatch_alarm_name *string

    Cloudwatch_alarm_region *string

    Enable_sni *bool

    Failure_threshold *int

    Fqdn *string

    Insufficient_data_health_status *string

    Invert_healthcheck *bool

    Ip_address *string

    Measure_latency *bool

    Port *int

    Reference_name *string

    Regions *[]string

    Request_interval *int

    Resource_path *string

    Search_string *string

    Tags *map[string]string

    Type string

}

// Aws_route53_health_checkHandler ...
type Aws_route53_health_checkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route53_health_checkHandler) Create(desired *Aws_route53_health_check) (*Aws_route53_health_check, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route53_health_check", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route53_health_checkHandler) Read(externalID string) (*Aws_route53_health_check, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route53_health_check", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route53_health_check{ Aws_route53_health_check_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route53_health_checkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route53_health_check", externalID)
}

type Aws_route53_query_log struct {

    Aws_route53_query_log_id *string `lyra:"ignore"`

    Cloudwatch_log_group_arn string

    Zone_id string

}

// Aws_route53_query_logHandler ...
type Aws_route53_query_logHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route53_query_logHandler) Create(desired *Aws_route53_query_log) (*Aws_route53_query_log, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route53_query_log", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route53_query_logHandler) Read(externalID string) (*Aws_route53_query_log, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route53_query_log", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route53_query_log{ Aws_route53_query_log_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route53_query_logHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route53_query_log", externalID)
}

type Aws_route53_record_alias_459 struct {

    Evaluate_target_health bool

    Name string

    Zone_id string

}

type Aws_route53_record_failover_routing_policy_460 struct {

    Type string

}

type Aws_route53_record_geolocation_routing_policy_461 struct {

    Continent *string

    Country *string

    Subdivision *string

}

type Aws_route53_record_latency_routing_policy_462 struct {

    Region string

}

type Aws_route53_record_weighted_routing_policy_463 struct {

    Weight int

}

type Aws_route53_record struct {

    Aws_route53_record_id *string `lyra:"ignore"`

    Alias *[]Aws_route53_record_alias_459

    Allow_overwrite *bool

    Failover *string

    Failover_routing_policy *[]Aws_route53_record_failover_routing_policy_460

    Fqdn *string

    Geolocation_routing_policy *[]Aws_route53_record_geolocation_routing_policy_461

    Health_check_id *string

    Latency_routing_policy *[]Aws_route53_record_latency_routing_policy_462

    Multivalue_answer_routing_policy *bool

    Name string

    Records *[]string

    Set_identifier *string

    Ttl *int

    Type string

    Weight *int

    Weighted_routing_policy *[]Aws_route53_record_weighted_routing_policy_463

    Zone_id string

}

// Aws_route53_recordHandler ...
type Aws_route53_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route53_recordHandler) Create(desired *Aws_route53_record) (*Aws_route53_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route53_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route53_recordHandler) Read(externalID string) (*Aws_route53_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route53_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route53_record{ Aws_route53_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route53_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route53_record", externalID)
}

type Aws_route53_zone_vpc_464 struct {

    Vpc_id string

    Vpc_region *string

}

type Aws_route53_zone struct {

    Aws_route53_zone_id *string `lyra:"ignore"`

    Comment *string

    Delegation_set_id *string

    Force_destroy *bool

    Name string

    Name_servers *[]string

    Tags *map[string]string

    Vpc *[]Aws_route53_zone_vpc_464

    Vpc_id *string

    Vpc_region *string

    Zone_id *string

}

// Aws_route53_zoneHandler ...
type Aws_route53_zoneHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route53_zoneHandler) Create(desired *Aws_route53_zone) (*Aws_route53_zone, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route53_zone", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route53_zoneHandler) Read(externalID string) (*Aws_route53_zone, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route53_zone", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route53_zone{ Aws_route53_zone_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route53_zoneHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route53_zone", externalID)
}

type Aws_route53_zone_association struct {

    Aws_route53_zone_association_id *string `lyra:"ignore"`

    Vpc_id string

    Vpc_region *string

    Zone_id string

}

// Aws_route53_zone_associationHandler ...
type Aws_route53_zone_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route53_zone_associationHandler) Create(desired *Aws_route53_zone_association) (*Aws_route53_zone_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route53_zone_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route53_zone_associationHandler) Read(externalID string) (*Aws_route53_zone_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route53_zone_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route53_zone_association{ Aws_route53_zone_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route53_zone_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route53_zone_association", externalID)
}

type Aws_route_table_route_465 struct {

    Cidr_block *string

    Egress_only_gateway_id *string

    Gateway_id *string

    Instance_id *string

    Ipv6_cidr_block *string

    Nat_gateway_id *string

    Network_interface_id *string

    Transit_gateway_id *string

    Vpc_peering_connection_id *string

}

type Aws_route_table struct {

    Aws_route_table_id *string `lyra:"ignore"`

    Owner_id *string

    Propagating_vgws *[]string

    Route *[]Aws_route_table_route_465

    Tags *map[string]string

    Vpc_id string

}

// Aws_route_tableHandler ...
type Aws_route_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route_tableHandler) Create(desired *Aws_route_table) (*Aws_route_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route_tableHandler) Read(externalID string) (*Aws_route_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route_table{ Aws_route_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route_table", externalID)
}

type Aws_route_table_association struct {

    Aws_route_table_association_id *string `lyra:"ignore"`

    Route_table_id string

    Subnet_id string

}

// Aws_route_table_associationHandler ...
type Aws_route_table_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_route_table_associationHandler) Create(desired *Aws_route_table_association) (*Aws_route_table_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_route_table_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_route_table_associationHandler) Read(externalID string) (*Aws_route_table_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_route_table_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_route_table_association{ Aws_route_table_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_route_table_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_route_table_association", externalID)
}

type Aws_s3_account_public_access_block struct {

    Aws_s3_account_public_access_block_id *string `lyra:"ignore"`

    Account_id *string

    Block_public_acls *bool

    Block_public_policy *bool

    Ignore_public_acls *bool

    Restrict_public_buckets *bool

}

// Aws_s3_account_public_access_blockHandler ...
type Aws_s3_account_public_access_blockHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_account_public_access_blockHandler) Create(desired *Aws_s3_account_public_access_block) (*Aws_s3_account_public_access_block, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_account_public_access_block", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_account_public_access_blockHandler) Read(externalID string) (*Aws_s3_account_public_access_block, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_account_public_access_block", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_account_public_access_block{ Aws_s3_account_public_access_block_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_account_public_access_blockHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_account_public_access_block", externalID)
}

type Aws_s3_bucket_cors_rule_466 struct {

    Allowed_headers *[]string

    Allowed_methods []string

    Allowed_origins []string

    Expose_headers *[]string

    Max_age_seconds *int

}

type Aws_s3_bucket_lifecycle_rule_467_expiration_468 struct {

    Date *string

    Days *int

    Expired_object_delete_marker *bool

}

type Aws_s3_bucket_lifecycle_rule_467_noncurrent_version_expiration_469 struct {

    Days *int

}

type Aws_s3_bucket_lifecycle_rule_467_noncurrent_version_transition_470 struct {

    Days *int

    Storage_class string

}

type Aws_s3_bucket_lifecycle_rule_467_transition_471 struct {

    Date *string

    Days *int

    Storage_class string

}

type Aws_s3_bucket_lifecycle_rule_467 struct {

    Abort_incomplete_multipart_upload_days *int

    Enabled bool

    Expiration *[]Aws_s3_bucket_lifecycle_rule_467_expiration_468

    Id *string

    Noncurrent_version_expiration *[]Aws_s3_bucket_lifecycle_rule_467_noncurrent_version_expiration_469

    Noncurrent_version_transition *[]Aws_s3_bucket_lifecycle_rule_467_noncurrent_version_transition_470

    Prefix *string

    Tags *map[string]string

    Transition *[]Aws_s3_bucket_lifecycle_rule_467_transition_471

}

type Aws_s3_bucket_logging_472 struct {

    Target_bucket string

    Target_prefix *string

}

type Aws_s3_bucket_object_lock_configuration_473_rule_474_default_retention_475 struct {

    Days *int

    Mode string

    Years *int

}

type Aws_s3_bucket_object_lock_configuration_473_rule_474 struct {

    Default_retention []Aws_s3_bucket_object_lock_configuration_473_rule_474_default_retention_475

}

type Aws_s3_bucket_object_lock_configuration_473 struct {

    Object_lock_enabled string

    Rule *[]Aws_s3_bucket_object_lock_configuration_473_rule_474

}

type Aws_s3_bucket_replication_configuration_476_rules_477_destination_478_access_control_translation_479 struct {

    Owner string

}

type Aws_s3_bucket_replication_configuration_476_rules_477_destination_478 struct {

    Access_control_translation *[]Aws_s3_bucket_replication_configuration_476_rules_477_destination_478_access_control_translation_479

    Account_id *string

    Bucket string

    Replica_kms_key_id *string

    Storage_class *string

}

type Aws_s3_bucket_replication_configuration_476_rules_477_filter_480 struct {

    Prefix *string

    Tags *map[string]string

}

type Aws_s3_bucket_replication_configuration_476_rules_477_source_selection_criteria_481_sse_kms_encrypted_objects_482 struct {

    Enabled bool

}

type Aws_s3_bucket_replication_configuration_476_rules_477_source_selection_criteria_481 struct {

    Sse_kms_encrypted_objects *[]Aws_s3_bucket_replication_configuration_476_rules_477_source_selection_criteria_481_sse_kms_encrypted_objects_482

}

type Aws_s3_bucket_replication_configuration_476_rules_477 struct {

    Destination []Aws_s3_bucket_replication_configuration_476_rules_477_destination_478

    Filter *[]Aws_s3_bucket_replication_configuration_476_rules_477_filter_480

    Id *string

    Prefix *string

    Priority *int

    Source_selection_criteria *[]Aws_s3_bucket_replication_configuration_476_rules_477_source_selection_criteria_481

    Status string

}

type Aws_s3_bucket_replication_configuration_476 struct {

    Role string

    Rules []Aws_s3_bucket_replication_configuration_476_rules_477

}

type Aws_s3_bucket_server_side_encryption_configuration_483_rule_484_apply_server_side_encryption_by_default_485 struct {

    Kms_master_key_id *string

    Sse_algorithm string

}

type Aws_s3_bucket_server_side_encryption_configuration_483_rule_484 struct {

    Apply_server_side_encryption_by_default []Aws_s3_bucket_server_side_encryption_configuration_483_rule_484_apply_server_side_encryption_by_default_485

}

type Aws_s3_bucket_server_side_encryption_configuration_483 struct {

    Rule []Aws_s3_bucket_server_side_encryption_configuration_483_rule_484

}

type Aws_s3_bucket_versioning_486 struct {

    Enabled *bool

    Mfa_delete *bool

}

type Aws_s3_bucket_website_487 struct {

    Error_document *string

    Index_document *string

    Redirect_all_requests_to *string

    Routing_rules *string

}

type Aws_s3_bucket struct {

    Aws_s3_bucket_id *string `lyra:"ignore"`

    Acceleration_status *string

    Acl *string

    Arn *string

    Bucket *string

    Bucket_domain_name *string

    Bucket_prefix *string

    Bucket_regional_domain_name *string

    Cors_rule *[]Aws_s3_bucket_cors_rule_466

    Force_destroy *bool

    Hosted_zone_id *string

    Lifecycle_rule *[]Aws_s3_bucket_lifecycle_rule_467

    Logging *[]Aws_s3_bucket_logging_472

    Object_lock_configuration *[]Aws_s3_bucket_object_lock_configuration_473

    Policy *string

    Region *string

    Replication_configuration *[]Aws_s3_bucket_replication_configuration_476

    Request_payer *string

    Server_side_encryption_configuration *[]Aws_s3_bucket_server_side_encryption_configuration_483

    Tags *map[string]string

    Versioning *[]Aws_s3_bucket_versioning_486

    Website *[]Aws_s3_bucket_website_487

    Website_domain *string

    Website_endpoint *string

}

// Aws_s3_bucketHandler ...
type Aws_s3_bucketHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_bucketHandler) Create(desired *Aws_s3_bucket) (*Aws_s3_bucket, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_bucket", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_bucketHandler) Read(externalID string) (*Aws_s3_bucket, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_bucket", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_bucket{ Aws_s3_bucket_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_bucketHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_bucket", externalID)
}

type Aws_s3_bucket_inventory_destination_488_bucket_489_encryption_490_sse_kms_491 struct {

    Key_id string

}

type Aws_s3_bucket_inventory_destination_488_bucket_489_encryption_490_sse_s3_492 struct {

}

type Aws_s3_bucket_inventory_destination_488_bucket_489_encryption_490 struct {

    Sse_kms *[]Aws_s3_bucket_inventory_destination_488_bucket_489_encryption_490_sse_kms_491

    Sse_s3 *[]Aws_s3_bucket_inventory_destination_488_bucket_489_encryption_490_sse_s3_492

}

type Aws_s3_bucket_inventory_destination_488_bucket_489 struct {

    Account_id *string

    Bucket_arn string

    Encryption *[]Aws_s3_bucket_inventory_destination_488_bucket_489_encryption_490

    Format string

    Prefix *string

}

type Aws_s3_bucket_inventory_destination_488 struct {

    Bucket []Aws_s3_bucket_inventory_destination_488_bucket_489

}

type Aws_s3_bucket_inventory_filter_493 struct {

    Prefix *string

}

type Aws_s3_bucket_inventory_schedule_494 struct {

    Frequency string

}

type Aws_s3_bucket_inventory struct {

    Aws_s3_bucket_inventory_id *string `lyra:"ignore"`

    Bucket string

    Destination []Aws_s3_bucket_inventory_destination_488

    Enabled *bool

    Filter *[]Aws_s3_bucket_inventory_filter_493

    Included_object_versions string

    Name string

    Optional_fields *[]string

    Schedule []Aws_s3_bucket_inventory_schedule_494

}

// Aws_s3_bucket_inventoryHandler ...
type Aws_s3_bucket_inventoryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_bucket_inventoryHandler) Create(desired *Aws_s3_bucket_inventory) (*Aws_s3_bucket_inventory, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_bucket_inventory", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_bucket_inventoryHandler) Read(externalID string) (*Aws_s3_bucket_inventory, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_bucket_inventory", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_bucket_inventory{ Aws_s3_bucket_inventory_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_bucket_inventoryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_bucket_inventory", externalID)
}

type Aws_s3_bucket_metric_filter_495 struct {

    Prefix *string

    Tags *map[string]string

}

type Aws_s3_bucket_metric struct {

    Aws_s3_bucket_metric_id *string `lyra:"ignore"`

    Bucket string

    Filter *[]Aws_s3_bucket_metric_filter_495

    Name string

}

// Aws_s3_bucket_metricHandler ...
type Aws_s3_bucket_metricHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_bucket_metricHandler) Create(desired *Aws_s3_bucket_metric) (*Aws_s3_bucket_metric, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_bucket_metric", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_bucket_metricHandler) Read(externalID string) (*Aws_s3_bucket_metric, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_bucket_metric", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_bucket_metric{ Aws_s3_bucket_metric_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_bucket_metricHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_bucket_metric", externalID)
}

type Aws_s3_bucket_notification_lambda_function_496 struct {

    Events []string

    Filter_prefix *string

    Filter_suffix *string

    Id *string

    Lambda_function_arn *string

}

type Aws_s3_bucket_notification_queue_497 struct {

    Events []string

    Filter_prefix *string

    Filter_suffix *string

    Id *string

    Queue_arn string

}

type Aws_s3_bucket_notification_topic_498 struct {

    Events []string

    Filter_prefix *string

    Filter_suffix *string

    Id *string

    Topic_arn string

}

type Aws_s3_bucket_notification struct {

    Aws_s3_bucket_notification_id *string `lyra:"ignore"`

    Bucket string

    Lambda_function *[]Aws_s3_bucket_notification_lambda_function_496

    Queue *[]Aws_s3_bucket_notification_queue_497

    Topic *[]Aws_s3_bucket_notification_topic_498

}

// Aws_s3_bucket_notificationHandler ...
type Aws_s3_bucket_notificationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_bucket_notificationHandler) Create(desired *Aws_s3_bucket_notification) (*Aws_s3_bucket_notification, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_bucket_notification", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_bucket_notificationHandler) Read(externalID string) (*Aws_s3_bucket_notification, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_bucket_notification", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_bucket_notification{ Aws_s3_bucket_notification_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_bucket_notificationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_bucket_notification", externalID)
}

type Aws_s3_bucket_object struct {

    Aws_s3_bucket_object_id *string `lyra:"ignore"`

    Acl *string

    Bucket string

    Cache_control *string

    Content *string

    Content_base64 *string

    Content_disposition *string

    Content_encoding *string

    Content_language *string

    Content_type *string

    Etag *string

    Key string

    Kms_key_id *string

    Server_side_encryption *string

    Source *string

    Storage_class *string

    Tags *map[string]string

    Version_id *string

    Website_redirect *string

}

// Aws_s3_bucket_objectHandler ...
type Aws_s3_bucket_objectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_bucket_objectHandler) Create(desired *Aws_s3_bucket_object) (*Aws_s3_bucket_object, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_bucket_object", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_bucket_objectHandler) Read(externalID string) (*Aws_s3_bucket_object, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_bucket_object", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_bucket_object{ Aws_s3_bucket_object_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_bucket_objectHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_bucket_object", externalID)
}

type Aws_s3_bucket_policy struct {

    Aws_s3_bucket_policy_id *string `lyra:"ignore"`

    Bucket string

    Policy string

}

// Aws_s3_bucket_policyHandler ...
type Aws_s3_bucket_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_bucket_policyHandler) Create(desired *Aws_s3_bucket_policy) (*Aws_s3_bucket_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_bucket_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_bucket_policyHandler) Read(externalID string) (*Aws_s3_bucket_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_bucket_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_bucket_policy{ Aws_s3_bucket_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_bucket_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_bucket_policy", externalID)
}

type Aws_s3_bucket_public_access_block struct {

    Aws_s3_bucket_public_access_block_id *string `lyra:"ignore"`

    Block_public_acls *bool

    Block_public_policy *bool

    Bucket string

    Ignore_public_acls *bool

    Restrict_public_buckets *bool

}

// Aws_s3_bucket_public_access_blockHandler ...
type Aws_s3_bucket_public_access_blockHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_s3_bucket_public_access_blockHandler) Create(desired *Aws_s3_bucket_public_access_block) (*Aws_s3_bucket_public_access_block, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_s3_bucket_public_access_block", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_s3_bucket_public_access_blockHandler) Read(externalID string) (*Aws_s3_bucket_public_access_block, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_s3_bucket_public_access_block", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_s3_bucket_public_access_block{ Aws_s3_bucket_public_access_block_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_s3_bucket_public_access_blockHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_s3_bucket_public_access_block", externalID)
}

type Aws_sagemaker_notebook_instance struct {

    Aws_sagemaker_notebook_instance_id *string `lyra:"ignore"`

    Arn *string

    Instance_type string

    Kms_key_id *string

    Name string

    Role_arn string

    Security_groups *[]string

    Subnet_id *string

    Tags *map[string]string

}

// Aws_sagemaker_notebook_instanceHandler ...
type Aws_sagemaker_notebook_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sagemaker_notebook_instanceHandler) Create(desired *Aws_sagemaker_notebook_instance) (*Aws_sagemaker_notebook_instance, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sagemaker_notebook_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sagemaker_notebook_instanceHandler) Read(externalID string) (*Aws_sagemaker_notebook_instance, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sagemaker_notebook_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sagemaker_notebook_instance{ Aws_sagemaker_notebook_instance_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sagemaker_notebook_instanceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sagemaker_notebook_instance", externalID)
}

type Aws_secretsmanager_secret_rotation_rules_499 struct {

    Automatically_after_days int

}

type Aws_secretsmanager_secret struct {

    Aws_secretsmanager_secret_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Kms_key_id *string

    Name *string

    Name_prefix *string

    Policy *string

    Recovery_window_in_days *int

    Rotation_enabled *bool

    Rotation_lambda_arn *string

    Rotation_rules *[]Aws_secretsmanager_secret_rotation_rules_499

    Tags *map[string]string

}

// Aws_secretsmanager_secretHandler ...
type Aws_secretsmanager_secretHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_secretsmanager_secretHandler) Create(desired *Aws_secretsmanager_secret) (*Aws_secretsmanager_secret, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_secretsmanager_secret", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_secretsmanager_secretHandler) Read(externalID string) (*Aws_secretsmanager_secret, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_secretsmanager_secret", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_secretsmanager_secret{ Aws_secretsmanager_secret_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_secretsmanager_secretHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_secretsmanager_secret", externalID)
}

type Aws_secretsmanager_secret_version struct {

    Aws_secretsmanager_secret_version_id *string `lyra:"ignore"`

    Arn *string

    Secret_binary *string

    Secret_id string

    Secret_string *string

    Version_id *string

    Version_stages *[]string

}

// Aws_secretsmanager_secret_versionHandler ...
type Aws_secretsmanager_secret_versionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_secretsmanager_secret_versionHandler) Create(desired *Aws_secretsmanager_secret_version) (*Aws_secretsmanager_secret_version, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_secretsmanager_secret_version", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_secretsmanager_secret_versionHandler) Read(externalID string) (*Aws_secretsmanager_secret_version, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_secretsmanager_secret_version", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_secretsmanager_secret_version{ Aws_secretsmanager_secret_version_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_secretsmanager_secret_versionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_secretsmanager_secret_version", externalID)
}

type Aws_security_group_egress_500 struct {

    Cidr_blocks *[]string

    Description *string

    From_port int

    Ipv6_cidr_blocks *[]string

    Prefix_list_ids *[]string

    Protocol string

    Security_groups *[]string

    Self *bool

    To_port int

}

type Aws_security_group_ingress_501 struct {

    Cidr_blocks *[]string

    Description *string

    From_port int

    Ipv6_cidr_blocks *[]string

    Prefix_list_ids *[]string

    Protocol string

    Security_groups *[]string

    Self *bool

    To_port int

}

type Aws_security_group struct {

    Aws_security_group_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Egress *[]Aws_security_group_egress_500

    Ingress *[]Aws_security_group_ingress_501

    Name *string

    Name_prefix *string

    Owner_id *string

    Revoke_rules_on_delete *bool

    Tags *map[string]string

    Vpc_id *string

}

// Aws_security_groupHandler ...
type Aws_security_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_security_groupHandler) Create(desired *Aws_security_group) (*Aws_security_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_security_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_security_groupHandler) Read(externalID string) (*Aws_security_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_security_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_security_group{ Aws_security_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_security_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_security_group", externalID)
}

type Aws_security_group_rule struct {

    Aws_security_group_rule_id *string `lyra:"ignore"`

    Cidr_blocks *[]string

    Description *string

    From_port int

    Ipv6_cidr_blocks *[]string

    Prefix_list_ids *[]string

    Protocol string

    Security_group_id string

    Self *bool

    Source_security_group_id *string

    To_port int

    Type string

}

// Aws_security_group_ruleHandler ...
type Aws_security_group_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_security_group_ruleHandler) Create(desired *Aws_security_group_rule) (*Aws_security_group_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_security_group_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_security_group_ruleHandler) Read(externalID string) (*Aws_security_group_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_security_group_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_security_group_rule{ Aws_security_group_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_security_group_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_security_group_rule", externalID)
}

type Aws_securityhub_account struct {

    Aws_securityhub_account_id *string `lyra:"ignore"`

}

// Aws_securityhub_accountHandler ...
type Aws_securityhub_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_securityhub_accountHandler) Create(desired *Aws_securityhub_account) (*Aws_securityhub_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_securityhub_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_securityhub_accountHandler) Read(externalID string) (*Aws_securityhub_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_securityhub_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_securityhub_account{ Aws_securityhub_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_securityhub_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_securityhub_account", externalID)
}

type Aws_securityhub_product_subscription struct {

    Aws_securityhub_product_subscription_id *string `lyra:"ignore"`

    Arn *string

    Product_arn string

}

// Aws_securityhub_product_subscriptionHandler ...
type Aws_securityhub_product_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_securityhub_product_subscriptionHandler) Create(desired *Aws_securityhub_product_subscription) (*Aws_securityhub_product_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_securityhub_product_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_securityhub_product_subscriptionHandler) Read(externalID string) (*Aws_securityhub_product_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_securityhub_product_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_securityhub_product_subscription{ Aws_securityhub_product_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_securityhub_product_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_securityhub_product_subscription", externalID)
}

type Aws_securityhub_standards_subscription struct {

    Aws_securityhub_standards_subscription_id *string `lyra:"ignore"`

    Standards_arn string

}

// Aws_securityhub_standards_subscriptionHandler ...
type Aws_securityhub_standards_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_securityhub_standards_subscriptionHandler) Create(desired *Aws_securityhub_standards_subscription) (*Aws_securityhub_standards_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_securityhub_standards_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_securityhub_standards_subscriptionHandler) Read(externalID string) (*Aws_securityhub_standards_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_securityhub_standards_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_securityhub_standards_subscription{ Aws_securityhub_standards_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_securityhub_standards_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_securityhub_standards_subscription", externalID)
}

type Aws_service_discovery_http_namespace struct {

    Aws_service_discovery_http_namespace_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Name string

}

// Aws_service_discovery_http_namespaceHandler ...
type Aws_service_discovery_http_namespaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_service_discovery_http_namespaceHandler) Create(desired *Aws_service_discovery_http_namespace) (*Aws_service_discovery_http_namespace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_service_discovery_http_namespace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_service_discovery_http_namespaceHandler) Read(externalID string) (*Aws_service_discovery_http_namespace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_service_discovery_http_namespace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_service_discovery_http_namespace{ Aws_service_discovery_http_namespace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_service_discovery_http_namespaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_service_discovery_http_namespace", externalID)
}

type Aws_service_discovery_private_dns_namespace struct {

    Aws_service_discovery_private_dns_namespace_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Hosted_zone *string

    Name string

    Vpc string

}

// Aws_service_discovery_private_dns_namespaceHandler ...
type Aws_service_discovery_private_dns_namespaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_service_discovery_private_dns_namespaceHandler) Create(desired *Aws_service_discovery_private_dns_namespace) (*Aws_service_discovery_private_dns_namespace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_service_discovery_private_dns_namespace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_service_discovery_private_dns_namespaceHandler) Read(externalID string) (*Aws_service_discovery_private_dns_namespace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_service_discovery_private_dns_namespace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_service_discovery_private_dns_namespace{ Aws_service_discovery_private_dns_namespace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_service_discovery_private_dns_namespaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_service_discovery_private_dns_namespace", externalID)
}

type Aws_service_discovery_public_dns_namespace struct {

    Aws_service_discovery_public_dns_namespace_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Hosted_zone *string

    Name string

}

// Aws_service_discovery_public_dns_namespaceHandler ...
type Aws_service_discovery_public_dns_namespaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_service_discovery_public_dns_namespaceHandler) Create(desired *Aws_service_discovery_public_dns_namespace) (*Aws_service_discovery_public_dns_namespace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_service_discovery_public_dns_namespace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_service_discovery_public_dns_namespaceHandler) Read(externalID string) (*Aws_service_discovery_public_dns_namespace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_service_discovery_public_dns_namespace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_service_discovery_public_dns_namespace{ Aws_service_discovery_public_dns_namespace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_service_discovery_public_dns_namespaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_service_discovery_public_dns_namespace", externalID)
}

type Aws_service_discovery_service_dns_config_502_dns_records_503 struct {

    Ttl int

    Type string

}

type Aws_service_discovery_service_dns_config_502 struct {

    Dns_records []Aws_service_discovery_service_dns_config_502_dns_records_503

    Namespace_id string

    Routing_policy *string

}

type Aws_service_discovery_service_health_check_config_504 struct {

    Failure_threshold *int

    Resource_path *string

    Type *string

}

type Aws_service_discovery_service_health_check_custom_config_505 struct {

    Failure_threshold *int

}

type Aws_service_discovery_service struct {

    Aws_service_discovery_service_id *string `lyra:"ignore"`

    Arn *string

    Description *string

    Dns_config []Aws_service_discovery_service_dns_config_502

    Health_check_config *[]Aws_service_discovery_service_health_check_config_504

    Health_check_custom_config *[]Aws_service_discovery_service_health_check_custom_config_505

    Name string

}

// Aws_service_discovery_serviceHandler ...
type Aws_service_discovery_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_service_discovery_serviceHandler) Create(desired *Aws_service_discovery_service) (*Aws_service_discovery_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_service_discovery_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_service_discovery_serviceHandler) Read(externalID string) (*Aws_service_discovery_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_service_discovery_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_service_discovery_service{ Aws_service_discovery_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_service_discovery_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_service_discovery_service", externalID)
}

type Aws_servicecatalog_portfolio struct {

    Aws_servicecatalog_portfolio_id *string `lyra:"ignore"`

    Arn *string

    Created_time *string

    Description *string

    Name string

    Provider_name *string

    Tags *map[string]string

}

// Aws_servicecatalog_portfolioHandler ...
type Aws_servicecatalog_portfolioHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_servicecatalog_portfolioHandler) Create(desired *Aws_servicecatalog_portfolio) (*Aws_servicecatalog_portfolio, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_servicecatalog_portfolio", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_servicecatalog_portfolioHandler) Read(externalID string) (*Aws_servicecatalog_portfolio, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_servicecatalog_portfolio", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_servicecatalog_portfolio{ Aws_servicecatalog_portfolio_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_servicecatalog_portfolioHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_servicecatalog_portfolio", externalID)
}

type Aws_ses_active_receipt_rule_set struct {

    Aws_ses_active_receipt_rule_set_id *string `lyra:"ignore"`

    Rule_set_name string

}

// Aws_ses_active_receipt_rule_setHandler ...
type Aws_ses_active_receipt_rule_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_active_receipt_rule_setHandler) Create(desired *Aws_ses_active_receipt_rule_set) (*Aws_ses_active_receipt_rule_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_active_receipt_rule_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_active_receipt_rule_setHandler) Read(externalID string) (*Aws_ses_active_receipt_rule_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_active_receipt_rule_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_active_receipt_rule_set{ Aws_ses_active_receipt_rule_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_active_receipt_rule_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_active_receipt_rule_set", externalID)
}

type Aws_ses_configuration_set struct {

    Aws_ses_configuration_set_id *string `lyra:"ignore"`

    Name string

}

// Aws_ses_configuration_setHandler ...
type Aws_ses_configuration_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_configuration_setHandler) Create(desired *Aws_ses_configuration_set) (*Aws_ses_configuration_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_configuration_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_configuration_setHandler) Read(externalID string) (*Aws_ses_configuration_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_configuration_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_configuration_set{ Aws_ses_configuration_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_configuration_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_configuration_set", externalID)
}

type Aws_ses_domain_dkim struct {

    Aws_ses_domain_dkim_id *string `lyra:"ignore"`

    Dkim_tokens *[]string

    Domain string

}

// Aws_ses_domain_dkimHandler ...
type Aws_ses_domain_dkimHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_domain_dkimHandler) Create(desired *Aws_ses_domain_dkim) (*Aws_ses_domain_dkim, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_domain_dkim", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_domain_dkimHandler) Read(externalID string) (*Aws_ses_domain_dkim, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_domain_dkim", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_domain_dkim{ Aws_ses_domain_dkim_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_domain_dkimHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_domain_dkim", externalID)
}

type Aws_ses_domain_identity struct {

    Aws_ses_domain_identity_id *string `lyra:"ignore"`

    Arn *string

    Domain string

    Verification_token *string

}

// Aws_ses_domain_identityHandler ...
type Aws_ses_domain_identityHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_domain_identityHandler) Create(desired *Aws_ses_domain_identity) (*Aws_ses_domain_identity, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_domain_identity", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_domain_identityHandler) Read(externalID string) (*Aws_ses_domain_identity, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_domain_identity", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_domain_identity{ Aws_ses_domain_identity_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_domain_identityHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_domain_identity", externalID)
}

type Aws_ses_domain_identity_verification struct {

    Aws_ses_domain_identity_verification_id *string `lyra:"ignore"`

    Arn *string

    Domain string

}

// Aws_ses_domain_identity_verificationHandler ...
type Aws_ses_domain_identity_verificationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_domain_identity_verificationHandler) Create(desired *Aws_ses_domain_identity_verification) (*Aws_ses_domain_identity_verification, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_domain_identity_verification", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_domain_identity_verificationHandler) Read(externalID string) (*Aws_ses_domain_identity_verification, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_domain_identity_verification", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_domain_identity_verification{ Aws_ses_domain_identity_verification_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_domain_identity_verificationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_domain_identity_verification", externalID)
}

type Aws_ses_domain_mail_from struct {

    Aws_ses_domain_mail_from_id *string `lyra:"ignore"`

    Behavior_on_mx_failure *string

    Domain string

    Mail_from_domain string

}

// Aws_ses_domain_mail_fromHandler ...
type Aws_ses_domain_mail_fromHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_domain_mail_fromHandler) Create(desired *Aws_ses_domain_mail_from) (*Aws_ses_domain_mail_from, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_domain_mail_from", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_domain_mail_fromHandler) Read(externalID string) (*Aws_ses_domain_mail_from, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_domain_mail_from", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_domain_mail_from{ Aws_ses_domain_mail_from_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_domain_mail_fromHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_domain_mail_from", externalID)
}

type Aws_ses_event_destination_cloudwatch_destination_506 struct {

    Default_value string

    Dimension_name string

    Value_source string

}

type Aws_ses_event_destination_kinesis_destination_507 struct {

    Role_arn string

    Stream_arn string

}

type Aws_ses_event_destination_sns_destination_508 struct {

    Topic_arn string

}

type Aws_ses_event_destination struct {

    Aws_ses_event_destination_id *string `lyra:"ignore"`

    Cloudwatch_destination *[]Aws_ses_event_destination_cloudwatch_destination_506

    Configuration_set_name string

    Enabled *bool

    Kinesis_destination *[]Aws_ses_event_destination_kinesis_destination_507

    Matching_types []string

    Name string

    Sns_destination *[]Aws_ses_event_destination_sns_destination_508

}

// Aws_ses_event_destinationHandler ...
type Aws_ses_event_destinationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_event_destinationHandler) Create(desired *Aws_ses_event_destination) (*Aws_ses_event_destination, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_event_destination", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_event_destinationHandler) Read(externalID string) (*Aws_ses_event_destination, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_event_destination", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_event_destination{ Aws_ses_event_destination_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_event_destinationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_event_destination", externalID)
}

type Aws_ses_identity_notification_topic struct {

    Aws_ses_identity_notification_topic_id *string `lyra:"ignore"`

    Identity string

    Notification_type string

    Topic_arn *string

}

// Aws_ses_identity_notification_topicHandler ...
type Aws_ses_identity_notification_topicHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_identity_notification_topicHandler) Create(desired *Aws_ses_identity_notification_topic) (*Aws_ses_identity_notification_topic, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_identity_notification_topic", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_identity_notification_topicHandler) Read(externalID string) (*Aws_ses_identity_notification_topic, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_identity_notification_topic", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_identity_notification_topic{ Aws_ses_identity_notification_topic_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_identity_notification_topicHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_identity_notification_topic", externalID)
}

type Aws_ses_receipt_filter struct {

    Aws_ses_receipt_filter_id *string `lyra:"ignore"`

    Cidr string

    Name string

    Policy string

}

// Aws_ses_receipt_filterHandler ...
type Aws_ses_receipt_filterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_receipt_filterHandler) Create(desired *Aws_ses_receipt_filter) (*Aws_ses_receipt_filter, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_receipt_filter", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_receipt_filterHandler) Read(externalID string) (*Aws_ses_receipt_filter, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_receipt_filter", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_receipt_filter{ Aws_ses_receipt_filter_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_receipt_filterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_receipt_filter", externalID)
}

type Aws_ses_receipt_rule_add_header_action_509 struct {

    Header_name string

    Header_value string

    Position int

}

type Aws_ses_receipt_rule_bounce_action_510 struct {

    Message string

    Position int

    Sender string

    Smtp_reply_code string

    Status_code *string

    Topic_arn *string

}

type Aws_ses_receipt_rule_lambda_action_511 struct {

    Function_arn string

    Invocation_type *string

    Position int

    Topic_arn *string

}

type Aws_ses_receipt_rule_s3_action_512 struct {

    Bucket_name string

    Kms_key_arn *string

    Object_key_prefix *string

    Position int

    Topic_arn *string

}

type Aws_ses_receipt_rule_sns_action_513 struct {

    Position int

    Topic_arn string

}

type Aws_ses_receipt_rule_stop_action_514 struct {

    Position int

    Scope string

    Topic_arn *string

}

type Aws_ses_receipt_rule_workmail_action_515 struct {

    Organization_arn string

    Position int

    Topic_arn *string

}

type Aws_ses_receipt_rule struct {

    Aws_ses_receipt_rule_id *string `lyra:"ignore"`

    Add_header_action *[]Aws_ses_receipt_rule_add_header_action_509

    After *string

    Bounce_action *[]Aws_ses_receipt_rule_bounce_action_510

    Enabled *bool

    Lambda_action *[]Aws_ses_receipt_rule_lambda_action_511

    Name string

    Recipients *[]string

    Rule_set_name string

    S3_action *[]Aws_ses_receipt_rule_s3_action_512

    Scan_enabled *bool

    Sns_action *[]Aws_ses_receipt_rule_sns_action_513

    Stop_action *[]Aws_ses_receipt_rule_stop_action_514

    Tls_policy *string

    Workmail_action *[]Aws_ses_receipt_rule_workmail_action_515

}

// Aws_ses_receipt_ruleHandler ...
type Aws_ses_receipt_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_receipt_ruleHandler) Create(desired *Aws_ses_receipt_rule) (*Aws_ses_receipt_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_receipt_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_receipt_ruleHandler) Read(externalID string) (*Aws_ses_receipt_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_receipt_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_receipt_rule{ Aws_ses_receipt_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_receipt_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_receipt_rule", externalID)
}

type Aws_ses_receipt_rule_set struct {

    Aws_ses_receipt_rule_set_id *string `lyra:"ignore"`

    Rule_set_name string

}

// Aws_ses_receipt_rule_setHandler ...
type Aws_ses_receipt_rule_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_receipt_rule_setHandler) Create(desired *Aws_ses_receipt_rule_set) (*Aws_ses_receipt_rule_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_receipt_rule_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_receipt_rule_setHandler) Read(externalID string) (*Aws_ses_receipt_rule_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_receipt_rule_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_receipt_rule_set{ Aws_ses_receipt_rule_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_receipt_rule_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_receipt_rule_set", externalID)
}

type Aws_ses_template struct {

    Aws_ses_template_id *string `lyra:"ignore"`

    Html *string

    Name string

    Subject *string

    Text *string

}

// Aws_ses_templateHandler ...
type Aws_ses_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ses_templateHandler) Create(desired *Aws_ses_template) (*Aws_ses_template, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ses_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ses_templateHandler) Read(externalID string) (*Aws_ses_template, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ses_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ses_template{ Aws_ses_template_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ses_templateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ses_template", externalID)
}

type Aws_sfn_activity struct {

    Aws_sfn_activity_id *string `lyra:"ignore"`

    Creation_date *string

    Name string

    Tags *map[string]string

}

// Aws_sfn_activityHandler ...
type Aws_sfn_activityHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sfn_activityHandler) Create(desired *Aws_sfn_activity) (*Aws_sfn_activity, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sfn_activity", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sfn_activityHandler) Read(externalID string) (*Aws_sfn_activity, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sfn_activity", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sfn_activity{ Aws_sfn_activity_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sfn_activityHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sfn_activity", externalID)
}

type Aws_sfn_state_machine struct {

    Aws_sfn_state_machine_id *string `lyra:"ignore"`

    Creation_date *string

    Definition string

    Name string

    Role_arn string

    Status *string

    Tags *map[string]string

}

// Aws_sfn_state_machineHandler ...
type Aws_sfn_state_machineHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sfn_state_machineHandler) Create(desired *Aws_sfn_state_machine) (*Aws_sfn_state_machine, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sfn_state_machine", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sfn_state_machineHandler) Read(externalID string) (*Aws_sfn_state_machine, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sfn_state_machine", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sfn_state_machine{ Aws_sfn_state_machine_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sfn_state_machineHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sfn_state_machine", externalID)
}

type Aws_simpledb_domain struct {

    Aws_simpledb_domain_id *string `lyra:"ignore"`

    Name string

}

// Aws_simpledb_domainHandler ...
type Aws_simpledb_domainHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_simpledb_domainHandler) Create(desired *Aws_simpledb_domain) (*Aws_simpledb_domain, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_simpledb_domain", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_simpledb_domainHandler) Read(externalID string) (*Aws_simpledb_domain, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_simpledb_domain", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_simpledb_domain{ Aws_simpledb_domain_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_simpledb_domainHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_simpledb_domain", externalID)
}

type Aws_snapshot_create_volume_permission struct {

    Aws_snapshot_create_volume_permission_id *string `lyra:"ignore"`

    Account_id string

    Snapshot_id string

}

// Aws_snapshot_create_volume_permissionHandler ...
type Aws_snapshot_create_volume_permissionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_snapshot_create_volume_permissionHandler) Create(desired *Aws_snapshot_create_volume_permission) (*Aws_snapshot_create_volume_permission, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_snapshot_create_volume_permission", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_snapshot_create_volume_permissionHandler) Read(externalID string) (*Aws_snapshot_create_volume_permission, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_snapshot_create_volume_permission", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_snapshot_create_volume_permission{ Aws_snapshot_create_volume_permission_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_snapshot_create_volume_permissionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_snapshot_create_volume_permission", externalID)
}

type Aws_sns_platform_application struct {

    Aws_sns_platform_application_id *string `lyra:"ignore"`

    Arn *string

    Event_delivery_failure_topic_arn *string

    Event_endpoint_created_topic_arn *string

    Event_endpoint_deleted_topic_arn *string

    Event_endpoint_updated_topic_arn *string

    Failure_feedback_role_arn *string

    Name string

    Platform string

    Platform_credential string

    Platform_principal *string

    Success_feedback_role_arn *string

    Success_feedback_sample_rate *string

}

// Aws_sns_platform_applicationHandler ...
type Aws_sns_platform_applicationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sns_platform_applicationHandler) Create(desired *Aws_sns_platform_application) (*Aws_sns_platform_application, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sns_platform_application", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sns_platform_applicationHandler) Read(externalID string) (*Aws_sns_platform_application, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sns_platform_application", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sns_platform_application{ Aws_sns_platform_application_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sns_platform_applicationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sns_platform_application", externalID)
}

type Aws_sns_sms_preferences struct {

    Aws_sns_sms_preferences_id *string `lyra:"ignore"`

    Default_sender_id *string

    Default_sms_type *string

    Delivery_status_iam_role_arn *string

    Delivery_status_success_sampling_rate *string

    Monthly_spend_limit *string

    Usage_report_s3_bucket *string

}

// Aws_sns_sms_preferencesHandler ...
type Aws_sns_sms_preferencesHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sns_sms_preferencesHandler) Create(desired *Aws_sns_sms_preferences) (*Aws_sns_sms_preferences, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sns_sms_preferences", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sns_sms_preferencesHandler) Read(externalID string) (*Aws_sns_sms_preferences, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sns_sms_preferences", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sns_sms_preferences{ Aws_sns_sms_preferences_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sns_sms_preferencesHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sns_sms_preferences", externalID)
}

type Aws_sns_topic struct {

    Aws_sns_topic_id *string `lyra:"ignore"`

    Application_failure_feedback_role_arn *string

    Application_success_feedback_role_arn *string

    Application_success_feedback_sample_rate *int

    Arn *string

    Delivery_policy *string

    Display_name *string

    Http_failure_feedback_role_arn *string

    Http_success_feedback_role_arn *string

    Http_success_feedback_sample_rate *int

    Kms_master_key_id *string

    Lambda_failure_feedback_role_arn *string

    Lambda_success_feedback_role_arn *string

    Lambda_success_feedback_sample_rate *int

    Name *string

    Name_prefix *string

    Policy *string

    Sqs_failure_feedback_role_arn *string

    Sqs_success_feedback_role_arn *string

    Sqs_success_feedback_sample_rate *int

}

// Aws_sns_topicHandler ...
type Aws_sns_topicHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sns_topicHandler) Create(desired *Aws_sns_topic) (*Aws_sns_topic, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sns_topic", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sns_topicHandler) Read(externalID string) (*Aws_sns_topic, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sns_topic", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sns_topic{ Aws_sns_topic_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sns_topicHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sns_topic", externalID)
}

type Aws_sns_topic_policy struct {

    Aws_sns_topic_policy_id *string `lyra:"ignore"`

    Arn string

    Policy string

}

// Aws_sns_topic_policyHandler ...
type Aws_sns_topic_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sns_topic_policyHandler) Create(desired *Aws_sns_topic_policy) (*Aws_sns_topic_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sns_topic_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sns_topic_policyHandler) Read(externalID string) (*Aws_sns_topic_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sns_topic_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sns_topic_policy{ Aws_sns_topic_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sns_topic_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sns_topic_policy", externalID)
}

type Aws_sns_topic_subscription struct {

    Aws_sns_topic_subscription_id *string `lyra:"ignore"`

    Arn *string

    Confirmation_timeout_in_minutes *int

    Delivery_policy *string

    Endpoint string

    Endpoint_auto_confirms *bool

    Filter_policy *string

    Protocol string

    Raw_message_delivery *bool

    Topic_arn string

}

// Aws_sns_topic_subscriptionHandler ...
type Aws_sns_topic_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sns_topic_subscriptionHandler) Create(desired *Aws_sns_topic_subscription) (*Aws_sns_topic_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sns_topic_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sns_topic_subscriptionHandler) Read(externalID string) (*Aws_sns_topic_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sns_topic_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sns_topic_subscription{ Aws_sns_topic_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sns_topic_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sns_topic_subscription", externalID)
}

type Aws_spot_datafeed_subscription struct {

    Aws_spot_datafeed_subscription_id *string `lyra:"ignore"`

    Bucket string

    Prefix *string

}

// Aws_spot_datafeed_subscriptionHandler ...
type Aws_spot_datafeed_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_spot_datafeed_subscriptionHandler) Create(desired *Aws_spot_datafeed_subscription) (*Aws_spot_datafeed_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_spot_datafeed_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_spot_datafeed_subscriptionHandler) Read(externalID string) (*Aws_spot_datafeed_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_spot_datafeed_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_spot_datafeed_subscription{ Aws_spot_datafeed_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_spot_datafeed_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_spot_datafeed_subscription", externalID)
}

type Aws_spot_fleet_request_launch_specification_516_ebs_block_device_517 struct {

    Delete_on_termination *bool

    Device_name string

    Encrypted *bool

    Iops *int

    Snapshot_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_spot_fleet_request_launch_specification_516_ephemeral_block_device_518 struct {

    Device_name string

    Virtual_name string

}

type Aws_spot_fleet_request_launch_specification_516_root_block_device_519 struct {

    Delete_on_termination *bool

    Iops *int

    Volume_size *int

    Volume_type *string

}

type Aws_spot_fleet_request_launch_specification_516 struct {

    Ami string

    Associate_public_ip_address *bool

    Availability_zone *string

    Ebs_block_device *[]Aws_spot_fleet_request_launch_specification_516_ebs_block_device_517

    Ebs_optimized *bool

    Ephemeral_block_device *[]Aws_spot_fleet_request_launch_specification_516_ephemeral_block_device_518

    Iam_instance_profile *string

    Iam_instance_profile_arn *string

    Instance_type string

    Key_name *string

    Monitoring *bool

    Placement_group *string

    Placement_tenancy *string

    Root_block_device *[]Aws_spot_fleet_request_launch_specification_516_root_block_device_519

    Spot_price *string

    Subnet_id *string

    Tags *map[string]string

    User_data *string

    Vpc_security_group_ids *[]string

    Weighted_capacity *string

}

type Aws_spot_fleet_request struct {

    Aws_spot_fleet_request_id *string `lyra:"ignore"`

    Allocation_strategy *string

    Client_token *string

    Excess_capacity_termination_policy *string

    Fleet_type *string

    Iam_fleet_role string

    Instance_interruption_behaviour *string

    Instance_pools_to_use_count *int

    Launch_specification []Aws_spot_fleet_request_launch_specification_516

    Load_balancers *[]string

    Replace_unhealthy_instances *bool

    Spot_price *string

    Spot_request_state *string

    Target_capacity int

    Target_group_arns *[]string

    Terminate_instances_with_expiration *bool

    Valid_from *string

    Valid_until *string

    Wait_for_fulfillment *bool

}

// Aws_spot_fleet_requestHandler ...
type Aws_spot_fleet_requestHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_spot_fleet_requestHandler) Create(desired *Aws_spot_fleet_request) (*Aws_spot_fleet_request, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_spot_fleet_request", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_spot_fleet_requestHandler) Read(externalID string) (*Aws_spot_fleet_request, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_spot_fleet_request", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_spot_fleet_request{ Aws_spot_fleet_request_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_spot_fleet_requestHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_spot_fleet_request", externalID)
}

type Aws_spot_instance_request_credit_specification_520 struct {

    Cpu_credits *string

}

type Aws_spot_instance_request_ebs_block_device_521 struct {

    Delete_on_termination *bool

    Device_name string

    Encrypted *bool

    Iops *int

    Snapshot_id *string

    Volume_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_spot_instance_request_ephemeral_block_device_522 struct {

    Device_name string

    No_device *bool

    Virtual_name *string

}

type Aws_spot_instance_request_network_interface_523 struct {

    Delete_on_termination *bool

    Device_index int

    Network_interface_id string

}

type Aws_spot_instance_request_root_block_device_524 struct {

    Delete_on_termination *bool

    Iops *int

    Volume_id *string

    Volume_size *int

    Volume_type *string

}

type Aws_spot_instance_request struct {

    Aws_spot_instance_request_id *string `lyra:"ignore"`

    Ami string

    Arn *string

    Associate_public_ip_address *bool

    Availability_zone *string

    Block_device *map[string]string

    Block_duration_minutes *int

    Cpu_core_count *int

    Cpu_threads_per_core *int

    Credit_specification *[]Aws_spot_instance_request_credit_specification_520

    Disable_api_termination *bool

    Ebs_block_device *[]Aws_spot_instance_request_ebs_block_device_521

    Ebs_optimized *bool

    Ephemeral_block_device *[]Aws_spot_instance_request_ephemeral_block_device_522

    Get_password_data *bool

    Host_id *string

    Iam_instance_profile *string

    Instance_initiated_shutdown_behavior *string

    Instance_interruption_behaviour *string

    Instance_state *string

    Instance_type string

    Ipv6_address_count *int

    Ipv6_addresses *[]string

    Key_name *string

    Launch_group *string

    Monitoring *bool

    Network_interface *[]Aws_spot_instance_request_network_interface_523

    Network_interface_id *string

    Password_data *string

    Placement_group *string

    Primary_network_interface_id *string

    Private_dns *string

    Private_ip *string

    Public_dns *string

    Public_ip *string

    Root_block_device *[]Aws_spot_instance_request_root_block_device_524

    Security_groups *[]string

    Source_dest_check *bool

    Spot_bid_status *string

    Spot_instance_id *string

    Spot_price *string

    Spot_request_state *string

    Spot_type *string

    Subnet_id *string

    Tags *map[string]string

    Tenancy *string

    User_data *string

    User_data_base64 *string

    Valid_from *string

    Valid_until *string

    Volume_tags *map[string]string

    Vpc_security_group_ids *[]string

    Wait_for_fulfillment *bool

}

// Aws_spot_instance_requestHandler ...
type Aws_spot_instance_requestHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_spot_instance_requestHandler) Create(desired *Aws_spot_instance_request) (*Aws_spot_instance_request, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_spot_instance_request", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_spot_instance_requestHandler) Read(externalID string) (*Aws_spot_instance_request, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_spot_instance_request", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_spot_instance_request{ Aws_spot_instance_request_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_spot_instance_requestHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_spot_instance_request", externalID)
}

type Aws_sqs_queue struct {

    Aws_sqs_queue_id *string `lyra:"ignore"`

    Arn *string

    Content_based_deduplication *bool

    Delay_seconds *int

    Fifo_queue *bool

    Kms_data_key_reuse_period_seconds *int

    Kms_master_key_id *string

    Max_message_size *int

    Message_retention_seconds *int

    Name *string

    Name_prefix *string

    Policy *string

    Receive_wait_time_seconds *int

    Redrive_policy *string

    Tags *map[string]string

    Visibility_timeout_seconds *int

}

// Aws_sqs_queueHandler ...
type Aws_sqs_queueHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sqs_queueHandler) Create(desired *Aws_sqs_queue) (*Aws_sqs_queue, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sqs_queue", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sqs_queueHandler) Read(externalID string) (*Aws_sqs_queue, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sqs_queue", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sqs_queue{ Aws_sqs_queue_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sqs_queueHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sqs_queue", externalID)
}

type Aws_sqs_queue_policy struct {

    Aws_sqs_queue_policy_id *string `lyra:"ignore"`

    Policy string

    Queue_url string

}

// Aws_sqs_queue_policyHandler ...
type Aws_sqs_queue_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_sqs_queue_policyHandler) Create(desired *Aws_sqs_queue_policy) (*Aws_sqs_queue_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_sqs_queue_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_sqs_queue_policyHandler) Read(externalID string) (*Aws_sqs_queue_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_sqs_queue_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_sqs_queue_policy{ Aws_sqs_queue_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_sqs_queue_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_sqs_queue_policy", externalID)
}

type Aws_ssm_activation struct {

    Aws_ssm_activation_id *string `lyra:"ignore"`

    Activation_code *string

    Description *string

    Expiration_date *string

    Expired *string

    Iam_role string

    Name *string

    Registration_count *int

    Registration_limit *int

}

// Aws_ssm_activationHandler ...
type Aws_ssm_activationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_activationHandler) Create(desired *Aws_ssm_activation) (*Aws_ssm_activation, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_activation", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_activationHandler) Read(externalID string) (*Aws_ssm_activation, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_activation", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_activation{ Aws_ssm_activation_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_activationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_activation", externalID)
}

type Aws_ssm_association_output_location_525 struct {

    S3_bucket_name string

    S3_key_prefix *string

}

type Aws_ssm_association_targets_526 struct {

    Key string

    Values []string

}

type Aws_ssm_association struct {

    Aws_ssm_association_id *string `lyra:"ignore"`

    Association_id *string

    Association_name *string

    Document_version *string

    Instance_id *string

    Name string

    Output_location *[]Aws_ssm_association_output_location_525

    Parameters *map[string]string

    Schedule_expression *string

    Targets *[]Aws_ssm_association_targets_526

}

// Aws_ssm_associationHandler ...
type Aws_ssm_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_associationHandler) Create(desired *Aws_ssm_association) (*Aws_ssm_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_associationHandler) Read(externalID string) (*Aws_ssm_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_association{ Aws_ssm_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_association", externalID)
}

type Aws_ssm_document_parameter_527 struct {

    Default_value *string

    Description *string

    Name *string

    Type *string

}

type Aws_ssm_document struct {

    Aws_ssm_document_id *string `lyra:"ignore"`

    Arn *string

    Content string

    Created_date *string

    Default_version *string

    Description *string

    Document_format *string

    Document_type string

    Hash *string

    Hash_type *string

    Latest_version *string

    Name string

    Owner *string

    Parameter *[]Aws_ssm_document_parameter_527

    Permissions *map[string]string

    Platform_types *[]string

    Schema_version *string

    Status *string

    Tags *map[string]string

}

// Aws_ssm_documentHandler ...
type Aws_ssm_documentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_documentHandler) Create(desired *Aws_ssm_document) (*Aws_ssm_document, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_document", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_documentHandler) Read(externalID string) (*Aws_ssm_document, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_document", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_document{ Aws_ssm_document_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_documentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_document", externalID)
}

type Aws_ssm_maintenance_window struct {

    Aws_ssm_maintenance_window_id *string `lyra:"ignore"`

    Allow_unassociated_targets *bool

    Cutoff int

    Duration int

    Enabled *bool

    End_date *string

    Name string

    Schedule string

    Schedule_timezone *string

    Start_date *string

}

// Aws_ssm_maintenance_windowHandler ...
type Aws_ssm_maintenance_windowHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_maintenance_windowHandler) Create(desired *Aws_ssm_maintenance_window) (*Aws_ssm_maintenance_window, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_maintenance_window", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_maintenance_windowHandler) Read(externalID string) (*Aws_ssm_maintenance_window, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_maintenance_window", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_maintenance_window{ Aws_ssm_maintenance_window_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_maintenance_windowHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_maintenance_window", externalID)
}

type Aws_ssm_maintenance_window_target_targets_528 struct {

    Key string

    Values []string

}

type Aws_ssm_maintenance_window_target struct {

    Aws_ssm_maintenance_window_target_id *string `lyra:"ignore"`

    Owner_information *string

    Resource_type string

    Targets []Aws_ssm_maintenance_window_target_targets_528

    Window_id string

}

// Aws_ssm_maintenance_window_targetHandler ...
type Aws_ssm_maintenance_window_targetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_maintenance_window_targetHandler) Create(desired *Aws_ssm_maintenance_window_target) (*Aws_ssm_maintenance_window_target, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_maintenance_window_target", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_maintenance_window_targetHandler) Read(externalID string) (*Aws_ssm_maintenance_window_target, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_maintenance_window_target", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_maintenance_window_target{ Aws_ssm_maintenance_window_target_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_maintenance_window_targetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_maintenance_window_target", externalID)
}

type Aws_ssm_maintenance_window_task_logging_info_529 struct {

    S3_bucket_name string

    S3_bucket_prefix *string

    S3_region string

}

type Aws_ssm_maintenance_window_task_targets_530 struct {

    Key string

    Values []string

}

type Aws_ssm_maintenance_window_task_task_parameters_531 struct {

    Name string

    Values []string

}

type Aws_ssm_maintenance_window_task struct {

    Aws_ssm_maintenance_window_task_id *string `lyra:"ignore"`

    Description *string

    Logging_info *[]Aws_ssm_maintenance_window_task_logging_info_529

    Max_concurrency string

    Max_errors string

    Name *string

    Priority *int

    Service_role_arn string

    Targets []Aws_ssm_maintenance_window_task_targets_530

    Task_arn string

    Task_parameters *[]Aws_ssm_maintenance_window_task_task_parameters_531

    Task_type string

    Window_id string

}

// Aws_ssm_maintenance_window_taskHandler ...
type Aws_ssm_maintenance_window_taskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_maintenance_window_taskHandler) Create(desired *Aws_ssm_maintenance_window_task) (*Aws_ssm_maintenance_window_task, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_maintenance_window_task", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_maintenance_window_taskHandler) Read(externalID string) (*Aws_ssm_maintenance_window_task, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_maintenance_window_task", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_maintenance_window_task{ Aws_ssm_maintenance_window_task_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_maintenance_window_taskHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_maintenance_window_task", externalID)
}

type Aws_ssm_parameter struct {

    Aws_ssm_parameter_id *string `lyra:"ignore"`

    Allowed_pattern *string

    Arn *string

    Description *string

    Key_id *string

    Name string

    Overwrite *bool

    Tags *map[string]string

    Type string

    Value string

}

// Aws_ssm_parameterHandler ...
type Aws_ssm_parameterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_parameterHandler) Create(desired *Aws_ssm_parameter) (*Aws_ssm_parameter, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_parameter", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_parameterHandler) Read(externalID string) (*Aws_ssm_parameter, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_parameter", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_parameter{ Aws_ssm_parameter_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_parameterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_parameter", externalID)
}

type Aws_ssm_patch_baseline_approval_rule_532_patch_filter_533 struct {

    Key string

    Values []string

}

type Aws_ssm_patch_baseline_approval_rule_532 struct {

    Approve_after_days int

    Compliance_level *string

    Enable_non_security *bool

    Patch_filter []Aws_ssm_patch_baseline_approval_rule_532_patch_filter_533

}

type Aws_ssm_patch_baseline_global_filter_534 struct {

    Key string

    Values []string

}

type Aws_ssm_patch_baseline struct {

    Aws_ssm_patch_baseline_id *string `lyra:"ignore"`

    Approval_rule *[]Aws_ssm_patch_baseline_approval_rule_532

    Approved_patches *[]string

    Approved_patches_compliance_level *string

    Description *string

    Global_filter *[]Aws_ssm_patch_baseline_global_filter_534

    Name string

    Operating_system *string

    Rejected_patches *[]string

}

// Aws_ssm_patch_baselineHandler ...
type Aws_ssm_patch_baselineHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_patch_baselineHandler) Create(desired *Aws_ssm_patch_baseline) (*Aws_ssm_patch_baseline, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_patch_baseline", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_patch_baselineHandler) Read(externalID string) (*Aws_ssm_patch_baseline, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_patch_baseline", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_patch_baseline{ Aws_ssm_patch_baseline_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_patch_baselineHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_patch_baseline", externalID)
}

type Aws_ssm_patch_group struct {

    Aws_ssm_patch_group_id *string `lyra:"ignore"`

    Baseline_id string

    Patch_group string

}

// Aws_ssm_patch_groupHandler ...
type Aws_ssm_patch_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_patch_groupHandler) Create(desired *Aws_ssm_patch_group) (*Aws_ssm_patch_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_patch_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_patch_groupHandler) Read(externalID string) (*Aws_ssm_patch_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_patch_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_patch_group{ Aws_ssm_patch_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_patch_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_patch_group", externalID)
}

type Aws_ssm_resource_data_sync_s3_destination_535 struct {

    Bucket_name string

    Kms_key_arn *string

    Prefix *string

    Region string

    Sync_format *string

}

type Aws_ssm_resource_data_sync struct {

    Aws_ssm_resource_data_sync_id *string `lyra:"ignore"`

    Name string

    S3_destination []Aws_ssm_resource_data_sync_s3_destination_535

}

// Aws_ssm_resource_data_syncHandler ...
type Aws_ssm_resource_data_syncHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_ssm_resource_data_syncHandler) Create(desired *Aws_ssm_resource_data_sync) (*Aws_ssm_resource_data_sync, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_ssm_resource_data_sync", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_ssm_resource_data_syncHandler) Read(externalID string) (*Aws_ssm_resource_data_sync, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_ssm_resource_data_sync", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_ssm_resource_data_sync{ Aws_ssm_resource_data_sync_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_ssm_resource_data_syncHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_ssm_resource_data_sync", externalID)
}

type Aws_storagegateway_cache struct {

    Aws_storagegateway_cache_id *string `lyra:"ignore"`

    Disk_id string

    Gateway_arn string

}

// Aws_storagegateway_cacheHandler ...
type Aws_storagegateway_cacheHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_storagegateway_cacheHandler) Create(desired *Aws_storagegateway_cache) (*Aws_storagegateway_cache, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_storagegateway_cache", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_storagegateway_cacheHandler) Read(externalID string) (*Aws_storagegateway_cache, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_storagegateway_cache", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_storagegateway_cache{ Aws_storagegateway_cache_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_storagegateway_cacheHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_storagegateway_cache", externalID)
}

type Aws_storagegateway_cached_iscsi_volume struct {

    Aws_storagegateway_cached_iscsi_volume_id *string `lyra:"ignore"`

    Arn *string

    Chap_enabled *bool

    Gateway_arn string

    Lun_number *int

    Network_interface_id string

    Network_interface_port *int

    Snapshot_id *string

    Source_volume_arn *string

    Target_arn *string

    Target_name string

    Volume_arn *string

    Volume_id *string

    Volume_size_in_bytes int

}

// Aws_storagegateway_cached_iscsi_volumeHandler ...
type Aws_storagegateway_cached_iscsi_volumeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_storagegateway_cached_iscsi_volumeHandler) Create(desired *Aws_storagegateway_cached_iscsi_volume) (*Aws_storagegateway_cached_iscsi_volume, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_storagegateway_cached_iscsi_volume", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_storagegateway_cached_iscsi_volumeHandler) Read(externalID string) (*Aws_storagegateway_cached_iscsi_volume, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_storagegateway_cached_iscsi_volume", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_storagegateway_cached_iscsi_volume{ Aws_storagegateway_cached_iscsi_volume_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_storagegateway_cached_iscsi_volumeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_storagegateway_cached_iscsi_volume", externalID)
}

type Aws_storagegateway_gateway_smb_active_directory_settings_536 struct {

    Domain_name string

    Password string

    Username string

}

type Aws_storagegateway_gateway struct {

    Aws_storagegateway_gateway_id *string `lyra:"ignore"`

    Activation_key *string

    Arn *string

    Gateway_id *string

    Gateway_ip_address *string

    Gateway_name string

    Gateway_timezone string

    Gateway_type *string

    Medium_changer_type *string

    Smb_active_directory_settings *[]Aws_storagegateway_gateway_smb_active_directory_settings_536

    Smb_guest_password *string

    Tape_drive_type *string

}

// Aws_storagegateway_gatewayHandler ...
type Aws_storagegateway_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_storagegateway_gatewayHandler) Create(desired *Aws_storagegateway_gateway) (*Aws_storagegateway_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_storagegateway_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_storagegateway_gatewayHandler) Read(externalID string) (*Aws_storagegateway_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_storagegateway_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_storagegateway_gateway{ Aws_storagegateway_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_storagegateway_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_storagegateway_gateway", externalID)
}

type Aws_storagegateway_nfs_file_share_nfs_file_share_defaults_537 struct {

    Directory_mode *string

    File_mode *string

    Group_id *int

    Owner_id *int

}

type Aws_storagegateway_nfs_file_share struct {

    Aws_storagegateway_nfs_file_share_id *string `lyra:"ignore"`

    Arn *string

    Client_list []string

    Default_storage_class *string

    Fileshare_id *string

    Gateway_arn string

    Guess_mime_type_enabled *bool

    Kms_encrypted *bool

    Kms_key_arn *string

    Location_arn string

    Nfs_file_share_defaults *[]Aws_storagegateway_nfs_file_share_nfs_file_share_defaults_537

    Object_acl *string

    Read_only *bool

    Requester_pays *bool

    Role_arn string

    Squash *string

}

// Aws_storagegateway_nfs_file_shareHandler ...
type Aws_storagegateway_nfs_file_shareHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_storagegateway_nfs_file_shareHandler) Create(desired *Aws_storagegateway_nfs_file_share) (*Aws_storagegateway_nfs_file_share, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_storagegateway_nfs_file_share", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_storagegateway_nfs_file_shareHandler) Read(externalID string) (*Aws_storagegateway_nfs_file_share, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_storagegateway_nfs_file_share", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_storagegateway_nfs_file_share{ Aws_storagegateway_nfs_file_share_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_storagegateway_nfs_file_shareHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_storagegateway_nfs_file_share", externalID)
}

type Aws_storagegateway_smb_file_share struct {

    Aws_storagegateway_smb_file_share_id *string `lyra:"ignore"`

    Arn *string

    Authentication *string

    Default_storage_class *string

    Fileshare_id *string

    Gateway_arn string

    Guess_mime_type_enabled *bool

    Invalid_user_list *[]string

    Kms_encrypted *bool

    Kms_key_arn *string

    Location_arn string

    Object_acl *string

    Read_only *bool

    Requester_pays *bool

    Role_arn string

    Valid_user_list *[]string

}

// Aws_storagegateway_smb_file_shareHandler ...
type Aws_storagegateway_smb_file_shareHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_storagegateway_smb_file_shareHandler) Create(desired *Aws_storagegateway_smb_file_share) (*Aws_storagegateway_smb_file_share, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_storagegateway_smb_file_share", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_storagegateway_smb_file_shareHandler) Read(externalID string) (*Aws_storagegateway_smb_file_share, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_storagegateway_smb_file_share", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_storagegateway_smb_file_share{ Aws_storagegateway_smb_file_share_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_storagegateway_smb_file_shareHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_storagegateway_smb_file_share", externalID)
}

type Aws_storagegateway_upload_buffer struct {

    Aws_storagegateway_upload_buffer_id *string `lyra:"ignore"`

    Disk_id string

    Gateway_arn string

}

// Aws_storagegateway_upload_bufferHandler ...
type Aws_storagegateway_upload_bufferHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_storagegateway_upload_bufferHandler) Create(desired *Aws_storagegateway_upload_buffer) (*Aws_storagegateway_upload_buffer, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_storagegateway_upload_buffer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_storagegateway_upload_bufferHandler) Read(externalID string) (*Aws_storagegateway_upload_buffer, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_storagegateway_upload_buffer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_storagegateway_upload_buffer{ Aws_storagegateway_upload_buffer_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_storagegateway_upload_bufferHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_storagegateway_upload_buffer", externalID)
}

type Aws_storagegateway_working_storage struct {

    Aws_storagegateway_working_storage_id *string `lyra:"ignore"`

    Disk_id string

    Gateway_arn string

}

// Aws_storagegateway_working_storageHandler ...
type Aws_storagegateway_working_storageHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_storagegateway_working_storageHandler) Create(desired *Aws_storagegateway_working_storage) (*Aws_storagegateway_working_storage, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_storagegateway_working_storage", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_storagegateway_working_storageHandler) Read(externalID string) (*Aws_storagegateway_working_storage, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_storagegateway_working_storage", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_storagegateway_working_storage{ Aws_storagegateway_working_storage_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_storagegateway_working_storageHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_storagegateway_working_storage", externalID)
}

type Aws_subnet struct {

    Aws_subnet_id *string `lyra:"ignore"`

    Arn *string

    Assign_ipv6_address_on_creation *bool

    Availability_zone *string

    Availability_zone_id *string

    Cidr_block string

    Ipv6_cidr_block *string

    Ipv6_cidr_block_association_id *string

    Map_public_ip_on_launch *bool

    Owner_id *string

    Tags *map[string]string

    Vpc_id string

}

// Aws_subnetHandler ...
type Aws_subnetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_subnetHandler) Create(desired *Aws_subnet) (*Aws_subnet, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_subnet", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_subnetHandler) Read(externalID string) (*Aws_subnet, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_subnet", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_subnet{ Aws_subnet_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_subnetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_subnet", externalID)
}

type Aws_swf_domain struct {

    Aws_swf_domain_id *string `lyra:"ignore"`

    Description *string

    Name *string

    Name_prefix *string

    Workflow_execution_retention_period_in_days string

}

// Aws_swf_domainHandler ...
type Aws_swf_domainHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_swf_domainHandler) Create(desired *Aws_swf_domain) (*Aws_swf_domain, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_swf_domain", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_swf_domainHandler) Read(externalID string) (*Aws_swf_domain, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_swf_domain", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_swf_domain{ Aws_swf_domain_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_swf_domainHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_swf_domain", externalID)
}

type Aws_transfer_server struct {

    Aws_transfer_server_id *string `lyra:"ignore"`

    Arn *string

    Endpoint *string

    Force_destroy *bool

    Identity_provider_type *string

    Invocation_role *string

    Logging_role *string

    Tags *map[string]string

    Url *string

}

// Aws_transfer_serverHandler ...
type Aws_transfer_serverHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_transfer_serverHandler) Create(desired *Aws_transfer_server) (*Aws_transfer_server, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_transfer_server", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_transfer_serverHandler) Read(externalID string) (*Aws_transfer_server, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_transfer_server", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_transfer_server{ Aws_transfer_server_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_transfer_serverHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_transfer_server", externalID)
}

type Aws_transfer_ssh_key struct {

    Aws_transfer_ssh_key_id *string `lyra:"ignore"`

    Body string

    Server_id string

    User_name string

}

// Aws_transfer_ssh_keyHandler ...
type Aws_transfer_ssh_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_transfer_ssh_keyHandler) Create(desired *Aws_transfer_ssh_key) (*Aws_transfer_ssh_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_transfer_ssh_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_transfer_ssh_keyHandler) Read(externalID string) (*Aws_transfer_ssh_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_transfer_ssh_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_transfer_ssh_key{ Aws_transfer_ssh_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_transfer_ssh_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_transfer_ssh_key", externalID)
}

type Aws_transfer_user struct {

    Aws_transfer_user_id *string `lyra:"ignore"`

    Arn *string

    Home_directory *string

    Policy *string

    Role string

    Server_id string

    Tags *map[string]string

    User_name string

}

// Aws_transfer_userHandler ...
type Aws_transfer_userHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_transfer_userHandler) Create(desired *Aws_transfer_user) (*Aws_transfer_user, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_transfer_user", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_transfer_userHandler) Read(externalID string) (*Aws_transfer_user, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_transfer_user", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_transfer_user{ Aws_transfer_user_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_transfer_userHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_transfer_user", externalID)
}

type Aws_volume_attachment struct {

    Aws_volume_attachment_id *string `lyra:"ignore"`

    Device_name string

    Force_detach *bool

    Instance_id string

    Skip_destroy *bool

    Volume_id string

}

// Aws_volume_attachmentHandler ...
type Aws_volume_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_volume_attachmentHandler) Create(desired *Aws_volume_attachment) (*Aws_volume_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_volume_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_volume_attachmentHandler) Read(externalID string) (*Aws_volume_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_volume_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_volume_attachment{ Aws_volume_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_volume_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_volume_attachment", externalID)
}

type Aws_vpc struct {

    Aws_vpc_id *string `lyra:"ignore"`

    Arn *string

    Assign_generated_ipv6_cidr_block *bool

    Cidr_block string

    Default_network_acl_id *string

    Default_route_table_id *string

    Default_security_group_id *string

    Dhcp_options_id *string

    Enable_classiclink *bool

    Enable_classiclink_dns_support *bool

    Enable_dns_hostnames *bool

    Enable_dns_support *bool

    Instance_tenancy *string

    Ipv6_association_id *string

    Ipv6_cidr_block *string

    Main_route_table_id *string

    Owner_id *string

    Tags *map[string]string

}

// Aws_vpcHandler ...
type Aws_vpcHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpcHandler) Create(desired *Aws_vpc) (*Aws_vpc, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpcHandler) Read(externalID string) (*Aws_vpc, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc{ Aws_vpc_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpcHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc", externalID)
}

type Aws_vpc_dhcp_options struct {

    Aws_vpc_dhcp_options_id *string `lyra:"ignore"`

    Domain_name *string

    Domain_name_servers *[]string

    Netbios_name_servers *[]string

    Netbios_node_type *string

    Ntp_servers *[]string

    Owner_id *string

    Tags *map[string]string

}

// Aws_vpc_dhcp_optionsHandler ...
type Aws_vpc_dhcp_optionsHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_dhcp_optionsHandler) Create(desired *Aws_vpc_dhcp_options) (*Aws_vpc_dhcp_options, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_dhcp_options", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_dhcp_optionsHandler) Read(externalID string) (*Aws_vpc_dhcp_options, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_dhcp_options", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_dhcp_options{ Aws_vpc_dhcp_options_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_dhcp_optionsHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_dhcp_options", externalID)
}

type Aws_vpc_dhcp_options_association struct {

    Aws_vpc_dhcp_options_association_id *string `lyra:"ignore"`

    Dhcp_options_id string

    Vpc_id string

}

// Aws_vpc_dhcp_options_associationHandler ...
type Aws_vpc_dhcp_options_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_dhcp_options_associationHandler) Create(desired *Aws_vpc_dhcp_options_association) (*Aws_vpc_dhcp_options_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_dhcp_options_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_dhcp_options_associationHandler) Read(externalID string) (*Aws_vpc_dhcp_options_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_dhcp_options_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_dhcp_options_association{ Aws_vpc_dhcp_options_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_dhcp_options_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_dhcp_options_association", externalID)
}

type Aws_vpc_endpoint_dns_entry_538 struct {

    Dns_name *string

    Hosted_zone_id *string

}

type Aws_vpc_endpoint struct {

    Aws_vpc_endpoint_id *string `lyra:"ignore"`

    Auto_accept *bool

    Cidr_blocks *[]string

    Dns_entry *[]Aws_vpc_endpoint_dns_entry_538

    Network_interface_ids *[]string

    Policy *string

    Prefix_list_id *string

    Private_dns_enabled *bool

    Route_table_ids *[]string

    Security_group_ids *[]string

    Service_name string

    State *string

    Subnet_ids *[]string

    Vpc_endpoint_type *string

    Vpc_id string

}

// Aws_vpc_endpointHandler ...
type Aws_vpc_endpointHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_endpointHandler) Create(desired *Aws_vpc_endpoint) (*Aws_vpc_endpoint, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_endpoint", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_endpointHandler) Read(externalID string) (*Aws_vpc_endpoint, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_endpoint", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_endpoint{ Aws_vpc_endpoint_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_endpointHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_endpoint", externalID)
}

type Aws_vpc_endpoint_connection_notification struct {

    Aws_vpc_endpoint_connection_notification_id *string `lyra:"ignore"`

    Connection_events []string

    Connection_notification_arn string

    Notification_type *string

    State *string

    Vpc_endpoint_id *string

    Vpc_endpoint_service_id *string

}

// Aws_vpc_endpoint_connection_notificationHandler ...
type Aws_vpc_endpoint_connection_notificationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_endpoint_connection_notificationHandler) Create(desired *Aws_vpc_endpoint_connection_notification) (*Aws_vpc_endpoint_connection_notification, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_endpoint_connection_notification", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_endpoint_connection_notificationHandler) Read(externalID string) (*Aws_vpc_endpoint_connection_notification, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_endpoint_connection_notification", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_endpoint_connection_notification{ Aws_vpc_endpoint_connection_notification_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_endpoint_connection_notificationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_endpoint_connection_notification", externalID)
}

type Aws_vpc_endpoint_route_table_association struct {

    Aws_vpc_endpoint_route_table_association_id *string `lyra:"ignore"`

    Route_table_id string

    Vpc_endpoint_id string

}

// Aws_vpc_endpoint_route_table_associationHandler ...
type Aws_vpc_endpoint_route_table_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_endpoint_route_table_associationHandler) Create(desired *Aws_vpc_endpoint_route_table_association) (*Aws_vpc_endpoint_route_table_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_endpoint_route_table_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_endpoint_route_table_associationHandler) Read(externalID string) (*Aws_vpc_endpoint_route_table_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_endpoint_route_table_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_endpoint_route_table_association{ Aws_vpc_endpoint_route_table_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_endpoint_route_table_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_endpoint_route_table_association", externalID)
}

type Aws_vpc_endpoint_service struct {

    Aws_vpc_endpoint_service_id *string `lyra:"ignore"`

    Acceptance_required bool

    Allowed_principals *[]string

    Availability_zones *[]string

    Base_endpoint_dns_names *[]string

    Network_load_balancer_arns []string

    Private_dns_name *string

    Service_name *string

    Service_type *string

    State *string

}

// Aws_vpc_endpoint_serviceHandler ...
type Aws_vpc_endpoint_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_endpoint_serviceHandler) Create(desired *Aws_vpc_endpoint_service) (*Aws_vpc_endpoint_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_endpoint_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_endpoint_serviceHandler) Read(externalID string) (*Aws_vpc_endpoint_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_endpoint_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_endpoint_service{ Aws_vpc_endpoint_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_endpoint_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_endpoint_service", externalID)
}

type Aws_vpc_endpoint_service_allowed_principal struct {

    Aws_vpc_endpoint_service_allowed_principal_id *string `lyra:"ignore"`

    Principal_arn string

    Vpc_endpoint_service_id string

}

// Aws_vpc_endpoint_service_allowed_principalHandler ...
type Aws_vpc_endpoint_service_allowed_principalHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_endpoint_service_allowed_principalHandler) Create(desired *Aws_vpc_endpoint_service_allowed_principal) (*Aws_vpc_endpoint_service_allowed_principal, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_endpoint_service_allowed_principal", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_endpoint_service_allowed_principalHandler) Read(externalID string) (*Aws_vpc_endpoint_service_allowed_principal, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_endpoint_service_allowed_principal", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_endpoint_service_allowed_principal{ Aws_vpc_endpoint_service_allowed_principal_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_endpoint_service_allowed_principalHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_endpoint_service_allowed_principal", externalID)
}

type Aws_vpc_endpoint_subnet_association struct {

    Aws_vpc_endpoint_subnet_association_id *string `lyra:"ignore"`

    Subnet_id string

    Vpc_endpoint_id string

}

// Aws_vpc_endpoint_subnet_associationHandler ...
type Aws_vpc_endpoint_subnet_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_endpoint_subnet_associationHandler) Create(desired *Aws_vpc_endpoint_subnet_association) (*Aws_vpc_endpoint_subnet_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_endpoint_subnet_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_endpoint_subnet_associationHandler) Read(externalID string) (*Aws_vpc_endpoint_subnet_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_endpoint_subnet_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_endpoint_subnet_association{ Aws_vpc_endpoint_subnet_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_endpoint_subnet_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_endpoint_subnet_association", externalID)
}

type Aws_vpc_ipv4_cidr_block_association struct {

    Aws_vpc_ipv4_cidr_block_association_id *string `lyra:"ignore"`

    Cidr_block string

    Vpc_id string

}

// Aws_vpc_ipv4_cidr_block_associationHandler ...
type Aws_vpc_ipv4_cidr_block_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_ipv4_cidr_block_associationHandler) Create(desired *Aws_vpc_ipv4_cidr_block_association) (*Aws_vpc_ipv4_cidr_block_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_ipv4_cidr_block_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_ipv4_cidr_block_associationHandler) Read(externalID string) (*Aws_vpc_ipv4_cidr_block_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_ipv4_cidr_block_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_ipv4_cidr_block_association{ Aws_vpc_ipv4_cidr_block_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_ipv4_cidr_block_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_ipv4_cidr_block_association", externalID)
}

type Aws_vpc_peering_connection_accepter_539 struct {

    Allow_classic_link_to_remote_vpc *bool

    Allow_remote_vpc_dns_resolution *bool

    Allow_vpc_to_remote_classic_link *bool

}

type Aws_vpc_peering_connection_requester_540 struct {

    Allow_classic_link_to_remote_vpc *bool

    Allow_remote_vpc_dns_resolution *bool

    Allow_vpc_to_remote_classic_link *bool

}

type Aws_vpc_peering_connection struct {

    Aws_vpc_peering_connection_id *string `lyra:"ignore"`

    Accept_status *string

    Accepter *[]Aws_vpc_peering_connection_accepter_539

    Auto_accept *bool

    Peer_owner_id *string

    Peer_region *string

    Peer_vpc_id string

    Requester *[]Aws_vpc_peering_connection_requester_540

    Tags *map[string]string

    Vpc_id string

}

// Aws_vpc_peering_connectionHandler ...
type Aws_vpc_peering_connectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_peering_connectionHandler) Create(desired *Aws_vpc_peering_connection) (*Aws_vpc_peering_connection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_peering_connection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_peering_connectionHandler) Read(externalID string) (*Aws_vpc_peering_connection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_peering_connection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_peering_connection{ Aws_vpc_peering_connection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_peering_connectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_peering_connection", externalID)
}

type Aws_vpc_peering_connection_accepter_accepter_541 struct {

    Allow_classic_link_to_remote_vpc *bool

    Allow_remote_vpc_dns_resolution *bool

    Allow_vpc_to_remote_classic_link *bool

}

type Aws_vpc_peering_connection_accepter_requester_542 struct {

    Allow_classic_link_to_remote_vpc *bool

    Allow_remote_vpc_dns_resolution *bool

    Allow_vpc_to_remote_classic_link *bool

}

type Aws_vpc_peering_connection_accepter struct {

    Aws_vpc_peering_connection_accepter_id *string `lyra:"ignore"`

    Accept_status *string

    Accepter *[]Aws_vpc_peering_connection_accepter_accepter_541

    Auto_accept *bool

    Peer_owner_id *string

    Peer_region *string

    Peer_vpc_id *string

    Requester *[]Aws_vpc_peering_connection_accepter_requester_542

    Tags *map[string]string

    Vpc_id *string

    Vpc_peering_connection_id string

}

// Aws_vpc_peering_connection_accepterHandler ...
type Aws_vpc_peering_connection_accepterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_peering_connection_accepterHandler) Create(desired *Aws_vpc_peering_connection_accepter) (*Aws_vpc_peering_connection_accepter, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_peering_connection_accepter", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_peering_connection_accepterHandler) Read(externalID string) (*Aws_vpc_peering_connection_accepter, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_peering_connection_accepter", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_peering_connection_accepter{ Aws_vpc_peering_connection_accepter_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_peering_connection_accepterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_peering_connection_accepter", externalID)
}

type Aws_vpc_peering_connection_options_accepter_543 struct {

    Allow_classic_link_to_remote_vpc *bool

    Allow_remote_vpc_dns_resolution *bool

    Allow_vpc_to_remote_classic_link *bool

}

type Aws_vpc_peering_connection_options_requester_544 struct {

    Allow_classic_link_to_remote_vpc *bool

    Allow_remote_vpc_dns_resolution *bool

    Allow_vpc_to_remote_classic_link *bool

}

type Aws_vpc_peering_connection_options struct {

    Aws_vpc_peering_connection_options_id *string `lyra:"ignore"`

    Accepter *[]Aws_vpc_peering_connection_options_accepter_543

    Requester *[]Aws_vpc_peering_connection_options_requester_544

    Vpc_peering_connection_id string

}

// Aws_vpc_peering_connection_optionsHandler ...
type Aws_vpc_peering_connection_optionsHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpc_peering_connection_optionsHandler) Create(desired *Aws_vpc_peering_connection_options) (*Aws_vpc_peering_connection_options, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpc_peering_connection_options", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpc_peering_connection_optionsHandler) Read(externalID string) (*Aws_vpc_peering_connection_options, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpc_peering_connection_options", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpc_peering_connection_options{ Aws_vpc_peering_connection_options_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpc_peering_connection_optionsHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpc_peering_connection_options", externalID)
}

type Aws_vpn_connection_routes_545 struct {

    Destination_cidr_block *string

    Source *string

    State *string

}

type Aws_vpn_connection_vgw_telemetry_546 struct {

    Accepted_route_count *int

    Last_status_change *string

    Outside_ip_address *string

    Status *string

    Status_message *string

}

type Aws_vpn_connection struct {

    Aws_vpn_connection_id *string `lyra:"ignore"`

    Customer_gateway_configuration *string

    Customer_gateway_id string

    Routes *[]Aws_vpn_connection_routes_545

    Static_routes_only *bool

    Tags *map[string]string

    Transit_gateway_id *string

    Tunnel1_address *string

    Tunnel1_bgp_asn *string

    Tunnel1_bgp_holdtime *int

    Tunnel1_cgw_inside_address *string

    Tunnel1_inside_cidr *string

    Tunnel1_preshared_key *string

    Tunnel1_vgw_inside_address *string

    Tunnel2_address *string

    Tunnel2_bgp_asn *string

    Tunnel2_bgp_holdtime *int

    Tunnel2_cgw_inside_address *string

    Tunnel2_inside_cidr *string

    Tunnel2_preshared_key *string

    Tunnel2_vgw_inside_address *string

    Type string

    Vgw_telemetry *[]Aws_vpn_connection_vgw_telemetry_546

    Vpn_gateway_id *string

}

// Aws_vpn_connectionHandler ...
type Aws_vpn_connectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpn_connectionHandler) Create(desired *Aws_vpn_connection) (*Aws_vpn_connection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpn_connection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpn_connectionHandler) Read(externalID string) (*Aws_vpn_connection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpn_connection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpn_connection{ Aws_vpn_connection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpn_connectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpn_connection", externalID)
}

type Aws_vpn_connection_route struct {

    Aws_vpn_connection_route_id *string `lyra:"ignore"`

    Destination_cidr_block string

    Vpn_connection_id string

}

// Aws_vpn_connection_routeHandler ...
type Aws_vpn_connection_routeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpn_connection_routeHandler) Create(desired *Aws_vpn_connection_route) (*Aws_vpn_connection_route, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpn_connection_route", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpn_connection_routeHandler) Read(externalID string) (*Aws_vpn_connection_route, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpn_connection_route", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpn_connection_route{ Aws_vpn_connection_route_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpn_connection_routeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpn_connection_route", externalID)
}

type Aws_vpn_gateway struct {

    Aws_vpn_gateway_id *string `lyra:"ignore"`

    Amazon_side_asn *string

    Availability_zone *string

    Tags *map[string]string

    Vpc_id *string

}

// Aws_vpn_gatewayHandler ...
type Aws_vpn_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpn_gatewayHandler) Create(desired *Aws_vpn_gateway) (*Aws_vpn_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpn_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpn_gatewayHandler) Read(externalID string) (*Aws_vpn_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpn_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpn_gateway{ Aws_vpn_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpn_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpn_gateway", externalID)
}

type Aws_vpn_gateway_attachment struct {

    Aws_vpn_gateway_attachment_id *string `lyra:"ignore"`

    Vpc_id string

    Vpn_gateway_id string

}

// Aws_vpn_gateway_attachmentHandler ...
type Aws_vpn_gateway_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpn_gateway_attachmentHandler) Create(desired *Aws_vpn_gateway_attachment) (*Aws_vpn_gateway_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpn_gateway_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpn_gateway_attachmentHandler) Read(externalID string) (*Aws_vpn_gateway_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpn_gateway_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpn_gateway_attachment{ Aws_vpn_gateway_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpn_gateway_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpn_gateway_attachment", externalID)
}

type Aws_vpn_gateway_route_propagation struct {

    Aws_vpn_gateway_route_propagation_id *string `lyra:"ignore"`

    Route_table_id string

    Vpn_gateway_id string

}

// Aws_vpn_gateway_route_propagationHandler ...
type Aws_vpn_gateway_route_propagationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_vpn_gateway_route_propagationHandler) Create(desired *Aws_vpn_gateway_route_propagation) (*Aws_vpn_gateway_route_propagation, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_vpn_gateway_route_propagation", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_vpn_gateway_route_propagationHandler) Read(externalID string) (*Aws_vpn_gateway_route_propagation, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_vpn_gateway_route_propagation", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_vpn_gateway_route_propagation{ Aws_vpn_gateway_route_propagation_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_vpn_gateway_route_propagationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_vpn_gateway_route_propagation", externalID)
}

type Aws_waf_byte_match_set_byte_match_tuples_547_field_to_match_548 struct {

    Data *string

    Type string

}

type Aws_waf_byte_match_set_byte_match_tuples_547 struct {

    Field_to_match []Aws_waf_byte_match_set_byte_match_tuples_547_field_to_match_548

    Positional_constraint string

    Target_string *string

    Text_transformation string

}

type Aws_waf_byte_match_set struct {

    Aws_waf_byte_match_set_id *string `lyra:"ignore"`

    Byte_match_tuples *[]Aws_waf_byte_match_set_byte_match_tuples_547

    Name string

}

// Aws_waf_byte_match_setHandler ...
type Aws_waf_byte_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_byte_match_setHandler) Create(desired *Aws_waf_byte_match_set) (*Aws_waf_byte_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_byte_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_byte_match_setHandler) Read(externalID string) (*Aws_waf_byte_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_byte_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_byte_match_set{ Aws_waf_byte_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_byte_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_byte_match_set", externalID)
}

type Aws_waf_geo_match_set_geo_match_constraint_549 struct {

    Type string

    Value string

}

type Aws_waf_geo_match_set struct {

    Aws_waf_geo_match_set_id *string `lyra:"ignore"`

    Geo_match_constraint *[]Aws_waf_geo_match_set_geo_match_constraint_549

    Name string

}

// Aws_waf_geo_match_setHandler ...
type Aws_waf_geo_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_geo_match_setHandler) Create(desired *Aws_waf_geo_match_set) (*Aws_waf_geo_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_geo_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_geo_match_setHandler) Read(externalID string) (*Aws_waf_geo_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_geo_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_geo_match_set{ Aws_waf_geo_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_geo_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_geo_match_set", externalID)
}

type Aws_waf_ipset_ip_set_descriptors_550 struct {

    Type string

    Value string

}

type Aws_waf_ipset struct {

    Aws_waf_ipset_id *string `lyra:"ignore"`

    Arn *string

    Ip_set_descriptors *[]Aws_waf_ipset_ip_set_descriptors_550

    Name string

}

// Aws_waf_ipsetHandler ...
type Aws_waf_ipsetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_ipsetHandler) Create(desired *Aws_waf_ipset) (*Aws_waf_ipset, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_ipset", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_ipsetHandler) Read(externalID string) (*Aws_waf_ipset, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_ipset", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_ipset{ Aws_waf_ipset_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_ipsetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_ipset", externalID)
}

type Aws_waf_rate_based_rule_predicates_551 struct {

    Data_id string

    Negated bool

    Type string

}

type Aws_waf_rate_based_rule struct {

    Aws_waf_rate_based_rule_id *string `lyra:"ignore"`

    Metric_name string

    Name string

    Predicates *[]Aws_waf_rate_based_rule_predicates_551

    Rate_key string

    Rate_limit int

}

// Aws_waf_rate_based_ruleHandler ...
type Aws_waf_rate_based_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_rate_based_ruleHandler) Create(desired *Aws_waf_rate_based_rule) (*Aws_waf_rate_based_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_rate_based_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_rate_based_ruleHandler) Read(externalID string) (*Aws_waf_rate_based_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_rate_based_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_rate_based_rule{ Aws_waf_rate_based_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_rate_based_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_rate_based_rule", externalID)
}

type Aws_waf_regex_match_set_regex_match_tuple_552_field_to_match_553 struct {

    Data *string

    Type string

}

type Aws_waf_regex_match_set_regex_match_tuple_552 struct {

    Field_to_match []Aws_waf_regex_match_set_regex_match_tuple_552_field_to_match_553

    Regex_pattern_set_id string

    Text_transformation string

}

type Aws_waf_regex_match_set struct {

    Aws_waf_regex_match_set_id *string `lyra:"ignore"`

    Name string

    Regex_match_tuple *[]Aws_waf_regex_match_set_regex_match_tuple_552

}

// Aws_waf_regex_match_setHandler ...
type Aws_waf_regex_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_regex_match_setHandler) Create(desired *Aws_waf_regex_match_set) (*Aws_waf_regex_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_regex_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_regex_match_setHandler) Read(externalID string) (*Aws_waf_regex_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_regex_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_regex_match_set{ Aws_waf_regex_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_regex_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_regex_match_set", externalID)
}

type Aws_waf_regex_pattern_set struct {

    Aws_waf_regex_pattern_set_id *string `lyra:"ignore"`

    Name string

    Regex_pattern_strings *[]string

}

// Aws_waf_regex_pattern_setHandler ...
type Aws_waf_regex_pattern_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_regex_pattern_setHandler) Create(desired *Aws_waf_regex_pattern_set) (*Aws_waf_regex_pattern_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_regex_pattern_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_regex_pattern_setHandler) Read(externalID string) (*Aws_waf_regex_pattern_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_regex_pattern_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_regex_pattern_set{ Aws_waf_regex_pattern_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_regex_pattern_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_regex_pattern_set", externalID)
}

type Aws_waf_rule_predicates_554 struct {

    Data_id string

    Negated bool

    Type string

}

type Aws_waf_rule struct {

    Aws_waf_rule_id *string `lyra:"ignore"`

    Metric_name string

    Name string

    Predicates *[]Aws_waf_rule_predicates_554

}

// Aws_waf_ruleHandler ...
type Aws_waf_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_ruleHandler) Create(desired *Aws_waf_rule) (*Aws_waf_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_ruleHandler) Read(externalID string) (*Aws_waf_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_rule{ Aws_waf_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_rule", externalID)
}

type Aws_waf_rule_group_activated_rule_555_action_556 struct {

    Type string

}

type Aws_waf_rule_group_activated_rule_555 struct {

    Action []Aws_waf_rule_group_activated_rule_555_action_556

    Priority int

    Rule_id string

    Type *string

}

type Aws_waf_rule_group struct {

    Aws_waf_rule_group_id *string `lyra:"ignore"`

    Activated_rule *[]Aws_waf_rule_group_activated_rule_555

    Metric_name string

    Name string

}

// Aws_waf_rule_groupHandler ...
type Aws_waf_rule_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_rule_groupHandler) Create(desired *Aws_waf_rule_group) (*Aws_waf_rule_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_rule_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_rule_groupHandler) Read(externalID string) (*Aws_waf_rule_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_rule_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_rule_group{ Aws_waf_rule_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_rule_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_rule_group", externalID)
}

type Aws_waf_size_constraint_set_size_constraints_557_field_to_match_558 struct {

    Data *string

    Type string

}

type Aws_waf_size_constraint_set_size_constraints_557 struct {

    Comparison_operator string

    Field_to_match []Aws_waf_size_constraint_set_size_constraints_557_field_to_match_558

    Size int

    Text_transformation string

}

type Aws_waf_size_constraint_set struct {

    Aws_waf_size_constraint_set_id *string `lyra:"ignore"`

    Name string

    Size_constraints *[]Aws_waf_size_constraint_set_size_constraints_557

}

// Aws_waf_size_constraint_setHandler ...
type Aws_waf_size_constraint_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_size_constraint_setHandler) Create(desired *Aws_waf_size_constraint_set) (*Aws_waf_size_constraint_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_size_constraint_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_size_constraint_setHandler) Read(externalID string) (*Aws_waf_size_constraint_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_size_constraint_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_size_constraint_set{ Aws_waf_size_constraint_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_size_constraint_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_size_constraint_set", externalID)
}

type Aws_waf_sql_injection_match_set_sql_injection_match_tuples_559_field_to_match_560 struct {

    Data *string

    Type string

}

type Aws_waf_sql_injection_match_set_sql_injection_match_tuples_559 struct {

    Field_to_match []Aws_waf_sql_injection_match_set_sql_injection_match_tuples_559_field_to_match_560

    Text_transformation string

}

type Aws_waf_sql_injection_match_set struct {

    Aws_waf_sql_injection_match_set_id *string `lyra:"ignore"`

    Name string

    Sql_injection_match_tuples *[]Aws_waf_sql_injection_match_set_sql_injection_match_tuples_559

}

// Aws_waf_sql_injection_match_setHandler ...
type Aws_waf_sql_injection_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_sql_injection_match_setHandler) Create(desired *Aws_waf_sql_injection_match_set) (*Aws_waf_sql_injection_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_sql_injection_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_sql_injection_match_setHandler) Read(externalID string) (*Aws_waf_sql_injection_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_sql_injection_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_sql_injection_match_set{ Aws_waf_sql_injection_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_sql_injection_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_sql_injection_match_set", externalID)
}

type Aws_waf_web_acl_default_action_561 struct {

    Type string

}

type Aws_waf_web_acl_rules_562_action_563 struct {

    Type string

}

type Aws_waf_web_acl_rules_562_override_action_564 struct {

    Type string

}

type Aws_waf_web_acl_rules_562 struct {

    Action *[]Aws_waf_web_acl_rules_562_action_563

    Override_action *[]Aws_waf_web_acl_rules_562_override_action_564

    Priority int

    Rule_id string

    Type *string

}

type Aws_waf_web_acl struct {

    Aws_waf_web_acl_id *string `lyra:"ignore"`

    Default_action []Aws_waf_web_acl_default_action_561

    Metric_name string

    Name string

    Rules *[]Aws_waf_web_acl_rules_562

}

// Aws_waf_web_aclHandler ...
type Aws_waf_web_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_web_aclHandler) Create(desired *Aws_waf_web_acl) (*Aws_waf_web_acl, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_web_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_web_aclHandler) Read(externalID string) (*Aws_waf_web_acl, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_web_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_web_acl{ Aws_waf_web_acl_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_web_aclHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_web_acl", externalID)
}

type Aws_waf_xss_match_set_xss_match_tuples_565_field_to_match_566 struct {

    Data *string

    Type string

}

type Aws_waf_xss_match_set_xss_match_tuples_565 struct {

    Field_to_match []Aws_waf_xss_match_set_xss_match_tuples_565_field_to_match_566

    Text_transformation string

}

type Aws_waf_xss_match_set struct {

    Aws_waf_xss_match_set_id *string `lyra:"ignore"`

    Name string

    Xss_match_tuples *[]Aws_waf_xss_match_set_xss_match_tuples_565

}

// Aws_waf_xss_match_setHandler ...
type Aws_waf_xss_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_waf_xss_match_setHandler) Create(desired *Aws_waf_xss_match_set) (*Aws_waf_xss_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_waf_xss_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_waf_xss_match_setHandler) Read(externalID string) (*Aws_waf_xss_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_waf_xss_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_waf_xss_match_set{ Aws_waf_xss_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_waf_xss_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_waf_xss_match_set", externalID)
}

type Aws_wafregional_byte_match_set_byte_match_tuple_567_field_to_match_568 struct {

    Data *string

    Type string

}

type Aws_wafregional_byte_match_set_byte_match_tuple_567 struct {

    Field_to_match []Aws_wafregional_byte_match_set_byte_match_tuple_567_field_to_match_568

    Positional_constraint string

    Target_string *string

    Text_transformation string

}

type Aws_wafregional_byte_match_set_byte_match_tuples_569_field_to_match_570 struct {

    Data *string

    Type string

}

type Aws_wafregional_byte_match_set_byte_match_tuples_569 struct {

    Field_to_match []Aws_wafregional_byte_match_set_byte_match_tuples_569_field_to_match_570

    Positional_constraint string

    Target_string *string

    Text_transformation string

}

type Aws_wafregional_byte_match_set struct {

    Aws_wafregional_byte_match_set_id *string `lyra:"ignore"`

    Byte_match_tuple *[]Aws_wafregional_byte_match_set_byte_match_tuple_567

    Byte_match_tuples *[]Aws_wafregional_byte_match_set_byte_match_tuples_569

    Name string

}

// Aws_wafregional_byte_match_setHandler ...
type Aws_wafregional_byte_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_byte_match_setHandler) Create(desired *Aws_wafregional_byte_match_set) (*Aws_wafregional_byte_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_byte_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_byte_match_setHandler) Read(externalID string) (*Aws_wafregional_byte_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_byte_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_byte_match_set{ Aws_wafregional_byte_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_byte_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_byte_match_set", externalID)
}

type Aws_wafregional_geo_match_set_geo_match_constraint_571 struct {

    Type string

    Value string

}

type Aws_wafregional_geo_match_set struct {

    Aws_wafregional_geo_match_set_id *string `lyra:"ignore"`

    Geo_match_constraint *[]Aws_wafregional_geo_match_set_geo_match_constraint_571

    Name string

}

// Aws_wafregional_geo_match_setHandler ...
type Aws_wafregional_geo_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_geo_match_setHandler) Create(desired *Aws_wafregional_geo_match_set) (*Aws_wafregional_geo_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_geo_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_geo_match_setHandler) Read(externalID string) (*Aws_wafregional_geo_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_geo_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_geo_match_set{ Aws_wafregional_geo_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_geo_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_geo_match_set", externalID)
}

type Aws_wafregional_ipset_ip_set_descriptor_572 struct {

    Type string

    Value string

}

type Aws_wafregional_ipset struct {

    Aws_wafregional_ipset_id *string `lyra:"ignore"`

    Arn *string

    Ip_set_descriptor *[]Aws_wafregional_ipset_ip_set_descriptor_572

    Name string

}

// Aws_wafregional_ipsetHandler ...
type Aws_wafregional_ipsetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_ipsetHandler) Create(desired *Aws_wafregional_ipset) (*Aws_wafregional_ipset, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_ipset", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_ipsetHandler) Read(externalID string) (*Aws_wafregional_ipset, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_ipset", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_ipset{ Aws_wafregional_ipset_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_ipsetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_ipset", externalID)
}

type Aws_wafregional_rate_based_rule_predicate_573 struct {

    Data_id string

    Negated bool

    Type string

}

type Aws_wafregional_rate_based_rule struct {

    Aws_wafregional_rate_based_rule_id *string `lyra:"ignore"`

    Metric_name string

    Name string

    Predicate *[]Aws_wafregional_rate_based_rule_predicate_573

    Rate_key string

    Rate_limit int

}

// Aws_wafregional_rate_based_ruleHandler ...
type Aws_wafregional_rate_based_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_rate_based_ruleHandler) Create(desired *Aws_wafregional_rate_based_rule) (*Aws_wafregional_rate_based_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_rate_based_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_rate_based_ruleHandler) Read(externalID string) (*Aws_wafregional_rate_based_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_rate_based_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_rate_based_rule{ Aws_wafregional_rate_based_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_rate_based_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_rate_based_rule", externalID)
}

type Aws_wafregional_regex_match_set_regex_match_tuple_574_field_to_match_575 struct {

    Data *string

    Type string

}

type Aws_wafregional_regex_match_set_regex_match_tuple_574 struct {

    Field_to_match []Aws_wafregional_regex_match_set_regex_match_tuple_574_field_to_match_575

    Regex_pattern_set_id string

    Text_transformation string

}

type Aws_wafregional_regex_match_set struct {

    Aws_wafregional_regex_match_set_id *string `lyra:"ignore"`

    Name string

    Regex_match_tuple *[]Aws_wafregional_regex_match_set_regex_match_tuple_574

}

// Aws_wafregional_regex_match_setHandler ...
type Aws_wafregional_regex_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_regex_match_setHandler) Create(desired *Aws_wafregional_regex_match_set) (*Aws_wafregional_regex_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_regex_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_regex_match_setHandler) Read(externalID string) (*Aws_wafregional_regex_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_regex_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_regex_match_set{ Aws_wafregional_regex_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_regex_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_regex_match_set", externalID)
}

type Aws_wafregional_regex_pattern_set struct {

    Aws_wafregional_regex_pattern_set_id *string `lyra:"ignore"`

    Name string

    Regex_pattern_strings *[]string

}

// Aws_wafregional_regex_pattern_setHandler ...
type Aws_wafregional_regex_pattern_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_regex_pattern_setHandler) Create(desired *Aws_wafregional_regex_pattern_set) (*Aws_wafregional_regex_pattern_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_regex_pattern_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_regex_pattern_setHandler) Read(externalID string) (*Aws_wafregional_regex_pattern_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_regex_pattern_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_regex_pattern_set{ Aws_wafregional_regex_pattern_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_regex_pattern_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_regex_pattern_set", externalID)
}

type Aws_wafregional_rule_predicate_576 struct {

    Data_id string

    Negated bool

    Type string

}

type Aws_wafregional_rule struct {

    Aws_wafregional_rule_id *string `lyra:"ignore"`

    Metric_name string

    Name string

    Predicate *[]Aws_wafregional_rule_predicate_576

}

// Aws_wafregional_ruleHandler ...
type Aws_wafregional_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_ruleHandler) Create(desired *Aws_wafregional_rule) (*Aws_wafregional_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_ruleHandler) Read(externalID string) (*Aws_wafregional_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_rule{ Aws_wafregional_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_rule", externalID)
}

type Aws_wafregional_rule_group_activated_rule_577_action_578 struct {

    Type string

}

type Aws_wafregional_rule_group_activated_rule_577 struct {

    Action []Aws_wafregional_rule_group_activated_rule_577_action_578

    Priority int

    Rule_id string

    Type *string

}

type Aws_wafregional_rule_group struct {

    Aws_wafregional_rule_group_id *string `lyra:"ignore"`

    Activated_rule *[]Aws_wafregional_rule_group_activated_rule_577

    Metric_name string

    Name string

}

// Aws_wafregional_rule_groupHandler ...
type Aws_wafregional_rule_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_rule_groupHandler) Create(desired *Aws_wafregional_rule_group) (*Aws_wafregional_rule_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_rule_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_rule_groupHandler) Read(externalID string) (*Aws_wafregional_rule_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_rule_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_rule_group{ Aws_wafregional_rule_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_rule_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_rule_group", externalID)
}

type Aws_wafregional_size_constraint_set_size_constraints_579_field_to_match_580 struct {

    Data *string

    Type string

}

type Aws_wafregional_size_constraint_set_size_constraints_579 struct {

    Comparison_operator string

    Field_to_match []Aws_wafregional_size_constraint_set_size_constraints_579_field_to_match_580

    Size int

    Text_transformation string

}

type Aws_wafregional_size_constraint_set struct {

    Aws_wafregional_size_constraint_set_id *string `lyra:"ignore"`

    Name string

    Size_constraints *[]Aws_wafregional_size_constraint_set_size_constraints_579

}

// Aws_wafregional_size_constraint_setHandler ...
type Aws_wafregional_size_constraint_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_size_constraint_setHandler) Create(desired *Aws_wafregional_size_constraint_set) (*Aws_wafregional_size_constraint_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_size_constraint_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_size_constraint_setHandler) Read(externalID string) (*Aws_wafregional_size_constraint_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_size_constraint_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_size_constraint_set{ Aws_wafregional_size_constraint_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_size_constraint_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_size_constraint_set", externalID)
}

type Aws_wafregional_sql_injection_match_set_sql_injection_match_tuple_581_field_to_match_582 struct {

    Data *string

    Type string

}

type Aws_wafregional_sql_injection_match_set_sql_injection_match_tuple_581 struct {

    Field_to_match []Aws_wafregional_sql_injection_match_set_sql_injection_match_tuple_581_field_to_match_582

    Text_transformation string

}

type Aws_wafregional_sql_injection_match_set struct {

    Aws_wafregional_sql_injection_match_set_id *string `lyra:"ignore"`

    Name string

    Sql_injection_match_tuple *[]Aws_wafregional_sql_injection_match_set_sql_injection_match_tuple_581

}

// Aws_wafregional_sql_injection_match_setHandler ...
type Aws_wafregional_sql_injection_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_sql_injection_match_setHandler) Create(desired *Aws_wafregional_sql_injection_match_set) (*Aws_wafregional_sql_injection_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_sql_injection_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_sql_injection_match_setHandler) Read(externalID string) (*Aws_wafregional_sql_injection_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_sql_injection_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_sql_injection_match_set{ Aws_wafregional_sql_injection_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_sql_injection_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_sql_injection_match_set", externalID)
}

type Aws_wafregional_web_acl_default_action_583 struct {

    Type string

}

type Aws_wafregional_web_acl_rule_584_action_585 struct {

    Type string

}

type Aws_wafregional_web_acl_rule_584_override_action_586 struct {

    Type string

}

type Aws_wafregional_web_acl_rule_584 struct {

    Action *[]Aws_wafregional_web_acl_rule_584_action_585

    Override_action *[]Aws_wafregional_web_acl_rule_584_override_action_586

    Priority int

    Rule_id string

    Type *string

}

type Aws_wafregional_web_acl struct {

    Aws_wafregional_web_acl_id *string `lyra:"ignore"`

    Default_action []Aws_wafregional_web_acl_default_action_583

    Metric_name string

    Name string

    Rule *[]Aws_wafregional_web_acl_rule_584

}

// Aws_wafregional_web_aclHandler ...
type Aws_wafregional_web_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_web_aclHandler) Create(desired *Aws_wafregional_web_acl) (*Aws_wafregional_web_acl, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_web_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_web_aclHandler) Read(externalID string) (*Aws_wafregional_web_acl, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_web_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_web_acl{ Aws_wafregional_web_acl_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_web_aclHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_web_acl", externalID)
}

type Aws_wafregional_web_acl_association struct {

    Aws_wafregional_web_acl_association_id *string `lyra:"ignore"`

    Resource_arn string

    Web_acl_id string

}

// Aws_wafregional_web_acl_associationHandler ...
type Aws_wafregional_web_acl_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_web_acl_associationHandler) Create(desired *Aws_wafregional_web_acl_association) (*Aws_wafregional_web_acl_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_web_acl_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_web_acl_associationHandler) Read(externalID string) (*Aws_wafregional_web_acl_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_web_acl_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_web_acl_association{ Aws_wafregional_web_acl_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_web_acl_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_web_acl_association", externalID)
}

type Aws_wafregional_xss_match_set_xss_match_tuple_587_field_to_match_588 struct {

    Data *string

    Type string

}

type Aws_wafregional_xss_match_set_xss_match_tuple_587 struct {

    Field_to_match []Aws_wafregional_xss_match_set_xss_match_tuple_587_field_to_match_588

    Text_transformation string

}

type Aws_wafregional_xss_match_set struct {

    Aws_wafregional_xss_match_set_id *string `lyra:"ignore"`

    Name string

    Xss_match_tuple *[]Aws_wafregional_xss_match_set_xss_match_tuple_587

}

// Aws_wafregional_xss_match_setHandler ...
type Aws_wafregional_xss_match_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Aws_wafregional_xss_match_setHandler) Create(desired *Aws_wafregional_xss_match_set) (*Aws_wafregional_xss_match_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "aws_wafregional_xss_match_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Aws_wafregional_xss_match_setHandler) Read(externalID string) (*Aws_wafregional_xss_match_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "aws_wafregional_xss_match_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Aws_wafregional_xss_match_set{ Aws_wafregional_xss_match_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Aws_wafregional_xss_match_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "aws_wafregional_xss_match_set", externalID)
}
