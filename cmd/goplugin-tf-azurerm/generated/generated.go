// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package generated

import (
	"sync"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/terraform"
	"github.com/lyraproj/lyra/pkg/bridge"
	"github.com/lyraproj/puppet-evaluator/eval"
	"github.com/lyraproj/servicesdk/service"
)

var once sync.Once
var Config *terraform.ResourceConfig

func configureProvider(p *schema.Provider) {
	once.Do(func() {
		if Config == nil {
			Config = &terraform.ResourceConfig{
				Config: map[string]interface{}{},
			}
		}
		err := p.Configure(Config)
		if err != nil {
			panic(err)
		}
	})
}

func Initialize(sb *service.ServerBuilder, p *schema.Provider) {
    var evs []eval.Type
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_api_management{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_api_managementHandler", &Azurerm_api_managementHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_app_service{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_app_serviceHandler", &Azurerm_app_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_app_service_active_slot{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_app_service_active_slotHandler", &Azurerm_app_service_active_slotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_app_service_custom_hostname_binding{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_app_service_custom_hostname_bindingHandler", &Azurerm_app_service_custom_hostname_bindingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_app_service_plan{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_app_service_planHandler", &Azurerm_app_service_planHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_app_service_slot{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_app_service_slotHandler", &Azurerm_app_service_slotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_application_gateway{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_application_gatewayHandler", &Azurerm_application_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_application_insights{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_application_insightsHandler", &Azurerm_application_insightsHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_application_insights_api_key{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_application_insights_api_keyHandler", &Azurerm_application_insights_api_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_application_security_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_application_security_groupHandler", &Azurerm_application_security_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_automation_account{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_automation_accountHandler", &Azurerm_automation_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_automation_credential{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_automation_credentialHandler", &Azurerm_automation_credentialHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_automation_dsc_configuration{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_automation_dsc_configurationHandler", &Azurerm_automation_dsc_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_automation_dsc_nodeconfiguration{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_automation_dsc_nodeconfigurationHandler", &Azurerm_automation_dsc_nodeconfigurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_automation_module{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_automation_moduleHandler", &Azurerm_automation_moduleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_automation_runbook{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_automation_runbookHandler", &Azurerm_automation_runbookHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_automation_schedule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_automation_scheduleHandler", &Azurerm_automation_scheduleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_autoscale_setting{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_autoscale_settingHandler", &Azurerm_autoscale_settingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_availability_set{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_availability_setHandler", &Azurerm_availability_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_azuread_application{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_azuread_applicationHandler", &Azurerm_azuread_applicationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_azuread_service_principal{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_azuread_service_principalHandler", &Azurerm_azuread_service_principalHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_azuread_service_principal_password{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_azuread_service_principal_passwordHandler", &Azurerm_azuread_service_principal_passwordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_batch_account{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_batch_accountHandler", &Azurerm_batch_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_batch_pool{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_batch_poolHandler", &Azurerm_batch_poolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_cdn_endpoint{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_cdn_endpointHandler", &Azurerm_cdn_endpointHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_cdn_profile{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_cdn_profileHandler", &Azurerm_cdn_profileHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_cognitive_account{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_cognitive_accountHandler", &Azurerm_cognitive_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_container_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_container_groupHandler", &Azurerm_container_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_container_registry{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_container_registryHandler", &Azurerm_container_registryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_container_service{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_container_serviceHandler", &Azurerm_container_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_cosmosdb_account{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_cosmosdb_accountHandler", &Azurerm_cosmosdb_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_data_lake_analytics_account{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_data_lake_analytics_accountHandler", &Azurerm_data_lake_analytics_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_data_lake_analytics_firewall_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_data_lake_analytics_firewall_ruleHandler", &Azurerm_data_lake_analytics_firewall_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_data_lake_store{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_data_lake_storeHandler", &Azurerm_data_lake_storeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_data_lake_store_file{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_data_lake_store_fileHandler", &Azurerm_data_lake_store_fileHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_data_lake_store_firewall_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_data_lake_store_firewall_ruleHandler", &Azurerm_data_lake_store_firewall_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_databricks_workspace{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_databricks_workspaceHandler", &Azurerm_databricks_workspaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dev_test_lab{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dev_test_labHandler", &Azurerm_dev_test_labHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dev_test_linux_virtual_machine{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dev_test_linux_virtual_machineHandler", &Azurerm_dev_test_linux_virtual_machineHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dev_test_policy{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dev_test_policyHandler", &Azurerm_dev_test_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dev_test_virtual_network{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dev_test_virtual_networkHandler", &Azurerm_dev_test_virtual_networkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dev_test_windows_virtual_machine{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dev_test_windows_virtual_machineHandler", &Azurerm_dev_test_windows_virtual_machineHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_devspace_controller{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_devspace_controllerHandler", &Azurerm_devspace_controllerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_a_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_a_recordHandler", &Azurerm_dns_a_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_aaaa_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_aaaa_recordHandler", &Azurerm_dns_aaaa_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_caa_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_caa_recordHandler", &Azurerm_dns_caa_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_cname_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_cname_recordHandler", &Azurerm_dns_cname_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_mx_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_mx_recordHandler", &Azurerm_dns_mx_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_ns_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_ns_recordHandler", &Azurerm_dns_ns_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_ptr_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_ptr_recordHandler", &Azurerm_dns_ptr_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_srv_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_srv_recordHandler", &Azurerm_dns_srv_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_txt_record{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_txt_recordHandler", &Azurerm_dns_txt_recordHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_dns_zone{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_dns_zoneHandler", &Azurerm_dns_zoneHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_eventgrid_topic{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_eventgrid_topicHandler", &Azurerm_eventgrid_topicHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_eventhub{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_eventhubHandler", &Azurerm_eventhubHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_eventhub_authorization_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_eventhub_authorization_ruleHandler", &Azurerm_eventhub_authorization_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_eventhub_consumer_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_eventhub_consumer_groupHandler", &Azurerm_eventhub_consumer_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_eventhub_namespace{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_eventhub_namespaceHandler", &Azurerm_eventhub_namespaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_eventhub_namespace_authorization_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_eventhub_namespace_authorization_ruleHandler", &Azurerm_eventhub_namespace_authorization_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_express_route_circuit{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_express_route_circuitHandler", &Azurerm_express_route_circuitHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_express_route_circuit_authorization{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_express_route_circuit_authorizationHandler", &Azurerm_express_route_circuit_authorizationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_express_route_circuit_peering{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_express_route_circuit_peeringHandler", &Azurerm_express_route_circuit_peeringHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_firewall{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_firewallHandler", &Azurerm_firewallHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_firewall_application_rule_collection{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_firewall_application_rule_collectionHandler", &Azurerm_firewall_application_rule_collectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_firewall_network_rule_collection{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_firewall_network_rule_collectionHandler", &Azurerm_firewall_network_rule_collectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_function_app{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_function_appHandler", &Azurerm_function_appHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_image{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_imageHandler", &Azurerm_imageHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_iothub{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_iothubHandler", &Azurerm_iothubHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_iothub_consumer_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_iothub_consumer_groupHandler", &Azurerm_iothub_consumer_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_key_vault{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_key_vaultHandler", &Azurerm_key_vaultHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_key_vault_access_policy{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_key_vault_access_policyHandler", &Azurerm_key_vault_access_policyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_key_vault_certificate{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_key_vault_certificateHandler", &Azurerm_key_vault_certificateHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_key_vault_key{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_key_vault_keyHandler", &Azurerm_key_vault_keyHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_key_vault_secret{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_key_vault_secretHandler", &Azurerm_key_vault_secretHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_kubernetes_cluster{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_kubernetes_clusterHandler", &Azurerm_kubernetes_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_lb{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_lbHandler", &Azurerm_lbHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_lb_backend_address_pool{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_lb_backend_address_poolHandler", &Azurerm_lb_backend_address_poolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_lb_nat_pool{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_lb_nat_poolHandler", &Azurerm_lb_nat_poolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_lb_nat_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_lb_nat_ruleHandler", &Azurerm_lb_nat_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_lb_probe{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_lb_probeHandler", &Azurerm_lb_probeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_lb_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_lb_ruleHandler", &Azurerm_lb_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_local_network_gateway{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_local_network_gatewayHandler", &Azurerm_local_network_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_log_analytics_solution{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_log_analytics_solutionHandler", &Azurerm_log_analytics_solutionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_log_analytics_workspace{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_log_analytics_workspaceHandler", &Azurerm_log_analytics_workspaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_log_analytics_workspace_linked_service{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_log_analytics_workspace_linked_serviceHandler", &Azurerm_log_analytics_workspace_linked_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_logic_app_action_custom{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_logic_app_action_customHandler", &Azurerm_logic_app_action_customHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_logic_app_action_http{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_logic_app_action_httpHandler", &Azurerm_logic_app_action_httpHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_logic_app_trigger_custom{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_logic_app_trigger_customHandler", &Azurerm_logic_app_trigger_customHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_logic_app_trigger_http_request{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_logic_app_trigger_http_requestHandler", &Azurerm_logic_app_trigger_http_requestHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_logic_app_trigger_recurrence{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_logic_app_trigger_recurrenceHandler", &Azurerm_logic_app_trigger_recurrenceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_logic_app_workflow{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_logic_app_workflowHandler", &Azurerm_logic_app_workflowHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_managed_disk{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_managed_diskHandler", &Azurerm_managed_diskHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_management_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_management_groupHandler", &Azurerm_management_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_management_lock{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_management_lockHandler", &Azurerm_management_lockHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mariadb_database{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mariadb_databaseHandler", &Azurerm_mariadb_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mariadb_server{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mariadb_serverHandler", &Azurerm_mariadb_serverHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_metric_alertrule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_metric_alertruleHandler", &Azurerm_metric_alertruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_monitor_action_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_monitor_action_groupHandler", &Azurerm_monitor_action_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_monitor_activity_log_alert{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_monitor_activity_log_alertHandler", &Azurerm_monitor_activity_log_alertHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_monitor_diagnostic_setting{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_monitor_diagnostic_settingHandler", &Azurerm_monitor_diagnostic_settingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_monitor_log_profile{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_monitor_log_profileHandler", &Azurerm_monitor_log_profileHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_monitor_metric_alert{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_monitor_metric_alertHandler", &Azurerm_monitor_metric_alertHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mssql_elasticpool{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mssql_elasticpoolHandler", &Azurerm_mssql_elasticpoolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mysql_configuration{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mysql_configurationHandler", &Azurerm_mysql_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mysql_database{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mysql_databaseHandler", &Azurerm_mysql_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mysql_firewall_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mysql_firewall_ruleHandler", &Azurerm_mysql_firewall_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mysql_server{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mysql_serverHandler", &Azurerm_mysql_serverHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_mysql_virtual_network_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_mysql_virtual_network_ruleHandler", &Azurerm_mysql_virtual_network_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_network_interface{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_network_interfaceHandler", &Azurerm_network_interfaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_network_interface_application_gateway_backend_address_pool_association{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_network_interface_application_gateway_backend_address_pool_associationHandler", &Azurerm_network_interface_application_gateway_backend_address_pool_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_network_interface_backend_address_pool_association{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_network_interface_backend_address_pool_associationHandler", &Azurerm_network_interface_backend_address_pool_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_network_interface_nat_rule_association{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_network_interface_nat_rule_associationHandler", &Azurerm_network_interface_nat_rule_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_network_security_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_network_security_groupHandler", &Azurerm_network_security_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_network_security_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_network_security_ruleHandler", &Azurerm_network_security_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_network_watcher{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_network_watcherHandler", &Azurerm_network_watcherHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_notification_hub{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_notification_hubHandler", &Azurerm_notification_hubHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_notification_hub_authorization_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_notification_hub_authorization_ruleHandler", &Azurerm_notification_hub_authorization_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_notification_hub_namespace{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_notification_hub_namespaceHandler", &Azurerm_notification_hub_namespaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_packet_capture{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_packet_captureHandler", &Azurerm_packet_captureHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_policy_assignment{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_policy_assignmentHandler", &Azurerm_policy_assignmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_policy_definition{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_policy_definitionHandler", &Azurerm_policy_definitionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_policy_set_definition{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_policy_set_definitionHandler", &Azurerm_policy_set_definitionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_postgresql_configuration{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_postgresql_configurationHandler", &Azurerm_postgresql_configurationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_postgresql_database{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_postgresql_databaseHandler", &Azurerm_postgresql_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_postgresql_firewall_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_postgresql_firewall_ruleHandler", &Azurerm_postgresql_firewall_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_postgresql_server{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_postgresql_serverHandler", &Azurerm_postgresql_serverHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_postgresql_virtual_network_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_postgresql_virtual_network_ruleHandler", &Azurerm_postgresql_virtual_network_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_public_ip{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_public_ipHandler", &Azurerm_public_ipHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_recovery_services_protected_vm{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_recovery_services_protected_vmHandler", &Azurerm_recovery_services_protected_vmHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_recovery_services_protection_policy_vm{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_recovery_services_protection_policy_vmHandler", &Azurerm_recovery_services_protection_policy_vmHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_recovery_services_vault{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_recovery_services_vaultHandler", &Azurerm_recovery_services_vaultHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_redis_cache{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_redis_cacheHandler", &Azurerm_redis_cacheHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_redis_firewall_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_redis_firewall_ruleHandler", &Azurerm_redis_firewall_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_relay_namespace{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_relay_namespaceHandler", &Azurerm_relay_namespaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_resource_group{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_resource_groupHandler", &Azurerm_resource_groupHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_role_assignment{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_role_assignmentHandler", &Azurerm_role_assignmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_role_definition{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_role_definitionHandler", &Azurerm_role_definitionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_route{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_routeHandler", &Azurerm_routeHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_route_table{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_route_tableHandler", &Azurerm_route_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_scheduler_job{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_scheduler_jobHandler", &Azurerm_scheduler_jobHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_scheduler_job_collection{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_scheduler_job_collectionHandler", &Azurerm_scheduler_job_collectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_search_service{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_search_serviceHandler", &Azurerm_search_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_security_center_contact{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_security_center_contactHandler", &Azurerm_security_center_contactHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_security_center_subscription_pricing{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_security_center_subscription_pricingHandler", &Azurerm_security_center_subscription_pricingHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_security_center_workspace{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_security_center_workspaceHandler", &Azurerm_security_center_workspaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_service_fabric_cluster{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_service_fabric_clusterHandler", &Azurerm_service_fabric_clusterHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_namespace{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_namespaceHandler", &Azurerm_servicebus_namespaceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_namespace_authorization_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_namespace_authorization_ruleHandler", &Azurerm_servicebus_namespace_authorization_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_queue{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_queueHandler", &Azurerm_servicebus_queueHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_queue_authorization_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_queue_authorization_ruleHandler", &Azurerm_servicebus_queue_authorization_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_subscription{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_subscriptionHandler", &Azurerm_servicebus_subscriptionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_subscription_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_subscription_ruleHandler", &Azurerm_servicebus_subscription_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_topic{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_topicHandler", &Azurerm_servicebus_topicHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_servicebus_topic_authorization_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_servicebus_topic_authorization_ruleHandler", &Azurerm_servicebus_topic_authorization_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_shared_image{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_shared_imageHandler", &Azurerm_shared_imageHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_shared_image_gallery{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_shared_image_galleryHandler", &Azurerm_shared_image_galleryHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_shared_image_version{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_shared_image_versionHandler", &Azurerm_shared_image_versionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_signalr_service{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_signalr_serviceHandler", &Azurerm_signalr_serviceHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_snapshot{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_snapshotHandler", &Azurerm_snapshotHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_sql_active_directory_administrator{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_sql_active_directory_administratorHandler", &Azurerm_sql_active_directory_administratorHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_sql_database{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_sql_databaseHandler", &Azurerm_sql_databaseHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_sql_elasticpool{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_sql_elasticpoolHandler", &Azurerm_sql_elasticpoolHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_sql_firewall_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_sql_firewall_ruleHandler", &Azurerm_sql_firewall_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_sql_server{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_sql_serverHandler", &Azurerm_sql_serverHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_sql_virtual_network_rule{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_sql_virtual_network_ruleHandler", &Azurerm_sql_virtual_network_ruleHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_storage_account{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_storage_accountHandler", &Azurerm_storage_accountHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_storage_blob{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_storage_blobHandler", &Azurerm_storage_blobHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_storage_container{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_storage_containerHandler", &Azurerm_storage_containerHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_storage_queue{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_storage_queueHandler", &Azurerm_storage_queueHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_storage_share{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_storage_shareHandler", &Azurerm_storage_shareHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_storage_table{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_storage_tableHandler", &Azurerm_storage_tableHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_subnet{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_subnetHandler", &Azurerm_subnetHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_subnet_network_security_group_association{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_subnet_network_security_group_associationHandler", &Azurerm_subnet_network_security_group_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_subnet_route_table_association{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_subnet_route_table_associationHandler", &Azurerm_subnet_route_table_associationHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_template_deployment{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_template_deploymentHandler", &Azurerm_template_deploymentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_traffic_manager_endpoint{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_traffic_manager_endpointHandler", &Azurerm_traffic_manager_endpointHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_traffic_manager_profile{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_traffic_manager_profileHandler", &Azurerm_traffic_manager_profileHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_user_assigned_identity{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_user_assigned_identityHandler", &Azurerm_user_assigned_identityHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_machine{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_machineHandler", &Azurerm_virtual_machineHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_machine_data_disk_attachment{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_machine_data_disk_attachmentHandler", &Azurerm_virtual_machine_data_disk_attachmentHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_machine_extension{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_machine_extensionHandler", &Azurerm_virtual_machine_extensionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_machine_scale_set{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_machine_scale_setHandler", &Azurerm_virtual_machine_scale_setHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_network{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_networkHandler", &Azurerm_virtual_networkHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_network_gateway{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_network_gatewayHandler", &Azurerm_virtual_network_gatewayHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_network_gateway_connection{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_network_gateway_connectionHandler", &Azurerm_virtual_network_gateway_connectionHandler{provider: p}, evs[0])
    evs = sb.RegisterTypes("TerraformAzureRM", Azurerm_virtual_network_peering{})
    sb.RegisterHandler("TerraformAzureRM::Azurerm_virtual_network_peeringHandler", &Azurerm_virtual_network_peeringHandler{provider: p}, evs[0])
}


type Azurerm_api_management_additional_location_589 struct {

    Gateway_regional_url *string

    Location string

    Public_ip_addresses *[]string

}

type Azurerm_api_management_certificate_590 struct {

    Certificate_password string

    Encoded_certificate string

    Store_name string

}

type Azurerm_api_management_hostname_configuration_591_management_592 struct {

    Certificate *string

    Certificate_password *string

    Host_name string

    Key_vault_id *string

    Negotiate_client_certificate *bool

}

type Azurerm_api_management_hostname_configuration_591_portal_593 struct {

    Certificate *string

    Certificate_password *string

    Host_name string

    Key_vault_id *string

    Negotiate_client_certificate *bool

}

type Azurerm_api_management_hostname_configuration_591_proxy_594 struct {

    Certificate *string

    Certificate_password *string

    Default_ssl_binding *bool

    Host_name string

    Key_vault_id *string

    Negotiate_client_certificate *bool

}

type Azurerm_api_management_hostname_configuration_591_scm_595 struct {

    Certificate *string

    Certificate_password *string

    Host_name string

    Key_vault_id *string

    Negotiate_client_certificate *bool

}

type Azurerm_api_management_hostname_configuration_591 struct {

    Management *[]Azurerm_api_management_hostname_configuration_591_management_592

    Portal *[]Azurerm_api_management_hostname_configuration_591_portal_593

    Proxy *[]Azurerm_api_management_hostname_configuration_591_proxy_594

    Scm *[]Azurerm_api_management_hostname_configuration_591_scm_595

}

type Azurerm_api_management_identity_596 struct {

    Principal_id *string

    Tenant_id *string

    Type string

}

type Azurerm_api_management_security_597 struct {

    Disable_backend_ssl30 *bool

    Disable_backend_tls10 *bool

    Disable_backend_tls11 *bool

    Disable_frontend_ssl30 *bool

    Disable_frontend_tls10 *bool

    Disable_frontend_tls11 *bool

    Disable_triple_des_chipers *bool

}

type Azurerm_api_management_sku_598 struct {

    Capacity int

    Name string

}

type Azurerm_api_management struct {

    Azurerm_api_management_id *string `lyra:"ignore"`

    Additional_location *[]Azurerm_api_management_additional_location_589

    Certificate *[]Azurerm_api_management_certificate_590

    Gateway_regional_url *string

    Gateway_url *string

    Hostname_configuration *[]Azurerm_api_management_hostname_configuration_591

    Identity *[]Azurerm_api_management_identity_596

    Location string

    Management_api_url *string

    Name string

    Notification_sender_email *string

    Portal_url *string

    Public_ip_addresses *[]string

    Publisher_email string

    Publisher_name string

    Resource_group_name string

    Scm_url *string

    Security *[]Azurerm_api_management_security_597

    Sku []Azurerm_api_management_sku_598

    Tags *map[string]string

}

// Azurerm_api_managementHandler ...
type Azurerm_api_managementHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_api_managementHandler) Create(desired *Azurerm_api_management) (*Azurerm_api_management, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_api_management", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_api_managementHandler) Read(externalID string) (*Azurerm_api_management, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_api_management", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_api_management{ Azurerm_api_management_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_api_managementHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_api_management", externalID)
}

type Azurerm_app_service_connection_string_599 struct {

    Name string

    Type string

    Value string

}

type Azurerm_app_service_identity_600 struct {

    Principal_id *string

    Tenant_id *string

    Type string

}

type Azurerm_app_service_site_config_601_ip_restriction_602 struct {

    Ip_address string

    Subnet_mask *string

}

type Azurerm_app_service_site_config_601 struct {

    Always_on *bool

    App_command_line *string

    Default_documents *[]string

    Dotnet_framework_version *string

    Ftps_state *string

    Http2_enabled *bool

    Ip_restriction *[]Azurerm_app_service_site_config_601_ip_restriction_602

    Java_container *string

    Java_container_version *string

    Java_version *string

    Linux_fx_version *string

    Local_mysql_enabled *bool

    Managed_pipeline_mode *string

    Min_tls_version *string

    Php_version *string

    Python_version *string

    Remote_debugging_enabled *bool

    Remote_debugging_version *string

    Scm_type *string

    Use_32_bit_worker_process *bool

    Virtual_network_name *string

    Websockets_enabled *bool

}

type Azurerm_app_service_site_credential_603 struct {

    Password *string

    Username *string

}

type Azurerm_app_service_source_control_604 struct {

    Branch *string

    Repo_url *string

}

type Azurerm_app_service struct {

    Azurerm_app_service_id *string `lyra:"ignore"`

    App_service_plan_id string

    App_settings *map[string]string

    Client_affinity_enabled *bool

    Connection_string *[]Azurerm_app_service_connection_string_599

    Default_site_hostname *string

    Enabled *bool

    Https_only *bool

    Identity *[]Azurerm_app_service_identity_600

    Location string

    Name string

    Outbound_ip_addresses *string

    Possible_outbound_ip_addresses *string

    Resource_group_name string

    Site_config *[]Azurerm_app_service_site_config_601

    Site_credential *[]Azurerm_app_service_site_credential_603

    Source_control *[]Azurerm_app_service_source_control_604

    Tags *map[string]string

}

// Azurerm_app_serviceHandler ...
type Azurerm_app_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_app_serviceHandler) Create(desired *Azurerm_app_service) (*Azurerm_app_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_app_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_app_serviceHandler) Read(externalID string) (*Azurerm_app_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_app_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_app_service{ Azurerm_app_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_app_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_app_service", externalID)
}

type Azurerm_app_service_active_slot struct {

    Azurerm_app_service_active_slot_id *string `lyra:"ignore"`

    App_service_name string

    App_service_slot_name string

    Resource_group_name string

}

// Azurerm_app_service_active_slotHandler ...
type Azurerm_app_service_active_slotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_app_service_active_slotHandler) Create(desired *Azurerm_app_service_active_slot) (*Azurerm_app_service_active_slot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_app_service_active_slot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_app_service_active_slotHandler) Read(externalID string) (*Azurerm_app_service_active_slot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_app_service_active_slot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_app_service_active_slot{ Azurerm_app_service_active_slot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_app_service_active_slotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_app_service_active_slot", externalID)
}

type Azurerm_app_service_custom_hostname_binding struct {

    Azurerm_app_service_custom_hostname_binding_id *string `lyra:"ignore"`

    App_service_name string

    Hostname string

    Resource_group_name string

}

// Azurerm_app_service_custom_hostname_bindingHandler ...
type Azurerm_app_service_custom_hostname_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_app_service_custom_hostname_bindingHandler) Create(desired *Azurerm_app_service_custom_hostname_binding) (*Azurerm_app_service_custom_hostname_binding, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_app_service_custom_hostname_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_app_service_custom_hostname_bindingHandler) Read(externalID string) (*Azurerm_app_service_custom_hostname_binding, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_app_service_custom_hostname_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_app_service_custom_hostname_binding{ Azurerm_app_service_custom_hostname_binding_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_app_service_custom_hostname_bindingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_app_service_custom_hostname_binding", externalID)
}

type Azurerm_app_service_plan_properties_605 struct {

    App_service_environment_id *string

    Per_site_scaling *bool

    Reserved *bool

}

type Azurerm_app_service_plan_sku_606 struct {

    Capacity *int

    Size string

    Tier string

}

type Azurerm_app_service_plan struct {

    Azurerm_app_service_plan_id *string `lyra:"ignore"`

    App_service_environment_id *string

    Kind *string

    Location string

    Maximum_number_of_workers *int

    Name string

    Per_site_scaling *bool

    Properties *[]Azurerm_app_service_plan_properties_605

    Reserved *bool

    Resource_group_name string

    Sku []Azurerm_app_service_plan_sku_606

    Tags *map[string]string

}

// Azurerm_app_service_planHandler ...
type Azurerm_app_service_planHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_app_service_planHandler) Create(desired *Azurerm_app_service_plan) (*Azurerm_app_service_plan, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_app_service_plan", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_app_service_planHandler) Read(externalID string) (*Azurerm_app_service_plan, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_app_service_plan", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_app_service_plan{ Azurerm_app_service_plan_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_app_service_planHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_app_service_plan", externalID)
}

type Azurerm_app_service_slot_connection_string_607 struct {

    Name string

    Type string

    Value string

}

type Azurerm_app_service_slot_identity_608 struct {

    Principal_id *string

    Tenant_id *string

    Type string

}

type Azurerm_app_service_slot_site_config_609_ip_restriction_610 struct {

    Ip_address string

    Subnet_mask *string

}

type Azurerm_app_service_slot_site_config_609 struct {

    Always_on *bool

    App_command_line *string

    Default_documents *[]string

    Dotnet_framework_version *string

    Ftps_state *string

    Http2_enabled *bool

    Ip_restriction *[]Azurerm_app_service_slot_site_config_609_ip_restriction_610

    Java_container *string

    Java_container_version *string

    Java_version *string

    Linux_fx_version *string

    Local_mysql_enabled *bool

    Managed_pipeline_mode *string

    Min_tls_version *string

    Php_version *string

    Python_version *string

    Remote_debugging_enabled *bool

    Remote_debugging_version *string

    Scm_type *string

    Use_32_bit_worker_process *bool

    Virtual_network_name *string

    Websockets_enabled *bool

}

type Azurerm_app_service_slot struct {

    Azurerm_app_service_slot_id *string `lyra:"ignore"`

    App_service_name string

    App_service_plan_id string

    App_settings *map[string]string

    Client_affinity_enabled *bool

    Connection_string *[]Azurerm_app_service_slot_connection_string_607

    Default_site_hostname *string

    Enabled *bool

    Https_only *bool

    Identity *[]Azurerm_app_service_slot_identity_608

    Location string

    Name string

    Resource_group_name string

    Site_config *[]Azurerm_app_service_slot_site_config_609

    Tags *map[string]string

}

// Azurerm_app_service_slotHandler ...
type Azurerm_app_service_slotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_app_service_slotHandler) Create(desired *Azurerm_app_service_slot) (*Azurerm_app_service_slot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_app_service_slot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_app_service_slotHandler) Read(externalID string) (*Azurerm_app_service_slot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_app_service_slot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_app_service_slot{ Azurerm_app_service_slot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_app_service_slotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_app_service_slot", externalID)
}

type Azurerm_application_gateway_authentication_certificate_611 struct {

    Data string

    Id *string

    Name string

}

type Azurerm_application_gateway_backend_address_pool_612 struct {

    Fqdn_list *[]string

    Id *string

    Ip_address_list *[]string

    Name string

}

type Azurerm_application_gateway_backend_http_settings_613_authentication_certificate_614 struct {

    Id *string

    Name string

}

type Azurerm_application_gateway_backend_http_settings_613 struct {

    Authentication_certificate *[]Azurerm_application_gateway_backend_http_settings_613_authentication_certificate_614

    Cookie_based_affinity string

    Id *string

    Name string

    Port int

    Probe_id *string

    Probe_name *string

    Protocol string

    Request_timeout *int

}

type Azurerm_application_gateway_frontend_ip_configuration_615 struct {

    Id *string

    Name string

    Private_ip_address *string

    Private_ip_address_allocation *string

    Public_ip_address_id *string

    Subnet_id *string

}

type Azurerm_application_gateway_frontend_port_616 struct {

    Id *string

    Name string

    Port int

}

type Azurerm_application_gateway_gateway_ip_configuration_617 struct {

    Id *string

    Name string

    Subnet_id string

}

type Azurerm_application_gateway_http_listener_618 struct {

    Frontend_ip_configuration_id *string

    Frontend_ip_configuration_name string

    Frontend_port_id *string

    Frontend_port_name string

    Host_name *string

    Id *string

    Name string

    Protocol string

    Require_sni *bool

    Ssl_certificate_id *string

    Ssl_certificate_name *string

}

type Azurerm_application_gateway_probe_619_match_620 struct {

    Body *string

    Status_code *[]string

}

type Azurerm_application_gateway_probe_619 struct {

    Host string

    Id *string

    Interval int

    Match *[]Azurerm_application_gateway_probe_619_match_620

    Minimum_servers *int

    Name string

    Path string

    Protocol string

    Timeout int

    Unhealthy_threshold int

}

type Azurerm_application_gateway_request_routing_rule_621 struct {

    Backend_address_pool_id *string

    Backend_address_pool_name *string

    Backend_http_settings_id *string

    Backend_http_settings_name *string

    Http_listener_id *string

    Http_listener_name string

    Id *string

    Name string

    Rule_type string

    Url_path_map_id *string

    Url_path_map_name *string

}

type Azurerm_application_gateway_sku_622 struct {

    Capacity int

    Name string

    Tier string

}

type Azurerm_application_gateway_ssl_certificate_623 struct {

    Data string

    Id *string

    Name string

    Password string

    Public_cert_data *string

}

type Azurerm_application_gateway_url_path_map_624_path_rule_625 struct {

    Backend_address_pool_id *string

    Backend_address_pool_name string

    Backend_http_settings_id *string

    Backend_http_settings_name string

    Id *string

    Name string

    Paths []string

}

type Azurerm_application_gateway_url_path_map_624 struct {

    Default_backend_address_pool_id *string

    Default_backend_address_pool_name string

    Default_backend_http_settings_id *string

    Default_backend_http_settings_name string

    Id *string

    Name string

    Path_rule []Azurerm_application_gateway_url_path_map_624_path_rule_625

}

type Azurerm_application_gateway_waf_configuration_626 struct {

    Enabled bool

    Firewall_mode string

    Rule_set_type *string

    Rule_set_version string

}

type Azurerm_application_gateway struct {

    Azurerm_application_gateway_id *string `lyra:"ignore"`

    Authentication_certificate *[]Azurerm_application_gateway_authentication_certificate_611

    Backend_address_pool []Azurerm_application_gateway_backend_address_pool_612

    Backend_http_settings []Azurerm_application_gateway_backend_http_settings_613

    Disabled_ssl_protocols *[]string

    Frontend_ip_configuration []Azurerm_application_gateway_frontend_ip_configuration_615

    Frontend_port []Azurerm_application_gateway_frontend_port_616

    Gateway_ip_configuration []Azurerm_application_gateway_gateway_ip_configuration_617

    Http_listener []Azurerm_application_gateway_http_listener_618

    Location string

    Name string

    Probe *[]Azurerm_application_gateway_probe_619

    Request_routing_rule []Azurerm_application_gateway_request_routing_rule_621

    Resource_group_name string

    Sku []Azurerm_application_gateway_sku_622

    Ssl_certificate *[]Azurerm_application_gateway_ssl_certificate_623

    Tags *map[string]string

    Url_path_map *[]Azurerm_application_gateway_url_path_map_624

    Waf_configuration *[]Azurerm_application_gateway_waf_configuration_626

}

// Azurerm_application_gatewayHandler ...
type Azurerm_application_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_application_gatewayHandler) Create(desired *Azurerm_application_gateway) (*Azurerm_application_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_application_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_application_gatewayHandler) Read(externalID string) (*Azurerm_application_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_application_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_application_gateway{ Azurerm_application_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_application_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_application_gateway", externalID)
}

type Azurerm_application_insights struct {

    Azurerm_application_insights_id *string `lyra:"ignore"`

    App_id *string

    Application_type string

    Instrumentation_key *string

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_application_insightsHandler ...
type Azurerm_application_insightsHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_application_insightsHandler) Create(desired *Azurerm_application_insights) (*Azurerm_application_insights, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_application_insights", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_application_insightsHandler) Read(externalID string) (*Azurerm_application_insights, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_application_insights", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_application_insights{ Azurerm_application_insights_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_application_insightsHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_application_insights", externalID)
}

type Azurerm_application_insights_api_key struct {

    Azurerm_application_insights_api_key_id *string `lyra:"ignore"`

    Api_key *string

    Application_insights_id string

    Name string

    Read_permissions *[]string

    Write_permissions *[]string

}

// Azurerm_application_insights_api_keyHandler ...
type Azurerm_application_insights_api_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_application_insights_api_keyHandler) Create(desired *Azurerm_application_insights_api_key) (*Azurerm_application_insights_api_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_application_insights_api_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_application_insights_api_keyHandler) Read(externalID string) (*Azurerm_application_insights_api_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_application_insights_api_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_application_insights_api_key{ Azurerm_application_insights_api_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_application_insights_api_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_application_insights_api_key", externalID)
}

type Azurerm_application_security_group struct {

    Azurerm_application_security_group_id *string `lyra:"ignore"`

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_application_security_groupHandler ...
type Azurerm_application_security_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_application_security_groupHandler) Create(desired *Azurerm_application_security_group) (*Azurerm_application_security_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_application_security_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_application_security_groupHandler) Read(externalID string) (*Azurerm_application_security_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_application_security_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_application_security_group{ Azurerm_application_security_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_application_security_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_application_security_group", externalID)
}

type Azurerm_automation_account_sku_627 struct {

    Name *string

}

type Azurerm_automation_account struct {

    Azurerm_automation_account_id *string `lyra:"ignore"`

    Dsc_primary_access_key *string

    Dsc_secondary_access_key *string

    Dsc_server_endpoint *string

    Location string

    Name string

    Resource_group_name string

    Sku []Azurerm_automation_account_sku_627

    Tags *map[string]string

}

// Azurerm_automation_accountHandler ...
type Azurerm_automation_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_automation_accountHandler) Create(desired *Azurerm_automation_account) (*Azurerm_automation_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_automation_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_automation_accountHandler) Read(externalID string) (*Azurerm_automation_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_automation_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_automation_account{ Azurerm_automation_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_automation_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_automation_account", externalID)
}

type Azurerm_automation_credential struct {

    Azurerm_automation_credential_id *string `lyra:"ignore"`

    Account_name string

    Description *string

    Name string

    Password string

    Resource_group_name string

    Username string

}

// Azurerm_automation_credentialHandler ...
type Azurerm_automation_credentialHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_automation_credentialHandler) Create(desired *Azurerm_automation_credential) (*Azurerm_automation_credential, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_automation_credential", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_automation_credentialHandler) Read(externalID string) (*Azurerm_automation_credential, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_automation_credential", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_automation_credential{ Azurerm_automation_credential_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_automation_credentialHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_automation_credential", externalID)
}

type Azurerm_automation_dsc_configuration struct {

    Azurerm_automation_dsc_configuration_id *string `lyra:"ignore"`

    Automation_account_name string

    Content_embedded string

    Description *string

    Location string

    Log_verbose *bool

    Name string

    Resource_group_name string

    State *string

}

// Azurerm_automation_dsc_configurationHandler ...
type Azurerm_automation_dsc_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_automation_dsc_configurationHandler) Create(desired *Azurerm_automation_dsc_configuration) (*Azurerm_automation_dsc_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_automation_dsc_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_automation_dsc_configurationHandler) Read(externalID string) (*Azurerm_automation_dsc_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_automation_dsc_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_automation_dsc_configuration{ Azurerm_automation_dsc_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_automation_dsc_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_automation_dsc_configuration", externalID)
}

type Azurerm_automation_dsc_nodeconfiguration struct {

    Azurerm_automation_dsc_nodeconfiguration_id *string `lyra:"ignore"`

    Automation_account_name string

    Configuration_name *string

    Content_embedded string

    Name string

    Resource_group_name string

}

// Azurerm_automation_dsc_nodeconfigurationHandler ...
type Azurerm_automation_dsc_nodeconfigurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_automation_dsc_nodeconfigurationHandler) Create(desired *Azurerm_automation_dsc_nodeconfiguration) (*Azurerm_automation_dsc_nodeconfiguration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_automation_dsc_nodeconfiguration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_automation_dsc_nodeconfigurationHandler) Read(externalID string) (*Azurerm_automation_dsc_nodeconfiguration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_automation_dsc_nodeconfiguration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_automation_dsc_nodeconfiguration{ Azurerm_automation_dsc_nodeconfiguration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_automation_dsc_nodeconfigurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_automation_dsc_nodeconfiguration", externalID)
}

type Azurerm_automation_module_module_link_628_hash_629 struct {

    Algorithm string

    Value string

}

type Azurerm_automation_module_module_link_628 struct {

    Hash *[]Azurerm_automation_module_module_link_628_hash_629

    Uri string

}

type Azurerm_automation_module struct {

    Azurerm_automation_module_id *string `lyra:"ignore"`

    Automation_account_name string

    Module_link []Azurerm_automation_module_module_link_628

    Name string

    Resource_group_name string

}

// Azurerm_automation_moduleHandler ...
type Azurerm_automation_moduleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_automation_moduleHandler) Create(desired *Azurerm_automation_module) (*Azurerm_automation_module, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_automation_module", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_automation_moduleHandler) Read(externalID string) (*Azurerm_automation_module, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_automation_module", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_automation_module{ Azurerm_automation_module_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_automation_moduleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_automation_module", externalID)
}

type Azurerm_automation_runbook_publish_content_link_630_hash_631 struct {

    Algorithm string

    Value string

}

type Azurerm_automation_runbook_publish_content_link_630 struct {

    Hash *[]Azurerm_automation_runbook_publish_content_link_630_hash_631

    Uri string

    Version *string

}

type Azurerm_automation_runbook struct {

    Azurerm_automation_runbook_id *string `lyra:"ignore"`

    Account_name string

    Content *string

    Description *string

    Location string

    Log_progress bool

    Log_verbose bool

    Name string

    Publish_content_link []Azurerm_automation_runbook_publish_content_link_630

    Resource_group_name string

    Runbook_type string

    Tags *map[string]string

}

// Azurerm_automation_runbookHandler ...
type Azurerm_automation_runbookHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_automation_runbookHandler) Create(desired *Azurerm_automation_runbook) (*Azurerm_automation_runbook, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_automation_runbook", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_automation_runbookHandler) Read(externalID string) (*Azurerm_automation_runbook, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_automation_runbook", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_automation_runbook{ Azurerm_automation_runbook_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_automation_runbookHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_automation_runbook", externalID)
}

type Azurerm_automation_schedule_monthly_occurrence_632 struct {

    Day string

    Occurrence int

}

type Azurerm_automation_schedule struct {

    Azurerm_automation_schedule_id *string `lyra:"ignore"`

    Account_name *string

    Automation_account_name *string

    Description *string

    Expiry_time *string

    Frequency string

    Interval *int

    Month_days *[]int

    Monthly_occurrence *[]Azurerm_automation_schedule_monthly_occurrence_632

    Name string

    Resource_group_name string

    Start_time *string

    Timezone *string

    Week_days *[]string

}

// Azurerm_automation_scheduleHandler ...
type Azurerm_automation_scheduleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_automation_scheduleHandler) Create(desired *Azurerm_automation_schedule) (*Azurerm_automation_schedule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_automation_schedule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_automation_scheduleHandler) Read(externalID string) (*Azurerm_automation_schedule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_automation_schedule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_automation_schedule{ Azurerm_automation_schedule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_automation_scheduleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_automation_schedule", externalID)
}

type Azurerm_autoscale_setting_notification_633_email_634 struct {

    Custom_emails *[]string

    Send_to_subscription_administrator *bool

    Send_to_subscription_co_administrator *bool

}

type Azurerm_autoscale_setting_notification_633_webhook_635 struct {

    Properties *map[string]string

    Service_uri string

}

type Azurerm_autoscale_setting_notification_633 struct {

    Email *[]Azurerm_autoscale_setting_notification_633_email_634

    Webhook *[]Azurerm_autoscale_setting_notification_633_webhook_635

}

type Azurerm_autoscale_setting_profile_636_capacity_637 struct {

    Default int

    Maximum int

    Minimum int

}

type Azurerm_autoscale_setting_profile_636_fixed_date_638 struct {

    End string

    Start string

    Timezone *string

}

type Azurerm_autoscale_setting_profile_636_recurrence_639 struct {

    Days []string

    Hours []int

    Minutes []int

    Timezone *string

}

type Azurerm_autoscale_setting_profile_636_rule_640_metric_trigger_641 struct {

    Metric_name string

    Metric_resource_id string

    Operator string

    Statistic string

    Threshold float64

    Time_aggregation string

    Time_grain string

    Time_window string

}

type Azurerm_autoscale_setting_profile_636_rule_640_scale_action_642 struct {

    Cooldown string

    Direction string

    Type string

    Value int

}

type Azurerm_autoscale_setting_profile_636_rule_640 struct {

    Metric_trigger []Azurerm_autoscale_setting_profile_636_rule_640_metric_trigger_641

    Scale_action []Azurerm_autoscale_setting_profile_636_rule_640_scale_action_642

}

type Azurerm_autoscale_setting_profile_636 struct {

    Capacity []Azurerm_autoscale_setting_profile_636_capacity_637

    Fixed_date *[]Azurerm_autoscale_setting_profile_636_fixed_date_638

    Name string

    Recurrence *[]Azurerm_autoscale_setting_profile_636_recurrence_639

    Rule *[]Azurerm_autoscale_setting_profile_636_rule_640

}

type Azurerm_autoscale_setting struct {

    Azurerm_autoscale_setting_id *string `lyra:"ignore"`

    Enabled *bool

    Location string

    Name string

    Notification *[]Azurerm_autoscale_setting_notification_633

    Profile []Azurerm_autoscale_setting_profile_636

    Resource_group_name string

    Tags *map[string]string

    Target_resource_id string

}

// Azurerm_autoscale_settingHandler ...
type Azurerm_autoscale_settingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_autoscale_settingHandler) Create(desired *Azurerm_autoscale_setting) (*Azurerm_autoscale_setting, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_autoscale_setting", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_autoscale_settingHandler) Read(externalID string) (*Azurerm_autoscale_setting, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_autoscale_setting", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_autoscale_setting{ Azurerm_autoscale_setting_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_autoscale_settingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_autoscale_setting", externalID)
}

type Azurerm_availability_set struct {

    Azurerm_availability_set_id *string `lyra:"ignore"`

    Location string

    Managed *bool

    Name string

    Platform_fault_domain_count *int

    Platform_update_domain_count *int

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_availability_setHandler ...
type Azurerm_availability_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_availability_setHandler) Create(desired *Azurerm_availability_set) (*Azurerm_availability_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_availability_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_availability_setHandler) Read(externalID string) (*Azurerm_availability_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_availability_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_availability_set{ Azurerm_availability_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_availability_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_availability_set", externalID)
}

type Azurerm_azuread_application struct {

    Azurerm_azuread_application_id *string `lyra:"ignore"`

    Application_id *string

    Available_to_other_tenants *bool

    Homepage *string

    Identifier_uris *[]string

    Name string

    Oauth2_allow_implicit_flow *bool

    Reply_urls *[]string

}

// Azurerm_azuread_applicationHandler ...
type Azurerm_azuread_applicationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_azuread_applicationHandler) Create(desired *Azurerm_azuread_application) (*Azurerm_azuread_application, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_azuread_application", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_azuread_applicationHandler) Read(externalID string) (*Azurerm_azuread_application, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_azuread_application", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_azuread_application{ Azurerm_azuread_application_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_azuread_applicationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_azuread_application", externalID)
}

type Azurerm_azuread_service_principal struct {

    Azurerm_azuread_service_principal_id *string `lyra:"ignore"`

    Application_id string

    Display_name *string

}

// Azurerm_azuread_service_principalHandler ...
type Azurerm_azuread_service_principalHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_azuread_service_principalHandler) Create(desired *Azurerm_azuread_service_principal) (*Azurerm_azuread_service_principal, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_azuread_service_principal", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_azuread_service_principalHandler) Read(externalID string) (*Azurerm_azuread_service_principal, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_azuread_service_principal", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_azuread_service_principal{ Azurerm_azuread_service_principal_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_azuread_service_principalHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_azuread_service_principal", externalID)
}

type Azurerm_azuread_service_principal_password struct {

    Azurerm_azuread_service_principal_password_id *string `lyra:"ignore"`

    End_date string

    Key_id *string

    Service_principal_id string

    Start_date *string

    Value string

}

// Azurerm_azuread_service_principal_passwordHandler ...
type Azurerm_azuread_service_principal_passwordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_azuread_service_principal_passwordHandler) Create(desired *Azurerm_azuread_service_principal_password) (*Azurerm_azuread_service_principal_password, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_azuread_service_principal_password", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_azuread_service_principal_passwordHandler) Read(externalID string) (*Azurerm_azuread_service_principal_password, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_azuread_service_principal_password", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_azuread_service_principal_password{ Azurerm_azuread_service_principal_password_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_azuread_service_principal_passwordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_azuread_service_principal_password", externalID)
}

type Azurerm_batch_account struct {

    Azurerm_batch_account_id *string `lyra:"ignore"`

    Location string

    Name string

    Pool_allocation_mode *string

    Resource_group_name string

    Storage_account_id *string

    Tags *map[string]string

}

// Azurerm_batch_accountHandler ...
type Azurerm_batch_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_batch_accountHandler) Create(desired *Azurerm_batch_account) (*Azurerm_batch_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_batch_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_batch_accountHandler) Read(externalID string) (*Azurerm_batch_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_batch_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_batch_account{ Azurerm_batch_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_batch_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_batch_account", externalID)
}

type Azurerm_batch_pool_auto_scale_643 struct {

    Evaluation_interval *string

    Formula string

}

type Azurerm_batch_pool_fixed_scale_644 struct {

    Resize_timeout *string

    Target_dedicated_nodes *int

    Target_low_priority_nodes *int

}

type Azurerm_batch_pool_start_task_645_user_identity_646_auto_user_647 struct {

    Elevation_level *string

    Scope *string

}

type Azurerm_batch_pool_start_task_645_user_identity_646 struct {

    Auto_user *[]Azurerm_batch_pool_start_task_645_user_identity_646_auto_user_647

    User_name *string

}

type Azurerm_batch_pool_start_task_645 struct {

    Command_line string

    Environment *map[string]string

    Max_task_retry_count *int

    User_identity []Azurerm_batch_pool_start_task_645_user_identity_646

    Wait_for_success *bool

}

type Azurerm_batch_pool_storage_image_reference_648 struct {

    Id *string

    Offer string

    Publisher string

    Sku string

    Version string

}

type Azurerm_batch_pool struct {

    Azurerm_batch_pool_id *string `lyra:"ignore"`

    Account_name string

    Auto_scale *[]Azurerm_batch_pool_auto_scale_643

    Display_name *string

    Fixed_scale *[]Azurerm_batch_pool_fixed_scale_644

    Name string

    Node_agent_sku_id string

    Resource_group_name string

    Start_task *[]Azurerm_batch_pool_start_task_645

    Stop_pending_resize_operation *bool

    Storage_image_reference []Azurerm_batch_pool_storage_image_reference_648

    Vm_size string

}

// Azurerm_batch_poolHandler ...
type Azurerm_batch_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_batch_poolHandler) Create(desired *Azurerm_batch_pool) (*Azurerm_batch_pool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_batch_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_batch_poolHandler) Read(externalID string) (*Azurerm_batch_pool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_batch_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_batch_pool{ Azurerm_batch_pool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_batch_poolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_batch_pool", externalID)
}

type Azurerm_cdn_endpoint_geo_filter_649 struct {

    Action string

    Country_codes []string

    Relative_path string

}

type Azurerm_cdn_endpoint_origin_650 struct {

    Host_name string

    Http_port *int

    Https_port *int

    Name string

}

type Azurerm_cdn_endpoint struct {

    Azurerm_cdn_endpoint_id *string `lyra:"ignore"`

    Content_types_to_compress *[]string

    Geo_filter *[]Azurerm_cdn_endpoint_geo_filter_649

    Host_name *string

    Is_compression_enabled *bool

    Is_http_allowed *bool

    Is_https_allowed *bool

    Location string

    Name string

    Optimization_type *string

    Origin []Azurerm_cdn_endpoint_origin_650

    Origin_host_header *string

    Origin_path *string

    Probe_path *string

    Profile_name string

    Querystring_caching_behaviour *string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_cdn_endpointHandler ...
type Azurerm_cdn_endpointHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_cdn_endpointHandler) Create(desired *Azurerm_cdn_endpoint) (*Azurerm_cdn_endpoint, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_cdn_endpoint", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_cdn_endpointHandler) Read(externalID string) (*Azurerm_cdn_endpoint, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_cdn_endpoint", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_cdn_endpoint{ Azurerm_cdn_endpoint_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_cdn_endpointHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_cdn_endpoint", externalID)
}

type Azurerm_cdn_profile struct {

    Azurerm_cdn_profile_id *string `lyra:"ignore"`

    Location string

    Name string

    Resource_group_name string

    Sku string

    Tags *map[string]string

}

// Azurerm_cdn_profileHandler ...
type Azurerm_cdn_profileHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_cdn_profileHandler) Create(desired *Azurerm_cdn_profile) (*Azurerm_cdn_profile, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_cdn_profile", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_cdn_profileHandler) Read(externalID string) (*Azurerm_cdn_profile, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_cdn_profile", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_cdn_profile{ Azurerm_cdn_profile_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_cdn_profileHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_cdn_profile", externalID)
}

type Azurerm_cognitive_account_sku_651 struct {

    Name string

    Tier string

}

type Azurerm_cognitive_account struct {

    Azurerm_cognitive_account_id *string `lyra:"ignore"`

    Endpoint *string

    Kind string

    Location string

    Name string

    Resource_group_name string

    Sku []Azurerm_cognitive_account_sku_651

    Tags *map[string]string

}

// Azurerm_cognitive_accountHandler ...
type Azurerm_cognitive_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_cognitive_accountHandler) Create(desired *Azurerm_cognitive_account) (*Azurerm_cognitive_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_cognitive_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_cognitive_accountHandler) Read(externalID string) (*Azurerm_cognitive_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_cognitive_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_cognitive_account{ Azurerm_cognitive_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_cognitive_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_cognitive_account", externalID)
}

type Azurerm_container_group_container_652_ports_653 struct {

    Port *int

    Protocol *string

}

type Azurerm_container_group_container_652_volume_654 struct {

    Mount_path string

    Name string

    Read_only *bool

    Share_name string

    Storage_account_key string

    Storage_account_name string

}

type Azurerm_container_group_container_652 struct {

    Command *string

    Commands *[]string

    Cpu float64

    Environment_variables *map[string]string

    Image string

    Memory float64

    Name string

    Port *int

    Ports *[]Azurerm_container_group_container_652_ports_653

    Protocol *string

    Secure_environment_variables *map[string]string

    Volume *[]Azurerm_container_group_container_652_volume_654

}

type Azurerm_container_group_image_registry_credential_655 struct {

    Password string

    Server string

    Username string

}

type Azurerm_container_group struct {

    Azurerm_container_group_id *string `lyra:"ignore"`

    Container []Azurerm_container_group_container_652

    Dns_name_label *string

    Fqdn *string

    Image_registry_credential *[]Azurerm_container_group_image_registry_credential_655

    Ip_address *string

    Ip_address_type *string

    Location string

    Name string

    Os_type string

    Resource_group_name string

    Restart_policy *string

    Tags *map[string]string

}

// Azurerm_container_groupHandler ...
type Azurerm_container_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_container_groupHandler) Create(desired *Azurerm_container_group) (*Azurerm_container_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_container_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_container_groupHandler) Read(externalID string) (*Azurerm_container_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_container_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_container_group{ Azurerm_container_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_container_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_container_group", externalID)
}

type Azurerm_container_registry_storage_account_656 struct {

    Access_key string

    Name string

}

type Azurerm_container_registry struct {

    Azurerm_container_registry_id *string `lyra:"ignore"`

    Admin_enabled *bool

    Admin_password *string

    Admin_username *string

    Georeplication_locations *[]string

    Location string

    Login_server *string

    Name string

    Resource_group_name string

    Sku *string

    Storage_account *[]Azurerm_container_registry_storage_account_656

    Storage_account_id *string

    Tags *map[string]string

}

// Azurerm_container_registryHandler ...
type Azurerm_container_registryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_container_registryHandler) Create(desired *Azurerm_container_registry) (*Azurerm_container_registry, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_container_registry", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_container_registryHandler) Read(externalID string) (*Azurerm_container_registry, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_container_registry", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_container_registry{ Azurerm_container_registry_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_container_registryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_container_registry", externalID)
}

type Azurerm_container_service_agent_pool_profile_657 struct {

    Count *int

    Dns_prefix string

    Fqdn *string

    Name string

    Vm_size string

}

type Azurerm_container_service_diagnostics_profile_658 struct {

    Enabled bool

    Storage_uri *string

}

type Azurerm_container_service_linux_profile_659_ssh_key_660 struct {

    Key_data string

}

type Azurerm_container_service_linux_profile_659 struct {

    Admin_username string

    Ssh_key []Azurerm_container_service_linux_profile_659_ssh_key_660

}

type Azurerm_container_service_master_profile_661 struct {

    Count *int

    Dns_prefix string

    Fqdn *string

}

type Azurerm_container_service_service_principal_662 struct {

    Client_id string

    Client_secret string

}

type Azurerm_container_service struct {

    Azurerm_container_service_id *string `lyra:"ignore"`

    Agent_pool_profile []Azurerm_container_service_agent_pool_profile_657

    Diagnostics_profile []Azurerm_container_service_diagnostics_profile_658

    Linux_profile []Azurerm_container_service_linux_profile_659

    Location string

    Master_profile []Azurerm_container_service_master_profile_661

    Name string

    Orchestration_platform string

    Resource_group_name string

    Service_principal *[]Azurerm_container_service_service_principal_662

    Tags *map[string]string

}

// Azurerm_container_serviceHandler ...
type Azurerm_container_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_container_serviceHandler) Create(desired *Azurerm_container_service) (*Azurerm_container_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_container_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_container_serviceHandler) Read(externalID string) (*Azurerm_container_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_container_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_container_service{ Azurerm_container_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_container_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_container_service", externalID)
}

type Azurerm_cosmosdb_account_capabilities_663 struct {

    Name string

}

type Azurerm_cosmosdb_account_consistency_policy_664 struct {

    Consistency_level string

    Max_interval_in_seconds *int

    Max_staleness_prefix *int

}

type Azurerm_cosmosdb_account_failover_policy_665 struct {

    Id *string

    Location string

    Priority int

}

type Azurerm_cosmosdb_account_geo_location_666 struct {

    Failover_priority int

    Id *string

    Location string

    Prefix *string

}

type Azurerm_cosmosdb_account_virtual_network_rule_667 struct {

    Id string

}

type Azurerm_cosmosdb_account struct {

    Azurerm_cosmosdb_account_id *string `lyra:"ignore"`

    Capabilities *[]Azurerm_cosmosdb_account_capabilities_663

    Connection_strings *[]string

    Consistency_policy []Azurerm_cosmosdb_account_consistency_policy_664

    Enable_automatic_failover *bool

    Enable_multiple_write_locations *bool

    Endpoint *string

    Failover_policy *[]Azurerm_cosmosdb_account_failover_policy_665

    Geo_location *[]Azurerm_cosmosdb_account_geo_location_666

    Ip_range_filter *string

    Is_virtual_network_filter_enabled *bool

    Kind *string

    Location string

    Name string

    Offer_type string

    Primary_master_key *string

    Primary_readonly_master_key *string

    Read_endpoints *[]string

    Resource_group_name string

    Secondary_master_key *string

    Secondary_readonly_master_key *string

    Tags *map[string]string

    Virtual_network_rule *[]Azurerm_cosmosdb_account_virtual_network_rule_667

    Write_endpoints *[]string

}

// Azurerm_cosmosdb_accountHandler ...
type Azurerm_cosmosdb_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_cosmosdb_accountHandler) Create(desired *Azurerm_cosmosdb_account) (*Azurerm_cosmosdb_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_cosmosdb_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_cosmosdb_accountHandler) Read(externalID string) (*Azurerm_cosmosdb_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_cosmosdb_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_cosmosdb_account{ Azurerm_cosmosdb_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_cosmosdb_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_cosmosdb_account", externalID)
}

type Azurerm_data_lake_analytics_account struct {

    Azurerm_data_lake_analytics_account_id *string `lyra:"ignore"`

    Default_store_account_name string

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

    Tier *string

}

// Azurerm_data_lake_analytics_accountHandler ...
type Azurerm_data_lake_analytics_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_data_lake_analytics_accountHandler) Create(desired *Azurerm_data_lake_analytics_account) (*Azurerm_data_lake_analytics_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_data_lake_analytics_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_data_lake_analytics_accountHandler) Read(externalID string) (*Azurerm_data_lake_analytics_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_data_lake_analytics_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_data_lake_analytics_account{ Azurerm_data_lake_analytics_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_data_lake_analytics_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_data_lake_analytics_account", externalID)
}

type Azurerm_data_lake_analytics_firewall_rule struct {

    Azurerm_data_lake_analytics_firewall_rule_id *string `lyra:"ignore"`

    Account_name string

    End_ip_address string

    Name string

    Resource_group_name string

    Start_ip_address string

}

// Azurerm_data_lake_analytics_firewall_ruleHandler ...
type Azurerm_data_lake_analytics_firewall_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_data_lake_analytics_firewall_ruleHandler) Create(desired *Azurerm_data_lake_analytics_firewall_rule) (*Azurerm_data_lake_analytics_firewall_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_data_lake_analytics_firewall_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_data_lake_analytics_firewall_ruleHandler) Read(externalID string) (*Azurerm_data_lake_analytics_firewall_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_data_lake_analytics_firewall_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_data_lake_analytics_firewall_rule{ Azurerm_data_lake_analytics_firewall_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_data_lake_analytics_firewall_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_data_lake_analytics_firewall_rule", externalID)
}

type Azurerm_data_lake_store struct {

    Azurerm_data_lake_store_id *string `lyra:"ignore"`

    Encryption_state *string

    Encryption_type *string

    Endpoint *string

    Firewall_allow_azure_ips *string

    Firewall_state *string

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

    Tier *string

}

// Azurerm_data_lake_storeHandler ...
type Azurerm_data_lake_storeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_data_lake_storeHandler) Create(desired *Azurerm_data_lake_store) (*Azurerm_data_lake_store, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_data_lake_store", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_data_lake_storeHandler) Read(externalID string) (*Azurerm_data_lake_store, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_data_lake_store", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_data_lake_store{ Azurerm_data_lake_store_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_data_lake_storeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_data_lake_store", externalID)
}

type Azurerm_data_lake_store_file struct {

    Azurerm_data_lake_store_file_id *string `lyra:"ignore"`

    Account_name string

    Local_file_path string

    Remote_file_path string

}

// Azurerm_data_lake_store_fileHandler ...
type Azurerm_data_lake_store_fileHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_data_lake_store_fileHandler) Create(desired *Azurerm_data_lake_store_file) (*Azurerm_data_lake_store_file, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_data_lake_store_file", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_data_lake_store_fileHandler) Read(externalID string) (*Azurerm_data_lake_store_file, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_data_lake_store_file", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_data_lake_store_file{ Azurerm_data_lake_store_file_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_data_lake_store_fileHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_data_lake_store_file", externalID)
}

type Azurerm_data_lake_store_firewall_rule struct {

    Azurerm_data_lake_store_firewall_rule_id *string `lyra:"ignore"`

    Account_name string

    End_ip_address string

    Name string

    Resource_group_name string

    Start_ip_address string

}

// Azurerm_data_lake_store_firewall_ruleHandler ...
type Azurerm_data_lake_store_firewall_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_data_lake_store_firewall_ruleHandler) Create(desired *Azurerm_data_lake_store_firewall_rule) (*Azurerm_data_lake_store_firewall_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_data_lake_store_firewall_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_data_lake_store_firewall_ruleHandler) Read(externalID string) (*Azurerm_data_lake_store_firewall_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_data_lake_store_firewall_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_data_lake_store_firewall_rule{ Azurerm_data_lake_store_firewall_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_data_lake_store_firewall_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_data_lake_store_firewall_rule", externalID)
}

type Azurerm_databricks_workspace struct {

    Azurerm_databricks_workspace_id *string `lyra:"ignore"`

    Location string

    Managed_resource_group_id *string

    Managed_resource_group_name *string

    Name string

    Resource_group_name string

    Sku string

    Tags *map[string]string

}

// Azurerm_databricks_workspaceHandler ...
type Azurerm_databricks_workspaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_databricks_workspaceHandler) Create(desired *Azurerm_databricks_workspace) (*Azurerm_databricks_workspace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_databricks_workspace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_databricks_workspaceHandler) Read(externalID string) (*Azurerm_databricks_workspace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_databricks_workspace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_databricks_workspace{ Azurerm_databricks_workspace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_databricks_workspaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_databricks_workspace", externalID)
}

type Azurerm_dev_test_lab struct {

    Azurerm_dev_test_lab_id *string `lyra:"ignore"`

    Artifacts_storage_account_id *string

    Default_premium_storage_account_id *string

    Default_storage_account_id *string

    Key_vault_id *string

    Location string

    Name string

    Premium_data_disk_storage_account_id *string

    Resource_group_name string

    Storage_type *string

    Tags *map[string]string

    Unique_identifier *string

}

// Azurerm_dev_test_labHandler ...
type Azurerm_dev_test_labHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dev_test_labHandler) Create(desired *Azurerm_dev_test_lab) (*Azurerm_dev_test_lab, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dev_test_lab", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dev_test_labHandler) Read(externalID string) (*Azurerm_dev_test_lab, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dev_test_lab", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dev_test_lab{ Azurerm_dev_test_lab_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dev_test_labHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dev_test_lab", externalID)
}

type Azurerm_dev_test_linux_virtual_machine_gallery_image_reference_668 struct {

    Offer string

    Publisher string

    Sku string

    Version string

}

type Azurerm_dev_test_linux_virtual_machine_inbound_nat_rule_669 struct {

    Backend_port int

    Frontend_port *int

    Protocol string

}

type Azurerm_dev_test_linux_virtual_machine struct {

    Azurerm_dev_test_linux_virtual_machine_id *string `lyra:"ignore"`

    Allow_claim *bool

    Disallow_public_ip_address *bool

    Fqdn *string

    Gallery_image_reference []Azurerm_dev_test_linux_virtual_machine_gallery_image_reference_668

    Inbound_nat_rule *[]Azurerm_dev_test_linux_virtual_machine_inbound_nat_rule_669

    Lab_name string

    Lab_subnet_name string

    Lab_virtual_network_id string

    Location string

    Name string

    Notes *string

    Password *string

    Resource_group_name string

    Size string

    Ssh_key *string

    Storage_type string

    Tags *map[string]string

    Unique_identifier *string

    Username string

}

// Azurerm_dev_test_linux_virtual_machineHandler ...
type Azurerm_dev_test_linux_virtual_machineHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dev_test_linux_virtual_machineHandler) Create(desired *Azurerm_dev_test_linux_virtual_machine) (*Azurerm_dev_test_linux_virtual_machine, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dev_test_linux_virtual_machine", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dev_test_linux_virtual_machineHandler) Read(externalID string) (*Azurerm_dev_test_linux_virtual_machine, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dev_test_linux_virtual_machine", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dev_test_linux_virtual_machine{ Azurerm_dev_test_linux_virtual_machine_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dev_test_linux_virtual_machineHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dev_test_linux_virtual_machine", externalID)
}

type Azurerm_dev_test_policy struct {

    Azurerm_dev_test_policy_id *string `lyra:"ignore"`

    Description *string

    Evaluator_type string

    Fact_data *string

    Lab_name string

    Name string

    Policy_set_name string

    Resource_group_name string

    Tags *map[string]string

    Threshold string

}

// Azurerm_dev_test_policyHandler ...
type Azurerm_dev_test_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dev_test_policyHandler) Create(desired *Azurerm_dev_test_policy) (*Azurerm_dev_test_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dev_test_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dev_test_policyHandler) Read(externalID string) (*Azurerm_dev_test_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dev_test_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dev_test_policy{ Azurerm_dev_test_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dev_test_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dev_test_policy", externalID)
}

type Azurerm_dev_test_virtual_network_subnet_670 struct {

    Name *string

    Use_in_virtual_machine_creation *string

    Use_public_ip_address *string

}

type Azurerm_dev_test_virtual_network struct {

    Azurerm_dev_test_virtual_network_id *string `lyra:"ignore"`

    Description *string

    Lab_name string

    Name string

    Resource_group_name string

    Subnet *[]Azurerm_dev_test_virtual_network_subnet_670

    Tags *map[string]string

    Unique_identifier *string

}

// Azurerm_dev_test_virtual_networkHandler ...
type Azurerm_dev_test_virtual_networkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dev_test_virtual_networkHandler) Create(desired *Azurerm_dev_test_virtual_network) (*Azurerm_dev_test_virtual_network, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dev_test_virtual_network", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dev_test_virtual_networkHandler) Read(externalID string) (*Azurerm_dev_test_virtual_network, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dev_test_virtual_network", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dev_test_virtual_network{ Azurerm_dev_test_virtual_network_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dev_test_virtual_networkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dev_test_virtual_network", externalID)
}

type Azurerm_dev_test_windows_virtual_machine_gallery_image_reference_671 struct {

    Offer string

    Publisher string

    Sku string

    Version string

}

type Azurerm_dev_test_windows_virtual_machine_inbound_nat_rule_672 struct {

    Backend_port int

    Frontend_port *int

    Protocol string

}

type Azurerm_dev_test_windows_virtual_machine struct {

    Azurerm_dev_test_windows_virtual_machine_id *string `lyra:"ignore"`

    Allow_claim *bool

    Disallow_public_ip_address *bool

    Fqdn *string

    Gallery_image_reference []Azurerm_dev_test_windows_virtual_machine_gallery_image_reference_671

    Inbound_nat_rule *[]Azurerm_dev_test_windows_virtual_machine_inbound_nat_rule_672

    Lab_name string

    Lab_subnet_name string

    Lab_virtual_network_id string

    Location string

    Name string

    Notes *string

    Password string

    Resource_group_name string

    Size string

    Storage_type string

    Tags *map[string]string

    Unique_identifier *string

    Username string

}

// Azurerm_dev_test_windows_virtual_machineHandler ...
type Azurerm_dev_test_windows_virtual_machineHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dev_test_windows_virtual_machineHandler) Create(desired *Azurerm_dev_test_windows_virtual_machine) (*Azurerm_dev_test_windows_virtual_machine, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dev_test_windows_virtual_machine", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dev_test_windows_virtual_machineHandler) Read(externalID string) (*Azurerm_dev_test_windows_virtual_machine, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dev_test_windows_virtual_machine", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dev_test_windows_virtual_machine{ Azurerm_dev_test_windows_virtual_machine_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dev_test_windows_virtual_machineHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dev_test_windows_virtual_machine", externalID)
}

type Azurerm_devspace_controller_sku_673 struct {

    Name string

    Tier string

}

type Azurerm_devspace_controller struct {

    Azurerm_devspace_controller_id *string `lyra:"ignore"`

    Data_plane_fqdn *string

    Host_suffix string

    Location string

    Name string

    Resource_group_name string

    Sku []Azurerm_devspace_controller_sku_673

    Tags *map[string]string

    Target_container_host_credentials_base64 string

    Target_container_host_resource_id string

}

// Azurerm_devspace_controllerHandler ...
type Azurerm_devspace_controllerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_devspace_controllerHandler) Create(desired *Azurerm_devspace_controller) (*Azurerm_devspace_controller, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_devspace_controller", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_devspace_controllerHandler) Read(externalID string) (*Azurerm_devspace_controller, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_devspace_controller", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_devspace_controller{ Azurerm_devspace_controller_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_devspace_controllerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_devspace_controller", externalID)
}

type Azurerm_dns_a_record struct {

    Azurerm_dns_a_record_id *string `lyra:"ignore"`

    Name string

    Records []string

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_a_recordHandler ...
type Azurerm_dns_a_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_a_recordHandler) Create(desired *Azurerm_dns_a_record) (*Azurerm_dns_a_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_a_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_a_recordHandler) Read(externalID string) (*Azurerm_dns_a_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_a_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_a_record{ Azurerm_dns_a_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_a_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_a_record", externalID)
}

type Azurerm_dns_aaaa_record struct {

    Azurerm_dns_aaaa_record_id *string `lyra:"ignore"`

    Name string

    Records []string

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_aaaa_recordHandler ...
type Azurerm_dns_aaaa_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_aaaa_recordHandler) Create(desired *Azurerm_dns_aaaa_record) (*Azurerm_dns_aaaa_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_aaaa_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_aaaa_recordHandler) Read(externalID string) (*Azurerm_dns_aaaa_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_aaaa_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_aaaa_record{ Azurerm_dns_aaaa_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_aaaa_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_aaaa_record", externalID)
}

type Azurerm_dns_caa_record_record_674 struct {

    Flags int

    Tag string

    Value string

}

type Azurerm_dns_caa_record struct {

    Azurerm_dns_caa_record_id *string `lyra:"ignore"`

    Name string

    Record []Azurerm_dns_caa_record_record_674

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_caa_recordHandler ...
type Azurerm_dns_caa_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_caa_recordHandler) Create(desired *Azurerm_dns_caa_record) (*Azurerm_dns_caa_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_caa_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_caa_recordHandler) Read(externalID string) (*Azurerm_dns_caa_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_caa_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_caa_record{ Azurerm_dns_caa_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_caa_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_caa_record", externalID)
}

type Azurerm_dns_cname_record struct {

    Azurerm_dns_cname_record_id *string `lyra:"ignore"`

    Name string

    Record string

    Records *string

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_cname_recordHandler ...
type Azurerm_dns_cname_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_cname_recordHandler) Create(desired *Azurerm_dns_cname_record) (*Azurerm_dns_cname_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_cname_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_cname_recordHandler) Read(externalID string) (*Azurerm_dns_cname_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_cname_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_cname_record{ Azurerm_dns_cname_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_cname_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_cname_record", externalID)
}

type Azurerm_dns_mx_record_record_675 struct {

    Exchange string

    Preference string

}

type Azurerm_dns_mx_record struct {

    Azurerm_dns_mx_record_id *string `lyra:"ignore"`

    Name string

    Record []Azurerm_dns_mx_record_record_675

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_mx_recordHandler ...
type Azurerm_dns_mx_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_mx_recordHandler) Create(desired *Azurerm_dns_mx_record) (*Azurerm_dns_mx_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_mx_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_mx_recordHandler) Read(externalID string) (*Azurerm_dns_mx_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_mx_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_mx_record{ Azurerm_dns_mx_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_mx_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_mx_record", externalID)
}

type Azurerm_dns_ns_record_record_676 struct {

    Nsdname string

}

type Azurerm_dns_ns_record struct {

    Azurerm_dns_ns_record_id *string `lyra:"ignore"`

    Name string

    Record *[]Azurerm_dns_ns_record_record_676

    Records *[]string

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_ns_recordHandler ...
type Azurerm_dns_ns_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_ns_recordHandler) Create(desired *Azurerm_dns_ns_record) (*Azurerm_dns_ns_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_ns_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_ns_recordHandler) Read(externalID string) (*Azurerm_dns_ns_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_ns_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_ns_record{ Azurerm_dns_ns_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_ns_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_ns_record", externalID)
}

type Azurerm_dns_ptr_record struct {

    Azurerm_dns_ptr_record_id *string `lyra:"ignore"`

    Name string

    Records []string

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_ptr_recordHandler ...
type Azurerm_dns_ptr_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_ptr_recordHandler) Create(desired *Azurerm_dns_ptr_record) (*Azurerm_dns_ptr_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_ptr_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_ptr_recordHandler) Read(externalID string) (*Azurerm_dns_ptr_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_ptr_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_ptr_record{ Azurerm_dns_ptr_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_ptr_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_ptr_record", externalID)
}

type Azurerm_dns_srv_record_record_677 struct {

    Port int

    Priority int

    Target string

    Weight int

}

type Azurerm_dns_srv_record struct {

    Azurerm_dns_srv_record_id *string `lyra:"ignore"`

    Name string

    Record []Azurerm_dns_srv_record_record_677

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_srv_recordHandler ...
type Azurerm_dns_srv_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_srv_recordHandler) Create(desired *Azurerm_dns_srv_record) (*Azurerm_dns_srv_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_srv_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_srv_recordHandler) Read(externalID string) (*Azurerm_dns_srv_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_srv_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_srv_record{ Azurerm_dns_srv_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_srv_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_srv_record", externalID)
}

type Azurerm_dns_txt_record_record_678 struct {

    Value string

}

type Azurerm_dns_txt_record struct {

    Azurerm_dns_txt_record_id *string `lyra:"ignore"`

    Name string

    Record []Azurerm_dns_txt_record_record_678

    Resource_group_name string

    Tags *map[string]string

    Ttl int

    Zone_name string

}

// Azurerm_dns_txt_recordHandler ...
type Azurerm_dns_txt_recordHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_txt_recordHandler) Create(desired *Azurerm_dns_txt_record) (*Azurerm_dns_txt_record, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_txt_record", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_txt_recordHandler) Read(externalID string) (*Azurerm_dns_txt_record, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_txt_record", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_txt_record{ Azurerm_dns_txt_record_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_txt_recordHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_txt_record", externalID)
}

type Azurerm_dns_zone struct {

    Azurerm_dns_zone_id *string `lyra:"ignore"`

    Max_number_of_record_sets *int

    Name string

    Name_servers *[]string

    Number_of_record_sets *int

    Registration_virtual_network_ids *[]string

    Resolution_virtual_network_ids *[]string

    Resource_group_name string

    Tags *map[string]string

    Zone_type *string

}

// Azurerm_dns_zoneHandler ...
type Azurerm_dns_zoneHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_dns_zoneHandler) Create(desired *Azurerm_dns_zone) (*Azurerm_dns_zone, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_dns_zone", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_dns_zoneHandler) Read(externalID string) (*Azurerm_dns_zone, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_dns_zone", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_dns_zone{ Azurerm_dns_zone_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_dns_zoneHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_dns_zone", externalID)
}

type Azurerm_eventgrid_topic struct {

    Azurerm_eventgrid_topic_id *string `lyra:"ignore"`

    Endpoint *string

    Location string

    Name string

    Primary_access_key *string

    Resource_group_name string

    Secondary_access_key *string

    Tags *map[string]string

}

// Azurerm_eventgrid_topicHandler ...
type Azurerm_eventgrid_topicHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_eventgrid_topicHandler) Create(desired *Azurerm_eventgrid_topic) (*Azurerm_eventgrid_topic, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_eventgrid_topic", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_eventgrid_topicHandler) Read(externalID string) (*Azurerm_eventgrid_topic, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_eventgrid_topic", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_eventgrid_topic{ Azurerm_eventgrid_topic_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_eventgrid_topicHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_eventgrid_topic", externalID)
}

type Azurerm_eventhub_capture_description_679_destination_680 struct {

    Archive_name_format string

    Blob_container_name string

    Name string

    Storage_account_id string

}

type Azurerm_eventhub_capture_description_679 struct {

    Destination []Azurerm_eventhub_capture_description_679_destination_680

    Enabled bool

    Encoding string

    Interval_in_seconds *int

    Size_limit_in_bytes *int

}

type Azurerm_eventhub struct {

    Azurerm_eventhub_id *string `lyra:"ignore"`

    Capture_description *[]Azurerm_eventhub_capture_description_679

    Location *string

    Message_retention int

    Name string

    Namespace_name string

    Partition_count int

    Partition_ids *[]string

    Resource_group_name string

}

// Azurerm_eventhubHandler ...
type Azurerm_eventhubHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_eventhubHandler) Create(desired *Azurerm_eventhub) (*Azurerm_eventhub, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_eventhub", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_eventhubHandler) Read(externalID string) (*Azurerm_eventhub, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_eventhub", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_eventhub{ Azurerm_eventhub_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_eventhubHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_eventhub", externalID)
}

type Azurerm_eventhub_authorization_rule struct {

    Azurerm_eventhub_authorization_rule_id *string `lyra:"ignore"`

    Eventhub_name string

    Listen *bool

    Location *string

    Manage *bool

    Name string

    Namespace_name string

    Primary_connection_string *string

    Primary_key *string

    Resource_group_name string

    Secondary_connection_string *string

    Secondary_key *string

    Send *bool

}

// Azurerm_eventhub_authorization_ruleHandler ...
type Azurerm_eventhub_authorization_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_eventhub_authorization_ruleHandler) Create(desired *Azurerm_eventhub_authorization_rule) (*Azurerm_eventhub_authorization_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_eventhub_authorization_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_eventhub_authorization_ruleHandler) Read(externalID string) (*Azurerm_eventhub_authorization_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_eventhub_authorization_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_eventhub_authorization_rule{ Azurerm_eventhub_authorization_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_eventhub_authorization_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_eventhub_authorization_rule", externalID)
}

type Azurerm_eventhub_consumer_group struct {

    Azurerm_eventhub_consumer_group_id *string `lyra:"ignore"`

    Eventhub_name string

    Location *string

    Name string

    Namespace_name string

    Resource_group_name string

    User_metadata *string

}

// Azurerm_eventhub_consumer_groupHandler ...
type Azurerm_eventhub_consumer_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_eventhub_consumer_groupHandler) Create(desired *Azurerm_eventhub_consumer_group) (*Azurerm_eventhub_consumer_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_eventhub_consumer_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_eventhub_consumer_groupHandler) Read(externalID string) (*Azurerm_eventhub_consumer_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_eventhub_consumer_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_eventhub_consumer_group{ Azurerm_eventhub_consumer_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_eventhub_consumer_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_eventhub_consumer_group", externalID)
}

type Azurerm_eventhub_namespace struct {

    Azurerm_eventhub_namespace_id *string `lyra:"ignore"`

    Auto_inflate_enabled *bool

    Capacity *int

    Default_primary_connection_string *string

    Default_primary_key *string

    Default_secondary_connection_string *string

    Default_secondary_key *string

    Kafka_enabled *bool

    Location string

    Maximum_throughput_units *int

    Name string

    Resource_group_name string

    Sku string

    Tags *map[string]string

}

// Azurerm_eventhub_namespaceHandler ...
type Azurerm_eventhub_namespaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_eventhub_namespaceHandler) Create(desired *Azurerm_eventhub_namespace) (*Azurerm_eventhub_namespace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_eventhub_namespace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_eventhub_namespaceHandler) Read(externalID string) (*Azurerm_eventhub_namespace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_eventhub_namespace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_eventhub_namespace{ Azurerm_eventhub_namespace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_eventhub_namespaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_eventhub_namespace", externalID)
}

type Azurerm_eventhub_namespace_authorization_rule struct {

    Azurerm_eventhub_namespace_authorization_rule_id *string `lyra:"ignore"`

    Listen *bool

    Location *string

    Manage *bool

    Name string

    Namespace_name string

    Primary_connection_string *string

    Primary_key *string

    Resource_group_name string

    Secondary_connection_string *string

    Secondary_key *string

    Send *bool

}

// Azurerm_eventhub_namespace_authorization_ruleHandler ...
type Azurerm_eventhub_namespace_authorization_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_eventhub_namespace_authorization_ruleHandler) Create(desired *Azurerm_eventhub_namespace_authorization_rule) (*Azurerm_eventhub_namespace_authorization_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_eventhub_namespace_authorization_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_eventhub_namespace_authorization_ruleHandler) Read(externalID string) (*Azurerm_eventhub_namespace_authorization_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_eventhub_namespace_authorization_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_eventhub_namespace_authorization_rule{ Azurerm_eventhub_namespace_authorization_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_eventhub_namespace_authorization_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_eventhub_namespace_authorization_rule", externalID)
}

type Azurerm_express_route_circuit_sku_681 struct {

    Family string

    Tier string

}

type Azurerm_express_route_circuit struct {

    Azurerm_express_route_circuit_id *string `lyra:"ignore"`

    Allow_classic_operations *bool

    Bandwidth_in_mbps int

    Location string

    Name string

    Peering_location string

    Resource_group_name string

    Service_key *string

    Service_provider_name string

    Service_provider_provisioning_state *string

    Sku []Azurerm_express_route_circuit_sku_681

    Tags *map[string]string

}

// Azurerm_express_route_circuitHandler ...
type Azurerm_express_route_circuitHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_express_route_circuitHandler) Create(desired *Azurerm_express_route_circuit) (*Azurerm_express_route_circuit, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_express_route_circuit", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_express_route_circuitHandler) Read(externalID string) (*Azurerm_express_route_circuit, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_express_route_circuit", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_express_route_circuit{ Azurerm_express_route_circuit_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_express_route_circuitHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_express_route_circuit", externalID)
}

type Azurerm_express_route_circuit_authorization struct {

    Azurerm_express_route_circuit_authorization_id *string `lyra:"ignore"`

    Authorization_key *string

    Authorization_use_status *string

    Express_route_circuit_name string

    Name string

    Resource_group_name string

}

// Azurerm_express_route_circuit_authorizationHandler ...
type Azurerm_express_route_circuit_authorizationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_express_route_circuit_authorizationHandler) Create(desired *Azurerm_express_route_circuit_authorization) (*Azurerm_express_route_circuit_authorization, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_express_route_circuit_authorization", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_express_route_circuit_authorizationHandler) Read(externalID string) (*Azurerm_express_route_circuit_authorization, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_express_route_circuit_authorization", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_express_route_circuit_authorization{ Azurerm_express_route_circuit_authorization_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_express_route_circuit_authorizationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_express_route_circuit_authorization", externalID)
}

type Azurerm_express_route_circuit_peering_microsoft_peering_config_682 struct {

    Advertised_public_prefixes []string

}

type Azurerm_express_route_circuit_peering struct {

    Azurerm_express_route_circuit_peering_id *string `lyra:"ignore"`

    Azure_asn *int

    Express_route_circuit_name string

    Microsoft_peering_config *[]Azurerm_express_route_circuit_peering_microsoft_peering_config_682

    Peer_asn *int

    Peering_type string

    Primary_azure_port *string

    Primary_peer_address_prefix string

    Resource_group_name string

    Secondary_azure_port *string

    Secondary_peer_address_prefix string

    Shared_key *string

    Vlan_id int

}

// Azurerm_express_route_circuit_peeringHandler ...
type Azurerm_express_route_circuit_peeringHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_express_route_circuit_peeringHandler) Create(desired *Azurerm_express_route_circuit_peering) (*Azurerm_express_route_circuit_peering, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_express_route_circuit_peering", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_express_route_circuit_peeringHandler) Read(externalID string) (*Azurerm_express_route_circuit_peering, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_express_route_circuit_peering", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_express_route_circuit_peering{ Azurerm_express_route_circuit_peering_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_express_route_circuit_peeringHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_express_route_circuit_peering", externalID)
}

type Azurerm_firewall_ip_configuration_683 struct {

    Internal_public_ip_address_id *string

    Name string

    Private_ip_address *string

    Public_ip_address_id *string

    Subnet_id string

}

type Azurerm_firewall struct {

    Azurerm_firewall_id *string `lyra:"ignore"`

    Ip_configuration []Azurerm_firewall_ip_configuration_683

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_firewallHandler ...
type Azurerm_firewallHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_firewallHandler) Create(desired *Azurerm_firewall) (*Azurerm_firewall, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_firewall", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_firewallHandler) Read(externalID string) (*Azurerm_firewall, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_firewall", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_firewall{ Azurerm_firewall_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_firewallHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_firewall", externalID)
}

type Azurerm_firewall_application_rule_collection_rule_684_protocol_685 struct {

    Port *int

    Type string

}

type Azurerm_firewall_application_rule_collection_rule_684 struct {

    Description *string

    Fqdn_tags *[]string

    Name string

    Protocol *[]Azurerm_firewall_application_rule_collection_rule_684_protocol_685

    Source_addresses []string

    Target_fqdns *[]string

}

type Azurerm_firewall_application_rule_collection struct {

    Azurerm_firewall_application_rule_collection_id *string `lyra:"ignore"`

    Action string

    Azure_firewall_name string

    Name string

    Priority int

    Resource_group_name string

    Rule []Azurerm_firewall_application_rule_collection_rule_684

}

// Azurerm_firewall_application_rule_collectionHandler ...
type Azurerm_firewall_application_rule_collectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_firewall_application_rule_collectionHandler) Create(desired *Azurerm_firewall_application_rule_collection) (*Azurerm_firewall_application_rule_collection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_firewall_application_rule_collection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_firewall_application_rule_collectionHandler) Read(externalID string) (*Azurerm_firewall_application_rule_collection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_firewall_application_rule_collection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_firewall_application_rule_collection{ Azurerm_firewall_application_rule_collection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_firewall_application_rule_collectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_firewall_application_rule_collection", externalID)
}

type Azurerm_firewall_network_rule_collection_rule_686 struct {

    Description *string

    Destination_addresses []string

    Destination_ports []string

    Name string

    Protocols []string

    Source_addresses []string

}

type Azurerm_firewall_network_rule_collection struct {

    Azurerm_firewall_network_rule_collection_id *string `lyra:"ignore"`

    Action string

    Azure_firewall_name string

    Name string

    Priority int

    Resource_group_name string

    Rule []Azurerm_firewall_network_rule_collection_rule_686

}

// Azurerm_firewall_network_rule_collectionHandler ...
type Azurerm_firewall_network_rule_collectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_firewall_network_rule_collectionHandler) Create(desired *Azurerm_firewall_network_rule_collection) (*Azurerm_firewall_network_rule_collection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_firewall_network_rule_collection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_firewall_network_rule_collectionHandler) Read(externalID string) (*Azurerm_firewall_network_rule_collection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_firewall_network_rule_collection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_firewall_network_rule_collection{ Azurerm_firewall_network_rule_collection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_firewall_network_rule_collectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_firewall_network_rule_collection", externalID)
}

type Azurerm_function_app_connection_string_687 struct {

    Name string

    Type string

    Value string

}

type Azurerm_function_app_identity_688 struct {

    Principal_id *string

    Tenant_id *string

    Type string

}

type Azurerm_function_app_site_config_689 struct {

    Always_on *bool

    Use_32_bit_worker_process *bool

    Websockets_enabled *bool

}

type Azurerm_function_app_site_credential_690 struct {

    Password *string

    Username *string

}

type Azurerm_function_app struct {

    Azurerm_function_app_id *string `lyra:"ignore"`

    App_service_plan_id string

    App_settings *map[string]string

    Client_affinity_enabled *bool

    Connection_string *[]Azurerm_function_app_connection_string_687

    Default_hostname *string

    Enable_builtin_logging *bool

    Enabled *bool

    Https_only *bool

    Identity *[]Azurerm_function_app_identity_688

    Location string

    Name string

    Outbound_ip_addresses *string

    Resource_group_name string

    Site_config *[]Azurerm_function_app_site_config_689

    Site_credential *[]Azurerm_function_app_site_credential_690

    Storage_connection_string string

    Tags *map[string]string

    Version *string

}

// Azurerm_function_appHandler ...
type Azurerm_function_appHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_function_appHandler) Create(desired *Azurerm_function_app) (*Azurerm_function_app, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_function_app", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_function_appHandler) Read(externalID string) (*Azurerm_function_app, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_function_app", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_function_app{ Azurerm_function_app_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_function_appHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_function_app", externalID)
}

type Azurerm_image_data_disk_691 struct {

    Blob_uri *string

    Caching *string

    Lun *int

    Managed_disk_id *string

    Size_gb *int

}

type Azurerm_image_os_disk_692 struct {

    Blob_uri *string

    Caching *string

    Managed_disk_id *string

    Os_state *string

    Os_type *string

    Size_gb *int

}

type Azurerm_image struct {

    Azurerm_image_id *string `lyra:"ignore"`

    Data_disk *[]Azurerm_image_data_disk_691

    Location string

    Name string

    Os_disk *[]Azurerm_image_os_disk_692

    Resource_group_name string

    Source_virtual_machine_id *string

    Tags *map[string]string

}

// Azurerm_imageHandler ...
type Azurerm_imageHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_imageHandler) Create(desired *Azurerm_image) (*Azurerm_image, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_image", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_imageHandler) Read(externalID string) (*Azurerm_image, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_image", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_image{ Azurerm_image_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_imageHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_image", externalID)
}

type Azurerm_iothub_endpoint_693 struct {

    Batch_frequency_in_seconds *int

    Connection_string string

    Container_name *string

    Encoding *string

    File_name_format *string

    Max_chunk_size_in_bytes *int

    Name string

    Type string

}

type Azurerm_iothub_route_694 struct {

    Condition *string

    Enabled bool

    Endpoint_names []string

    Name string

    Source string

}

type Azurerm_iothub_shared_access_policy_695 struct {

    Key_name *string

    Permissions *string

    Primary_key *string

    Secondary_key *string

}

type Azurerm_iothub_sku_696 struct {

    Capacity int

    Name string

    Tier string

}

type Azurerm_iothub struct {

    Azurerm_iothub_id *string `lyra:"ignore"`

    Endpoint *[]Azurerm_iothub_endpoint_693

    Event_hub_events_endpoint *string

    Event_hub_events_path *string

    Event_hub_operations_endpoint *string

    Event_hub_operations_path *string

    Hostname *string

    Location string

    Name string

    Resource_group_name string

    Route *[]Azurerm_iothub_route_694

    Shared_access_policy *[]Azurerm_iothub_shared_access_policy_695

    Sku []Azurerm_iothub_sku_696

    Tags *map[string]string

    Type *string

}

// Azurerm_iothubHandler ...
type Azurerm_iothubHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_iothubHandler) Create(desired *Azurerm_iothub) (*Azurerm_iothub, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_iothub", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_iothubHandler) Read(externalID string) (*Azurerm_iothub, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_iothub", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_iothub{ Azurerm_iothub_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_iothubHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_iothub", externalID)
}

type Azurerm_iothub_consumer_group struct {

    Azurerm_iothub_consumer_group_id *string `lyra:"ignore"`

    Eventhub_endpoint_name string

    Iothub_name string

    Name string

    Resource_group_name string

}

// Azurerm_iothub_consumer_groupHandler ...
type Azurerm_iothub_consumer_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_iothub_consumer_groupHandler) Create(desired *Azurerm_iothub_consumer_group) (*Azurerm_iothub_consumer_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_iothub_consumer_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_iothub_consumer_groupHandler) Read(externalID string) (*Azurerm_iothub_consumer_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_iothub_consumer_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_iothub_consumer_group{ Azurerm_iothub_consumer_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_iothub_consumer_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_iothub_consumer_group", externalID)
}

type Azurerm_key_vault_access_policy_697 struct {

    Application_id *string

    Certificate_permissions *[]string

    Key_permissions *[]string

    Object_id string

    Secret_permissions *[]string

    Tenant_id string

}

type Azurerm_key_vault_network_acls_698 struct {

    Bypass string

    Default_action string

    Ip_rules *[]string

    Virtual_network_subnet_ids *[]string

}

type Azurerm_key_vault_sku_699 struct {

    Name string

}

type Azurerm_key_vault struct {

    Azurerm_key_vault_id *string `lyra:"ignore"`

    Access_policy *[]Azurerm_key_vault_access_policy_697

    Enabled_for_deployment *bool

    Enabled_for_disk_encryption *bool

    Enabled_for_template_deployment *bool

    Location string

    Name string

    Network_acls *[]Azurerm_key_vault_network_acls_698

    Resource_group_name string

    Sku []Azurerm_key_vault_sku_699

    Tags *map[string]string

    Tenant_id string

    Vault_uri *string

}

// Azurerm_key_vaultHandler ...
type Azurerm_key_vaultHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_key_vaultHandler) Create(desired *Azurerm_key_vault) (*Azurerm_key_vault, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_key_vault", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_key_vaultHandler) Read(externalID string) (*Azurerm_key_vault, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_key_vault", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_key_vault{ Azurerm_key_vault_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_key_vaultHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_key_vault", externalID)
}

type Azurerm_key_vault_access_policy struct {

    Azurerm_key_vault_access_policy_id *string `lyra:"ignore"`

    Application_id *string

    Certificate_permissions *[]string

    Key_permissions *[]string

    Object_id string

    Resource_group_name string

    Secret_permissions *[]string

    Tenant_id string

    Vault_name string

}

// Azurerm_key_vault_access_policyHandler ...
type Azurerm_key_vault_access_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_key_vault_access_policyHandler) Create(desired *Azurerm_key_vault_access_policy) (*Azurerm_key_vault_access_policy, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_key_vault_access_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_key_vault_access_policyHandler) Read(externalID string) (*Azurerm_key_vault_access_policy, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_key_vault_access_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_key_vault_access_policy{ Azurerm_key_vault_access_policy_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_key_vault_access_policyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_key_vault_access_policy", externalID)
}

type Azurerm_key_vault_certificate_certificate_700 struct {

    Contents string

    Password *string

}

type Azurerm_key_vault_certificate_certificate_policy_701_issuer_parameters_702 struct {

    Name string

}

type Azurerm_key_vault_certificate_certificate_policy_701_key_properties_703 struct {

    Exportable bool

    Key_size int

    Key_type string

    Reuse_key bool

}

type Azurerm_key_vault_certificate_certificate_policy_701_lifetime_action_704_action_705 struct {

    Action_type string

}

type Azurerm_key_vault_certificate_certificate_policy_701_lifetime_action_704_trigger_706 struct {

    Days_before_expiry *int

    Lifetime_percentage *int

}

type Azurerm_key_vault_certificate_certificate_policy_701_lifetime_action_704 struct {

    Action []Azurerm_key_vault_certificate_certificate_policy_701_lifetime_action_704_action_705

    Trigger []Azurerm_key_vault_certificate_certificate_policy_701_lifetime_action_704_trigger_706

}

type Azurerm_key_vault_certificate_certificate_policy_701_secret_properties_707 struct {

    Content_type string

}

type Azurerm_key_vault_certificate_certificate_policy_701_x509_certificate_properties_708_subject_alternative_names_709 struct {

    Dns_names *[]string

    Emails *[]string

    Upns *[]string

}

type Azurerm_key_vault_certificate_certificate_policy_701_x509_certificate_properties_708 struct {

    Extended_key_usage *[]string

    Key_usage []string

    Subject string

    Subject_alternative_names *[]Azurerm_key_vault_certificate_certificate_policy_701_x509_certificate_properties_708_subject_alternative_names_709

    Validity_in_months int

}

type Azurerm_key_vault_certificate_certificate_policy_701 struct {

    Issuer_parameters []Azurerm_key_vault_certificate_certificate_policy_701_issuer_parameters_702

    Key_properties []Azurerm_key_vault_certificate_certificate_policy_701_key_properties_703

    Lifetime_action *[]Azurerm_key_vault_certificate_certificate_policy_701_lifetime_action_704

    Secret_properties []Azurerm_key_vault_certificate_certificate_policy_701_secret_properties_707

    X509_certificate_properties *[]Azurerm_key_vault_certificate_certificate_policy_701_x509_certificate_properties_708

}

type Azurerm_key_vault_certificate struct {

    Azurerm_key_vault_certificate_id *string `lyra:"ignore"`

    Certificate *[]Azurerm_key_vault_certificate_certificate_700

    Certificate_data *string

    Certificate_policy []Azurerm_key_vault_certificate_certificate_policy_701

    Name string

    Secret_id *string

    Tags *map[string]string

    Thumbprint *string

    Vault_uri string

    Version *string

}

// Azurerm_key_vault_certificateHandler ...
type Azurerm_key_vault_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_key_vault_certificateHandler) Create(desired *Azurerm_key_vault_certificate) (*Azurerm_key_vault_certificate, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_key_vault_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_key_vault_certificateHandler) Read(externalID string) (*Azurerm_key_vault_certificate, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_key_vault_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_key_vault_certificate{ Azurerm_key_vault_certificate_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_key_vault_certificateHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_key_vault_certificate", externalID)
}

type Azurerm_key_vault_key struct {

    Azurerm_key_vault_key_id *string `lyra:"ignore"`

    E *string

    Key_opts []string

    Key_size int

    Key_type string

    N *string

    Name string

    Tags *map[string]string

    Vault_uri string

    Version *string

}

// Azurerm_key_vault_keyHandler ...
type Azurerm_key_vault_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_key_vault_keyHandler) Create(desired *Azurerm_key_vault_key) (*Azurerm_key_vault_key, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_key_vault_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_key_vault_keyHandler) Read(externalID string) (*Azurerm_key_vault_key, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_key_vault_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_key_vault_key{ Azurerm_key_vault_key_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_key_vault_keyHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_key_vault_key", externalID)
}

type Azurerm_key_vault_secret struct {

    Azurerm_key_vault_secret_id *string `lyra:"ignore"`

    Content_type *string

    Name string

    Tags *map[string]string

    Value string

    Vault_uri string

    Version *string

}

// Azurerm_key_vault_secretHandler ...
type Azurerm_key_vault_secretHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_key_vault_secretHandler) Create(desired *Azurerm_key_vault_secret) (*Azurerm_key_vault_secret, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_key_vault_secret", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_key_vault_secretHandler) Read(externalID string) (*Azurerm_key_vault_secret, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_key_vault_secret", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_key_vault_secret{ Azurerm_key_vault_secret_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_key_vault_secretHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_key_vault_secret", externalID)
}

type Azurerm_kubernetes_cluster_addon_profile_710_aci_connector_linux_711 struct {

    Enabled bool

    Subnet_name string

}

type Azurerm_kubernetes_cluster_addon_profile_710_http_application_routing_712 struct {

    Enabled bool

    Http_application_routing_zone_name *string

}

type Azurerm_kubernetes_cluster_addon_profile_710_oms_agent_713 struct {

    Enabled bool

    Log_analytics_workspace_id string

}

type Azurerm_kubernetes_cluster_addon_profile_710 struct {

    Aci_connector_linux *[]Azurerm_kubernetes_cluster_addon_profile_710_aci_connector_linux_711

    Http_application_routing *[]Azurerm_kubernetes_cluster_addon_profile_710_http_application_routing_712

    Oms_agent *[]Azurerm_kubernetes_cluster_addon_profile_710_oms_agent_713

}

type Azurerm_kubernetes_cluster_agent_pool_profile_714 struct {

    Count *int

    Dns_prefix *string

    Fqdn *string

    Max_pods *int

    Name string

    Os_disk_size_gb *int

    Os_type *string

    Vm_size string

    Vnet_subnet_id *string

}

type Azurerm_kubernetes_cluster_kube_admin_config_715 struct {

    Client_certificate *string

    Client_key *string

    Cluster_ca_certificate *string

    Host *string

    Password *string

    Username *string

}

type Azurerm_kubernetes_cluster_kube_config_716 struct {

    Client_certificate *string

    Client_key *string

    Cluster_ca_certificate *string

    Host *string

    Password *string

    Username *string

}

type Azurerm_kubernetes_cluster_linux_profile_717_ssh_key_718 struct {

    Key_data string

}

type Azurerm_kubernetes_cluster_linux_profile_717 struct {

    Admin_username string

    Ssh_key []Azurerm_kubernetes_cluster_linux_profile_717_ssh_key_718

}

type Azurerm_kubernetes_cluster_network_profile_719 struct {

    Dns_service_ip *string

    Docker_bridge_cidr *string

    Network_plugin string

    Pod_cidr *string

    Service_cidr *string

}

type Azurerm_kubernetes_cluster_role_based_access_control_720_azure_active_directory_721 struct {

    Client_app_id string

    Server_app_id string

    Server_app_secret string

    Tenant_id *string

}

type Azurerm_kubernetes_cluster_role_based_access_control_720 struct {

    Azure_active_directory *[]Azurerm_kubernetes_cluster_role_based_access_control_720_azure_active_directory_721

    Enabled bool

}

type Azurerm_kubernetes_cluster_service_principal_722 struct {

    Client_id string

    Client_secret string

}

type Azurerm_kubernetes_cluster struct {

    Azurerm_kubernetes_cluster_id *string `lyra:"ignore"`

    Addon_profile *[]Azurerm_kubernetes_cluster_addon_profile_710

    Agent_pool_profile []Azurerm_kubernetes_cluster_agent_pool_profile_714

    Dns_prefix string

    Fqdn *string

    Kube_admin_config *[]Azurerm_kubernetes_cluster_kube_admin_config_715

    Kube_admin_config_raw *string

    Kube_config *[]Azurerm_kubernetes_cluster_kube_config_716

    Kube_config_raw *string

    Kubernetes_version *string

    Linux_profile *[]Azurerm_kubernetes_cluster_linux_profile_717

    Location string

    Name string

    Network_profile *[]Azurerm_kubernetes_cluster_network_profile_719

    Node_resource_group *string

    Resource_group_name string

    Role_based_access_control *[]Azurerm_kubernetes_cluster_role_based_access_control_720

    Service_principal []Azurerm_kubernetes_cluster_service_principal_722

    Tags *map[string]string

}

// Azurerm_kubernetes_clusterHandler ...
type Azurerm_kubernetes_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_kubernetes_clusterHandler) Create(desired *Azurerm_kubernetes_cluster) (*Azurerm_kubernetes_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_kubernetes_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_kubernetes_clusterHandler) Read(externalID string) (*Azurerm_kubernetes_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_kubernetes_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_kubernetes_cluster{ Azurerm_kubernetes_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_kubernetes_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_kubernetes_cluster", externalID)
}

type Azurerm_lb_frontend_ip_configuration_723 struct {

    Inbound_nat_rules *[]string

    Load_balancer_rules *[]string

    Name string

    Private_ip_address *string

    Private_ip_address_allocation *string

    Public_ip_address_id *string

    Subnet_id *string

    Zones *[]string

}

type Azurerm_lb struct {

    Azurerm_lb_id *string `lyra:"ignore"`

    Frontend_ip_configuration *[]Azurerm_lb_frontend_ip_configuration_723

    Location string

    Name string

    Private_ip_address *string

    Private_ip_addresses *[]string

    Resource_group_name string

    Sku *string

    Tags *map[string]string

}

// Azurerm_lbHandler ...
type Azurerm_lbHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_lbHandler) Create(desired *Azurerm_lb) (*Azurerm_lb, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_lb", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_lbHandler) Read(externalID string) (*Azurerm_lb, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_lb", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_lb{ Azurerm_lb_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_lbHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_lb", externalID)
}

type Azurerm_lb_backend_address_pool struct {

    Azurerm_lb_backend_address_pool_id *string `lyra:"ignore"`

    Backend_ip_configurations *[]string

    Load_balancing_rules *[]string

    Loadbalancer_id string

    Location *string

    Name string

    Resource_group_name string

}

// Azurerm_lb_backend_address_poolHandler ...
type Azurerm_lb_backend_address_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_lb_backend_address_poolHandler) Create(desired *Azurerm_lb_backend_address_pool) (*Azurerm_lb_backend_address_pool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_lb_backend_address_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_lb_backend_address_poolHandler) Read(externalID string) (*Azurerm_lb_backend_address_pool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_lb_backend_address_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_lb_backend_address_pool{ Azurerm_lb_backend_address_pool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_lb_backend_address_poolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_lb_backend_address_pool", externalID)
}

type Azurerm_lb_nat_pool struct {

    Azurerm_lb_nat_pool_id *string `lyra:"ignore"`

    Backend_port int

    Frontend_ip_configuration_id *string

    Frontend_ip_configuration_name string

    Frontend_port_end int

    Frontend_port_start int

    Loadbalancer_id string

    Location *string

    Name string

    Protocol string

    Resource_group_name string

}

// Azurerm_lb_nat_poolHandler ...
type Azurerm_lb_nat_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_lb_nat_poolHandler) Create(desired *Azurerm_lb_nat_pool) (*Azurerm_lb_nat_pool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_lb_nat_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_lb_nat_poolHandler) Read(externalID string) (*Azurerm_lb_nat_pool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_lb_nat_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_lb_nat_pool{ Azurerm_lb_nat_pool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_lb_nat_poolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_lb_nat_pool", externalID)
}

type Azurerm_lb_nat_rule struct {

    Azurerm_lb_nat_rule_id *string `lyra:"ignore"`

    Backend_ip_configuration_id *string

    Backend_port int

    Enable_floating_ip *bool

    Frontend_ip_configuration_id *string

    Frontend_ip_configuration_name string

    Frontend_port int

    Loadbalancer_id string

    Location *string

    Name string

    Protocol string

    Resource_group_name string

}

// Azurerm_lb_nat_ruleHandler ...
type Azurerm_lb_nat_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_lb_nat_ruleHandler) Create(desired *Azurerm_lb_nat_rule) (*Azurerm_lb_nat_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_lb_nat_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_lb_nat_ruleHandler) Read(externalID string) (*Azurerm_lb_nat_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_lb_nat_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_lb_nat_rule{ Azurerm_lb_nat_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_lb_nat_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_lb_nat_rule", externalID)
}

type Azurerm_lb_probe struct {

    Azurerm_lb_probe_id *string `lyra:"ignore"`

    Interval_in_seconds *int

    Load_balancer_rules *[]string

    Loadbalancer_id string

    Location *string

    Name string

    Number_of_probes *int

    Port int

    Protocol *string

    Request_path *string

    Resource_group_name string

}

// Azurerm_lb_probeHandler ...
type Azurerm_lb_probeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_lb_probeHandler) Create(desired *Azurerm_lb_probe) (*Azurerm_lb_probe, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_lb_probe", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_lb_probeHandler) Read(externalID string) (*Azurerm_lb_probe, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_lb_probe", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_lb_probe{ Azurerm_lb_probe_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_lb_probeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_lb_probe", externalID)
}

type Azurerm_lb_rule struct {

    Azurerm_lb_rule_id *string `lyra:"ignore"`

    Backend_address_pool_id *string

    Backend_port int

    Enable_floating_ip *bool

    Frontend_ip_configuration_id *string

    Frontend_ip_configuration_name string

    Frontend_port int

    Idle_timeout_in_minutes *int

    Load_distribution *string

    Loadbalancer_id string

    Location *string

    Name string

    Probe_id *string

    Protocol string

    Resource_group_name string

}

// Azurerm_lb_ruleHandler ...
type Azurerm_lb_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_lb_ruleHandler) Create(desired *Azurerm_lb_rule) (*Azurerm_lb_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_lb_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_lb_ruleHandler) Read(externalID string) (*Azurerm_lb_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_lb_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_lb_rule{ Azurerm_lb_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_lb_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_lb_rule", externalID)
}

type Azurerm_local_network_gateway_bgp_settings_724 struct {

    Asn int

    Bgp_peering_address string

    Peer_weight *int

}

type Azurerm_local_network_gateway struct {

    Azurerm_local_network_gateway_id *string `lyra:"ignore"`

    Address_space []string

    Bgp_settings *[]Azurerm_local_network_gateway_bgp_settings_724

    Gateway_address string

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_local_network_gatewayHandler ...
type Azurerm_local_network_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_local_network_gatewayHandler) Create(desired *Azurerm_local_network_gateway) (*Azurerm_local_network_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_local_network_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_local_network_gatewayHandler) Read(externalID string) (*Azurerm_local_network_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_local_network_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_local_network_gateway{ Azurerm_local_network_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_local_network_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_local_network_gateway", externalID)
}

type Azurerm_log_analytics_solution_plan_725 struct {

    Name *string

    Product string

    Promotion_code *string

    Publisher string

}

type Azurerm_log_analytics_solution struct {

    Azurerm_log_analytics_solution_id *string `lyra:"ignore"`

    Location string

    Plan []Azurerm_log_analytics_solution_plan_725

    Resource_group_name string

    Solution_name string

    Workspace_name string

    Workspace_resource_id string

}

// Azurerm_log_analytics_solutionHandler ...
type Azurerm_log_analytics_solutionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_log_analytics_solutionHandler) Create(desired *Azurerm_log_analytics_solution) (*Azurerm_log_analytics_solution, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_log_analytics_solution", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_log_analytics_solutionHandler) Read(externalID string) (*Azurerm_log_analytics_solution, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_log_analytics_solution", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_log_analytics_solution{ Azurerm_log_analytics_solution_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_log_analytics_solutionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_log_analytics_solution", externalID)
}

type Azurerm_log_analytics_workspace struct {

    Azurerm_log_analytics_workspace_id *string `lyra:"ignore"`

    Location string

    Name string

    Portal_url *string

    Primary_shared_key *string

    Resource_group_name string

    Retention_in_days *int

    Secondary_shared_key *string

    Sku string

    Tags *map[string]string

    Workspace_id *string

}

// Azurerm_log_analytics_workspaceHandler ...
type Azurerm_log_analytics_workspaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_log_analytics_workspaceHandler) Create(desired *Azurerm_log_analytics_workspace) (*Azurerm_log_analytics_workspace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_log_analytics_workspace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_log_analytics_workspaceHandler) Read(externalID string) (*Azurerm_log_analytics_workspace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_log_analytics_workspace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_log_analytics_workspace{ Azurerm_log_analytics_workspace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_log_analytics_workspaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_log_analytics_workspace", externalID)
}

type Azurerm_log_analytics_workspace_linked_service struct {

    Azurerm_log_analytics_workspace_linked_service_id *string `lyra:"ignore"`

    Linked_service_name *string

    Linked_service_properties map[string]string

    Name *string

    Resource_group_name string

    Tags *map[string]string

    Workspace_name string

}

// Azurerm_log_analytics_workspace_linked_serviceHandler ...
type Azurerm_log_analytics_workspace_linked_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_log_analytics_workspace_linked_serviceHandler) Create(desired *Azurerm_log_analytics_workspace_linked_service) (*Azurerm_log_analytics_workspace_linked_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_log_analytics_workspace_linked_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_log_analytics_workspace_linked_serviceHandler) Read(externalID string) (*Azurerm_log_analytics_workspace_linked_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_log_analytics_workspace_linked_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_log_analytics_workspace_linked_service{ Azurerm_log_analytics_workspace_linked_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_log_analytics_workspace_linked_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_log_analytics_workspace_linked_service", externalID)
}

type Azurerm_logic_app_action_custom struct {

    Azurerm_logic_app_action_custom_id *string `lyra:"ignore"`

    Body string

    Logic_app_id string

    Name string

}

// Azurerm_logic_app_action_customHandler ...
type Azurerm_logic_app_action_customHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_logic_app_action_customHandler) Create(desired *Azurerm_logic_app_action_custom) (*Azurerm_logic_app_action_custom, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_logic_app_action_custom", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_logic_app_action_customHandler) Read(externalID string) (*Azurerm_logic_app_action_custom, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_logic_app_action_custom", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_logic_app_action_custom{ Azurerm_logic_app_action_custom_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_logic_app_action_customHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_logic_app_action_custom", externalID)
}

type Azurerm_logic_app_action_http struct {

    Azurerm_logic_app_action_http_id *string `lyra:"ignore"`

    Body *string

    Headers *map[string]string

    Logic_app_id string

    Method string

    Name string

    Uri string

}

// Azurerm_logic_app_action_httpHandler ...
type Azurerm_logic_app_action_httpHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_logic_app_action_httpHandler) Create(desired *Azurerm_logic_app_action_http) (*Azurerm_logic_app_action_http, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_logic_app_action_http", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_logic_app_action_httpHandler) Read(externalID string) (*Azurerm_logic_app_action_http, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_logic_app_action_http", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_logic_app_action_http{ Azurerm_logic_app_action_http_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_logic_app_action_httpHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_logic_app_action_http", externalID)
}

type Azurerm_logic_app_trigger_custom struct {

    Azurerm_logic_app_trigger_custom_id *string `lyra:"ignore"`

    Body string

    Logic_app_id string

    Name string

}

// Azurerm_logic_app_trigger_customHandler ...
type Azurerm_logic_app_trigger_customHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_logic_app_trigger_customHandler) Create(desired *Azurerm_logic_app_trigger_custom) (*Azurerm_logic_app_trigger_custom, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_logic_app_trigger_custom", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_logic_app_trigger_customHandler) Read(externalID string) (*Azurerm_logic_app_trigger_custom, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_logic_app_trigger_custom", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_logic_app_trigger_custom{ Azurerm_logic_app_trigger_custom_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_logic_app_trigger_customHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_logic_app_trigger_custom", externalID)
}

type Azurerm_logic_app_trigger_http_request struct {

    Azurerm_logic_app_trigger_http_request_id *string `lyra:"ignore"`

    Logic_app_id string

    Method *string

    Name string

    Relative_path *string

    Schema string

}

// Azurerm_logic_app_trigger_http_requestHandler ...
type Azurerm_logic_app_trigger_http_requestHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_logic_app_trigger_http_requestHandler) Create(desired *Azurerm_logic_app_trigger_http_request) (*Azurerm_logic_app_trigger_http_request, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_logic_app_trigger_http_request", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_logic_app_trigger_http_requestHandler) Read(externalID string) (*Azurerm_logic_app_trigger_http_request, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_logic_app_trigger_http_request", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_logic_app_trigger_http_request{ Azurerm_logic_app_trigger_http_request_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_logic_app_trigger_http_requestHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_logic_app_trigger_http_request", externalID)
}

type Azurerm_logic_app_trigger_recurrence struct {

    Azurerm_logic_app_trigger_recurrence_id *string `lyra:"ignore"`

    Frequency string

    Interval int

    Logic_app_id string

    Name string

}

// Azurerm_logic_app_trigger_recurrenceHandler ...
type Azurerm_logic_app_trigger_recurrenceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_logic_app_trigger_recurrenceHandler) Create(desired *Azurerm_logic_app_trigger_recurrence) (*Azurerm_logic_app_trigger_recurrence, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_logic_app_trigger_recurrence", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_logic_app_trigger_recurrenceHandler) Read(externalID string) (*Azurerm_logic_app_trigger_recurrence, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_logic_app_trigger_recurrence", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_logic_app_trigger_recurrence{ Azurerm_logic_app_trigger_recurrence_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_logic_app_trigger_recurrenceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_logic_app_trigger_recurrence", externalID)
}

type Azurerm_logic_app_workflow struct {

    Azurerm_logic_app_workflow_id *string `lyra:"ignore"`

    Access_endpoint *string

    Location string

    Name string

    Parameters *map[string]string

    Resource_group_name string

    Tags *map[string]string

    Workflow_schema *string

    Workflow_version *string

}

// Azurerm_logic_app_workflowHandler ...
type Azurerm_logic_app_workflowHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_logic_app_workflowHandler) Create(desired *Azurerm_logic_app_workflow) (*Azurerm_logic_app_workflow, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_logic_app_workflow", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_logic_app_workflowHandler) Read(externalID string) (*Azurerm_logic_app_workflow, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_logic_app_workflow", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_logic_app_workflow{ Azurerm_logic_app_workflow_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_logic_app_workflowHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_logic_app_workflow", externalID)
}

type Azurerm_managed_disk_encryption_settings_726_disk_encryption_key_727 struct {

    Secret_url string

    Source_vault_id string

}

type Azurerm_managed_disk_encryption_settings_726_key_encryption_key_728 struct {

    Key_url string

    Source_vault_id string

}

type Azurerm_managed_disk_encryption_settings_726 struct {

    Disk_encryption_key *[]Azurerm_managed_disk_encryption_settings_726_disk_encryption_key_727

    Enabled bool

    Key_encryption_key *[]Azurerm_managed_disk_encryption_settings_726_key_encryption_key_728

}

type Azurerm_managed_disk struct {

    Azurerm_managed_disk_id *string `lyra:"ignore"`

    Create_option string

    Disk_size_gb *int

    Encryption_settings *[]Azurerm_managed_disk_encryption_settings_726

    Image_reference_id *string

    Location string

    Name string

    Os_type *string

    Resource_group_name string

    Source_resource_id *string

    Source_uri *string

    Storage_account_type string

    Tags *map[string]string

    Zones *[]string

}

// Azurerm_managed_diskHandler ...
type Azurerm_managed_diskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_managed_diskHandler) Create(desired *Azurerm_managed_disk) (*Azurerm_managed_disk, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_managed_disk", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_managed_diskHandler) Read(externalID string) (*Azurerm_managed_disk, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_managed_disk", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_managed_disk{ Azurerm_managed_disk_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_managed_diskHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_managed_disk", externalID)
}

type Azurerm_management_group struct {

    Azurerm_management_group_id *string `lyra:"ignore"`

    Display_name *string

    Group_id *string

    Parent_management_group_id *string

    Subscription_ids *[]string

}

// Azurerm_management_groupHandler ...
type Azurerm_management_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_management_groupHandler) Create(desired *Azurerm_management_group) (*Azurerm_management_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_management_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_management_groupHandler) Read(externalID string) (*Azurerm_management_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_management_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_management_group{ Azurerm_management_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_management_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_management_group", externalID)
}

type Azurerm_management_lock struct {

    Azurerm_management_lock_id *string `lyra:"ignore"`

    Lock_level string

    Name string

    Notes *string

    Scope string

}

// Azurerm_management_lockHandler ...
type Azurerm_management_lockHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_management_lockHandler) Create(desired *Azurerm_management_lock) (*Azurerm_management_lock, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_management_lock", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_management_lockHandler) Read(externalID string) (*Azurerm_management_lock, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_management_lock", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_management_lock{ Azurerm_management_lock_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_management_lockHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_management_lock", externalID)
}

type Azurerm_mariadb_database struct {

    Azurerm_mariadb_database_id *string `lyra:"ignore"`

    Charset string

    Collation string

    Name string

    Resource_group_name string

    Server_name string

}

// Azurerm_mariadb_databaseHandler ...
type Azurerm_mariadb_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mariadb_databaseHandler) Create(desired *Azurerm_mariadb_database) (*Azurerm_mariadb_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mariadb_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mariadb_databaseHandler) Read(externalID string) (*Azurerm_mariadb_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mariadb_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mariadb_database{ Azurerm_mariadb_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mariadb_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mariadb_database", externalID)
}

type Azurerm_mariadb_server_sku_729 struct {

    Capacity int

    Family string

    Name string

    Tier string

}

type Azurerm_mariadb_server_storage_profile_730 struct {

    Backup_retention_days *int

    Geo_redundant_backup *string

    Storage_mb int

}

type Azurerm_mariadb_server struct {

    Azurerm_mariadb_server_id *string `lyra:"ignore"`

    Administrator_login string

    Administrator_login_password string

    Fqdn *string

    Location string

    Name string

    Resource_group_name string

    Sku []Azurerm_mariadb_server_sku_729

    Ssl_enforcement string

    Storage_profile []Azurerm_mariadb_server_storage_profile_730

    Tags *map[string]string

    Version string

}

// Azurerm_mariadb_serverHandler ...
type Azurerm_mariadb_serverHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mariadb_serverHandler) Create(desired *Azurerm_mariadb_server) (*Azurerm_mariadb_server, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mariadb_server", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mariadb_serverHandler) Read(externalID string) (*Azurerm_mariadb_server, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mariadb_server", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mariadb_server{ Azurerm_mariadb_server_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mariadb_serverHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mariadb_server", externalID)
}

type Azurerm_metric_alertrule_email_action_731 struct {

    Custom_emails *[]string

    Send_to_service_owners *bool

}

type Azurerm_metric_alertrule_webhook_action_732 struct {

    Properties *map[string]string

    Service_uri string

}

type Azurerm_metric_alertrule struct {

    Azurerm_metric_alertrule_id *string `lyra:"ignore"`

    Aggregation string

    Description *string

    Email_action *[]Azurerm_metric_alertrule_email_action_731

    Enabled *bool

    Location string

    Metric_name string

    Name string

    Operator string

    Period string

    Resource_group_name string

    Resource_id string

    Tags *map[string]string

    Threshold float64

    Webhook_action *[]Azurerm_metric_alertrule_webhook_action_732

}

// Azurerm_metric_alertruleHandler ...
type Azurerm_metric_alertruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_metric_alertruleHandler) Create(desired *Azurerm_metric_alertrule) (*Azurerm_metric_alertrule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_metric_alertrule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_metric_alertruleHandler) Read(externalID string) (*Azurerm_metric_alertrule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_metric_alertrule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_metric_alertrule{ Azurerm_metric_alertrule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_metric_alertruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_metric_alertrule", externalID)
}

type Azurerm_monitor_action_group_email_receiver_733 struct {

    Email_address string

    Name string

}

type Azurerm_monitor_action_group_sms_receiver_734 struct {

    Country_code string

    Name string

    Phone_number string

}

type Azurerm_monitor_action_group_webhook_receiver_735 struct {

    Name string

    Service_uri string

}

type Azurerm_monitor_action_group struct {

    Azurerm_monitor_action_group_id *string `lyra:"ignore"`

    Email_receiver *[]Azurerm_monitor_action_group_email_receiver_733

    Enabled *bool

    Name string

    Resource_group_name string

    Short_name string

    Sms_receiver *[]Azurerm_monitor_action_group_sms_receiver_734

    Tags *map[string]string

    Webhook_receiver *[]Azurerm_monitor_action_group_webhook_receiver_735

}

// Azurerm_monitor_action_groupHandler ...
type Azurerm_monitor_action_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_monitor_action_groupHandler) Create(desired *Azurerm_monitor_action_group) (*Azurerm_monitor_action_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_monitor_action_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_monitor_action_groupHandler) Read(externalID string) (*Azurerm_monitor_action_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_monitor_action_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_monitor_action_group{ Azurerm_monitor_action_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_monitor_action_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_monitor_action_group", externalID)
}

type Azurerm_monitor_activity_log_alert_action_736 struct {

    Action_group_id string

    Webhook_properties *map[string]string

}

type Azurerm_monitor_activity_log_alert_criteria_737 struct {

    Caller *string

    Category string

    Level *string

    Operation_name *string

    Resource_group *string

    Resource_id *string

    Resource_provider *string

    Resource_type *string

    Status *string

    Sub_status *string

}

type Azurerm_monitor_activity_log_alert struct {

    Azurerm_monitor_activity_log_alert_id *string `lyra:"ignore"`

    Action *[]Azurerm_monitor_activity_log_alert_action_736

    Criteria []Azurerm_monitor_activity_log_alert_criteria_737

    Description *string

    Enabled *bool

    Name string

    Resource_group_name string

    Scopes []string

    Tags *map[string]string

}

// Azurerm_monitor_activity_log_alertHandler ...
type Azurerm_monitor_activity_log_alertHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_monitor_activity_log_alertHandler) Create(desired *Azurerm_monitor_activity_log_alert) (*Azurerm_monitor_activity_log_alert, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_monitor_activity_log_alert", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_monitor_activity_log_alertHandler) Read(externalID string) (*Azurerm_monitor_activity_log_alert, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_monitor_activity_log_alert", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_monitor_activity_log_alert{ Azurerm_monitor_activity_log_alert_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_monitor_activity_log_alertHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_monitor_activity_log_alert", externalID)
}

type Azurerm_monitor_diagnostic_setting_log_738_retention_policy_739 struct {

    Days *int

    Enabled bool

}

type Azurerm_monitor_diagnostic_setting_log_738 struct {

    Category string

    Enabled *bool

    Retention_policy []Azurerm_monitor_diagnostic_setting_log_738_retention_policy_739

}

type Azurerm_monitor_diagnostic_setting_metric_740_retention_policy_741 struct {

    Days *int

    Enabled bool

}

type Azurerm_monitor_diagnostic_setting_metric_740 struct {

    Category string

    Enabled *bool

    Retention_policy []Azurerm_monitor_diagnostic_setting_metric_740_retention_policy_741

}

type Azurerm_monitor_diagnostic_setting struct {

    Azurerm_monitor_diagnostic_setting_id *string `lyra:"ignore"`

    Eventhub_authorization_rule_id *string

    Eventhub_name *string

    Log *[]Azurerm_monitor_diagnostic_setting_log_738

    Log_analytics_workspace_id *string

    Metric *[]Azurerm_monitor_diagnostic_setting_metric_740

    Name string

    Storage_account_id *string

    Target_resource_id string

}

// Azurerm_monitor_diagnostic_settingHandler ...
type Azurerm_monitor_diagnostic_settingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_monitor_diagnostic_settingHandler) Create(desired *Azurerm_monitor_diagnostic_setting) (*Azurerm_monitor_diagnostic_setting, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_monitor_diagnostic_setting", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_monitor_diagnostic_settingHandler) Read(externalID string) (*Azurerm_monitor_diagnostic_setting, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_monitor_diagnostic_setting", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_monitor_diagnostic_setting{ Azurerm_monitor_diagnostic_setting_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_monitor_diagnostic_settingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_monitor_diagnostic_setting", externalID)
}

type Azurerm_monitor_log_profile_retention_policy_742 struct {

    Days *int

    Enabled bool

}

type Azurerm_monitor_log_profile struct {

    Azurerm_monitor_log_profile_id *string `lyra:"ignore"`

    Categories []string

    Locations []string

    Name string

    Retention_policy []Azurerm_monitor_log_profile_retention_policy_742

    Servicebus_rule_id *string

    Storage_account_id *string

}

// Azurerm_monitor_log_profileHandler ...
type Azurerm_monitor_log_profileHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_monitor_log_profileHandler) Create(desired *Azurerm_monitor_log_profile) (*Azurerm_monitor_log_profile, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_monitor_log_profile", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_monitor_log_profileHandler) Read(externalID string) (*Azurerm_monitor_log_profile, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_monitor_log_profile", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_monitor_log_profile{ Azurerm_monitor_log_profile_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_monitor_log_profileHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_monitor_log_profile", externalID)
}

type Azurerm_monitor_metric_alert_action_743 struct {

    Action_group_id string

    Webhook_properties *map[string]string

}

type Azurerm_monitor_metric_alert_criteria_744_dimension_745 struct {

    Name string

    Operator string

    Values []string

}

type Azurerm_monitor_metric_alert_criteria_744 struct {

    Aggregation string

    Dimension *[]Azurerm_monitor_metric_alert_criteria_744_dimension_745

    Metric_name string

    Metric_namespace string

    Operator string

    Threshold float64

}

type Azurerm_monitor_metric_alert struct {

    Azurerm_monitor_metric_alert_id *string `lyra:"ignore"`

    Action *[]Azurerm_monitor_metric_alert_action_743

    Auto_mitigate *bool

    Criteria []Azurerm_monitor_metric_alert_criteria_744

    Description *string

    Enabled *bool

    Frequency *string

    Name string

    Resource_group_name string

    Scopes []string

    Severity *int

    Tags *map[string]string

    Window_size *string

}

// Azurerm_monitor_metric_alertHandler ...
type Azurerm_monitor_metric_alertHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_monitor_metric_alertHandler) Create(desired *Azurerm_monitor_metric_alert) (*Azurerm_monitor_metric_alert, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_monitor_metric_alert", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_monitor_metric_alertHandler) Read(externalID string) (*Azurerm_monitor_metric_alert, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_monitor_metric_alert", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_monitor_metric_alert{ Azurerm_monitor_metric_alert_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_monitor_metric_alertHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_monitor_metric_alert", externalID)
}

type Azurerm_mssql_elasticpool_elastic_pool_properties_746 struct {

    Creation_date *string

    License_type *string

    Max_size_bytes *int

    State *string

    Zone_redundant *bool

}

type Azurerm_mssql_elasticpool_per_database_settings_747 struct {

    Max_capacity float64

    Min_capacity float64

}

type Azurerm_mssql_elasticpool_sku_748 struct {

    Capacity int

    Family *string

    Name string

    Tier string

}

type Azurerm_mssql_elasticpool struct {

    Azurerm_mssql_elasticpool_id *string `lyra:"ignore"`

    Elastic_pool_properties *[]Azurerm_mssql_elasticpool_elastic_pool_properties_746

    Location string

    Max_size_bytes *int

    Name string

    Per_database_settings []Azurerm_mssql_elasticpool_per_database_settings_747

    Resource_group_name string

    Server_name string

    Sku []Azurerm_mssql_elasticpool_sku_748

    Tags *map[string]string

    Zone_redundant *bool

}

// Azurerm_mssql_elasticpoolHandler ...
type Azurerm_mssql_elasticpoolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mssql_elasticpoolHandler) Create(desired *Azurerm_mssql_elasticpool) (*Azurerm_mssql_elasticpool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mssql_elasticpool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mssql_elasticpoolHandler) Read(externalID string) (*Azurerm_mssql_elasticpool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mssql_elasticpool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mssql_elasticpool{ Azurerm_mssql_elasticpool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mssql_elasticpoolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mssql_elasticpool", externalID)
}

type Azurerm_mysql_configuration struct {

    Azurerm_mysql_configuration_id *string `lyra:"ignore"`

    Name string

    Resource_group_name string

    Server_name string

    Value string

}

// Azurerm_mysql_configurationHandler ...
type Azurerm_mysql_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mysql_configurationHandler) Create(desired *Azurerm_mysql_configuration) (*Azurerm_mysql_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mysql_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mysql_configurationHandler) Read(externalID string) (*Azurerm_mysql_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mysql_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mysql_configuration{ Azurerm_mysql_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mysql_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mysql_configuration", externalID)
}

type Azurerm_mysql_database struct {

    Azurerm_mysql_database_id *string `lyra:"ignore"`

    Charset string

    Collation string

    Name string

    Resource_group_name string

    Server_name string

}

// Azurerm_mysql_databaseHandler ...
type Azurerm_mysql_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mysql_databaseHandler) Create(desired *Azurerm_mysql_database) (*Azurerm_mysql_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mysql_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mysql_databaseHandler) Read(externalID string) (*Azurerm_mysql_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mysql_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mysql_database{ Azurerm_mysql_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mysql_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mysql_database", externalID)
}

type Azurerm_mysql_firewall_rule struct {

    Azurerm_mysql_firewall_rule_id *string `lyra:"ignore"`

    End_ip_address string

    Name string

    Resource_group_name string

    Server_name string

    Start_ip_address string

}

// Azurerm_mysql_firewall_ruleHandler ...
type Azurerm_mysql_firewall_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mysql_firewall_ruleHandler) Create(desired *Azurerm_mysql_firewall_rule) (*Azurerm_mysql_firewall_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mysql_firewall_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mysql_firewall_ruleHandler) Read(externalID string) (*Azurerm_mysql_firewall_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mysql_firewall_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mysql_firewall_rule{ Azurerm_mysql_firewall_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mysql_firewall_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mysql_firewall_rule", externalID)
}

type Azurerm_mysql_server_sku_749 struct {

    Capacity int

    Family string

    Name string

    Tier string

}

type Azurerm_mysql_server_storage_profile_750 struct {

    Backup_retention_days *int

    Geo_redundant_backup *string

    Storage_mb int

}

type Azurerm_mysql_server struct {

    Azurerm_mysql_server_id *string `lyra:"ignore"`

    Administrator_login string

    Administrator_login_password string

    Fqdn *string

    Location string

    Name string

    Resource_group_name string

    Sku []Azurerm_mysql_server_sku_749

    Ssl_enforcement string

    Storage_profile []Azurerm_mysql_server_storage_profile_750

    Tags *map[string]string

    Version string

}

// Azurerm_mysql_serverHandler ...
type Azurerm_mysql_serverHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mysql_serverHandler) Create(desired *Azurerm_mysql_server) (*Azurerm_mysql_server, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mysql_server", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mysql_serverHandler) Read(externalID string) (*Azurerm_mysql_server, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mysql_server", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mysql_server{ Azurerm_mysql_server_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mysql_serverHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mysql_server", externalID)
}

type Azurerm_mysql_virtual_network_rule struct {

    Azurerm_mysql_virtual_network_rule_id *string `lyra:"ignore"`

    Name string

    Resource_group_name string

    Server_name string

    Subnet_id string

}

// Azurerm_mysql_virtual_network_ruleHandler ...
type Azurerm_mysql_virtual_network_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_mysql_virtual_network_ruleHandler) Create(desired *Azurerm_mysql_virtual_network_rule) (*Azurerm_mysql_virtual_network_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_mysql_virtual_network_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_mysql_virtual_network_ruleHandler) Read(externalID string) (*Azurerm_mysql_virtual_network_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_mysql_virtual_network_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_mysql_virtual_network_rule{ Azurerm_mysql_virtual_network_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_mysql_virtual_network_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_mysql_virtual_network_rule", externalID)
}

type Azurerm_network_interface_ip_configuration_751 struct {

    Application_gateway_backend_address_pools_ids *[]string

    Application_security_group_ids *[]string

    Load_balancer_backend_address_pools_ids *[]string

    Load_balancer_inbound_nat_rules_ids *[]string

    Name string

    Primary *bool

    Private_ip_address *string

    Private_ip_address_allocation string

    Private_ip_address_version *string

    Public_ip_address_id *string

    Subnet_id *string

}

type Azurerm_network_interface struct {

    Azurerm_network_interface_id *string `lyra:"ignore"`

    Applied_dns_servers *[]string

    Dns_servers *[]string

    Enable_accelerated_networking *bool

    Enable_ip_forwarding *bool

    Internal_dns_name_label *string

    Internal_fqdn *string

    Ip_configuration []Azurerm_network_interface_ip_configuration_751

    Location string

    Mac_address *string

    Name string

    Network_security_group_id *string

    Private_ip_address *string

    Private_ip_addresses *[]string

    Resource_group_name string

    Tags *map[string]string

    Virtual_machine_id *string

}

// Azurerm_network_interfaceHandler ...
type Azurerm_network_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_network_interfaceHandler) Create(desired *Azurerm_network_interface) (*Azurerm_network_interface, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_network_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_network_interfaceHandler) Read(externalID string) (*Azurerm_network_interface, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_network_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_network_interface{ Azurerm_network_interface_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_network_interfaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_network_interface", externalID)
}

type Azurerm_network_interface_application_gateway_backend_address_pool_association struct {

    Azurerm_network_interface_application_gateway_backend_address_pool_association_id *string `lyra:"ignore"`

    Backend_address_pool_id string

    Ip_configuration_name string

    Network_interface_id string

}

// Azurerm_network_interface_application_gateway_backend_address_pool_associationHandler ...
type Azurerm_network_interface_application_gateway_backend_address_pool_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_network_interface_application_gateway_backend_address_pool_associationHandler) Create(desired *Azurerm_network_interface_application_gateway_backend_address_pool_association) (*Azurerm_network_interface_application_gateway_backend_address_pool_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_network_interface_application_gateway_backend_address_pool_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_network_interface_application_gateway_backend_address_pool_associationHandler) Read(externalID string) (*Azurerm_network_interface_application_gateway_backend_address_pool_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_network_interface_application_gateway_backend_address_pool_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_network_interface_application_gateway_backend_address_pool_association{ Azurerm_network_interface_application_gateway_backend_address_pool_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_network_interface_application_gateway_backend_address_pool_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_network_interface_application_gateway_backend_address_pool_association", externalID)
}

type Azurerm_network_interface_backend_address_pool_association struct {

    Azurerm_network_interface_backend_address_pool_association_id *string `lyra:"ignore"`

    Backend_address_pool_id string

    Ip_configuration_name string

    Network_interface_id string

}

// Azurerm_network_interface_backend_address_pool_associationHandler ...
type Azurerm_network_interface_backend_address_pool_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_network_interface_backend_address_pool_associationHandler) Create(desired *Azurerm_network_interface_backend_address_pool_association) (*Azurerm_network_interface_backend_address_pool_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_network_interface_backend_address_pool_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_network_interface_backend_address_pool_associationHandler) Read(externalID string) (*Azurerm_network_interface_backend_address_pool_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_network_interface_backend_address_pool_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_network_interface_backend_address_pool_association{ Azurerm_network_interface_backend_address_pool_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_network_interface_backend_address_pool_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_network_interface_backend_address_pool_association", externalID)
}

type Azurerm_network_interface_nat_rule_association struct {

    Azurerm_network_interface_nat_rule_association_id *string `lyra:"ignore"`

    Ip_configuration_name string

    Nat_rule_id string

    Network_interface_id string

}

// Azurerm_network_interface_nat_rule_associationHandler ...
type Azurerm_network_interface_nat_rule_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_network_interface_nat_rule_associationHandler) Create(desired *Azurerm_network_interface_nat_rule_association) (*Azurerm_network_interface_nat_rule_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_network_interface_nat_rule_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_network_interface_nat_rule_associationHandler) Read(externalID string) (*Azurerm_network_interface_nat_rule_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_network_interface_nat_rule_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_network_interface_nat_rule_association{ Azurerm_network_interface_nat_rule_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_network_interface_nat_rule_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_network_interface_nat_rule_association", externalID)
}

type Azurerm_network_security_group_security_rule_752 struct {

    Access string

    Description *string

    Destination_address_prefix *string

    Destination_address_prefixes *[]string

    Destination_application_security_group_ids *[]string

    Destination_port_range *string

    Destination_port_ranges *[]string

    Direction string

    Name string

    Priority int

    Protocol string

    Source_address_prefix *string

    Source_address_prefixes *[]string

    Source_application_security_group_ids *[]string

    Source_port_range *string

    Source_port_ranges *[]string

}

type Azurerm_network_security_group struct {

    Azurerm_network_security_group_id *string `lyra:"ignore"`

    Location string

    Name string

    Resource_group_name string

    Security_rule *[]Azurerm_network_security_group_security_rule_752

    Tags *map[string]string

}

// Azurerm_network_security_groupHandler ...
type Azurerm_network_security_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_network_security_groupHandler) Create(desired *Azurerm_network_security_group) (*Azurerm_network_security_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_network_security_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_network_security_groupHandler) Read(externalID string) (*Azurerm_network_security_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_network_security_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_network_security_group{ Azurerm_network_security_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_network_security_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_network_security_group", externalID)
}

type Azurerm_network_security_rule struct {

    Azurerm_network_security_rule_id *string `lyra:"ignore"`

    Access string

    Description *string

    Destination_address_prefix *string

    Destination_address_prefixes *[]string

    Destination_application_security_group_ids *[]string

    Destination_port_range *string

    Destination_port_ranges *[]string

    Direction string

    Name string

    Network_security_group_name string

    Priority int

    Protocol string

    Resource_group_name string

    Source_address_prefix *string

    Source_address_prefixes *[]string

    Source_application_security_group_ids *[]string

    Source_port_range *string

    Source_port_ranges *[]string

}

// Azurerm_network_security_ruleHandler ...
type Azurerm_network_security_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_network_security_ruleHandler) Create(desired *Azurerm_network_security_rule) (*Azurerm_network_security_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_network_security_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_network_security_ruleHandler) Read(externalID string) (*Azurerm_network_security_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_network_security_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_network_security_rule{ Azurerm_network_security_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_network_security_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_network_security_rule", externalID)
}

type Azurerm_network_watcher struct {

    Azurerm_network_watcher_id *string `lyra:"ignore"`

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_network_watcherHandler ...
type Azurerm_network_watcherHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_network_watcherHandler) Create(desired *Azurerm_network_watcher) (*Azurerm_network_watcher, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_network_watcher", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_network_watcherHandler) Read(externalID string) (*Azurerm_network_watcher, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_network_watcher", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_network_watcher{ Azurerm_network_watcher_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_network_watcherHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_network_watcher", externalID)
}

type Azurerm_notification_hub_apns_credential_753 struct {

    Application_mode string

    Bundle_id string

    Key_id string

    Team_id string

    Token string

}

type Azurerm_notification_hub_gcm_credential_754 struct {

    Api_key string

}

type Azurerm_notification_hub struct {

    Azurerm_notification_hub_id *string `lyra:"ignore"`

    Apns_credential *[]Azurerm_notification_hub_apns_credential_753

    Gcm_credential *[]Azurerm_notification_hub_gcm_credential_754

    Location string

    Name string

    Namespace_name string

    Resource_group_name string

}

// Azurerm_notification_hubHandler ...
type Azurerm_notification_hubHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_notification_hubHandler) Create(desired *Azurerm_notification_hub) (*Azurerm_notification_hub, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_notification_hub", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_notification_hubHandler) Read(externalID string) (*Azurerm_notification_hub, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_notification_hub", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_notification_hub{ Azurerm_notification_hub_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_notification_hubHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_notification_hub", externalID)
}

type Azurerm_notification_hub_authorization_rule struct {

    Azurerm_notification_hub_authorization_rule_id *string `lyra:"ignore"`

    Listen *bool

    Manage *bool

    Name string

    Namespace_name string

    Notification_hub_name string

    Primary_access_key *string

    Resource_group_name string

    Secondary_access_key *string

    Send *bool

}

// Azurerm_notification_hub_authorization_ruleHandler ...
type Azurerm_notification_hub_authorization_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_notification_hub_authorization_ruleHandler) Create(desired *Azurerm_notification_hub_authorization_rule) (*Azurerm_notification_hub_authorization_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_notification_hub_authorization_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_notification_hub_authorization_ruleHandler) Read(externalID string) (*Azurerm_notification_hub_authorization_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_notification_hub_authorization_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_notification_hub_authorization_rule{ Azurerm_notification_hub_authorization_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_notification_hub_authorization_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_notification_hub_authorization_rule", externalID)
}

type Azurerm_notification_hub_namespace_sku_755 struct {

    Name string

}

type Azurerm_notification_hub_namespace struct {

    Azurerm_notification_hub_namespace_id *string `lyra:"ignore"`

    Enabled *bool

    Location string

    Name string

    Namespace_type string

    Resource_group_name string

    Servicebus_endpoint *string

    Sku []Azurerm_notification_hub_namespace_sku_755

}

// Azurerm_notification_hub_namespaceHandler ...
type Azurerm_notification_hub_namespaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_notification_hub_namespaceHandler) Create(desired *Azurerm_notification_hub_namespace) (*Azurerm_notification_hub_namespace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_notification_hub_namespace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_notification_hub_namespaceHandler) Read(externalID string) (*Azurerm_notification_hub_namespace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_notification_hub_namespace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_notification_hub_namespace{ Azurerm_notification_hub_namespace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_notification_hub_namespaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_notification_hub_namespace", externalID)
}

type Azurerm_packet_capture_filter_756 struct {

    Local_ip_address *string

    Local_port *string

    Protocol string

    Remote_ip_address *string

    Remote_port *string

}

type Azurerm_packet_capture_storage_location_757 struct {

    File_path *string

    Storage_account_id *string

    Storage_path *string

}

type Azurerm_packet_capture struct {

    Azurerm_packet_capture_id *string `lyra:"ignore"`

    Filter *[]Azurerm_packet_capture_filter_756

    Maximum_bytes_per_packet *int

    Maximum_bytes_per_session *int

    Maximum_capture_duration *int

    Name string

    Network_watcher_name string

    Resource_group_name string

    Storage_location []Azurerm_packet_capture_storage_location_757

    Target_resource_id string

}

// Azurerm_packet_captureHandler ...
type Azurerm_packet_captureHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_packet_captureHandler) Create(desired *Azurerm_packet_capture) (*Azurerm_packet_capture, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_packet_capture", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_packet_captureHandler) Read(externalID string) (*Azurerm_packet_capture, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_packet_capture", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_packet_capture{ Azurerm_packet_capture_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_packet_captureHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_packet_capture", externalID)
}

type Azurerm_policy_assignment_identity_758 struct {

    Principal_id *string

    Tenant_id *string

    Type *string

}

type Azurerm_policy_assignment struct {

    Azurerm_policy_assignment_id *string `lyra:"ignore"`

    Description *string

    Display_name *string

    Identity *[]Azurerm_policy_assignment_identity_758

    Location *string

    Name string

    Not_scopes *[]string

    Parameters *string

    Policy_definition_id string

    Scope string

}

// Azurerm_policy_assignmentHandler ...
type Azurerm_policy_assignmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_policy_assignmentHandler) Create(desired *Azurerm_policy_assignment) (*Azurerm_policy_assignment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_policy_assignment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_policy_assignmentHandler) Read(externalID string) (*Azurerm_policy_assignment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_policy_assignment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_policy_assignment{ Azurerm_policy_assignment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_policy_assignmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_policy_assignment", externalID)
}

type Azurerm_policy_definition struct {

    Azurerm_policy_definition_id *string `lyra:"ignore"`

    Description *string

    Display_name string

    Management_group_id *string

    Metadata *string

    Mode string

    Name string

    Parameters *string

    Policy_rule *string

    Policy_type string

}

// Azurerm_policy_definitionHandler ...
type Azurerm_policy_definitionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_policy_definitionHandler) Create(desired *Azurerm_policy_definition) (*Azurerm_policy_definition, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_policy_definition", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_policy_definitionHandler) Read(externalID string) (*Azurerm_policy_definition, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_policy_definition", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_policy_definition{ Azurerm_policy_definition_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_policy_definitionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_policy_definition", externalID)
}

type Azurerm_policy_set_definition struct {

    Azurerm_policy_set_definition_id *string `lyra:"ignore"`

    Description *string

    Display_name string

    Management_group_id *string

    Metadata *string

    Name string

    Parameters *string

    Policy_definitions *string

    Policy_type string

}

// Azurerm_policy_set_definitionHandler ...
type Azurerm_policy_set_definitionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_policy_set_definitionHandler) Create(desired *Azurerm_policy_set_definition) (*Azurerm_policy_set_definition, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_policy_set_definition", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_policy_set_definitionHandler) Read(externalID string) (*Azurerm_policy_set_definition, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_policy_set_definition", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_policy_set_definition{ Azurerm_policy_set_definition_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_policy_set_definitionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_policy_set_definition", externalID)
}

type Azurerm_postgresql_configuration struct {

    Azurerm_postgresql_configuration_id *string `lyra:"ignore"`

    Name string

    Resource_group_name string

    Server_name string

    Value string

}

// Azurerm_postgresql_configurationHandler ...
type Azurerm_postgresql_configurationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_postgresql_configurationHandler) Create(desired *Azurerm_postgresql_configuration) (*Azurerm_postgresql_configuration, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_postgresql_configuration", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_postgresql_configurationHandler) Read(externalID string) (*Azurerm_postgresql_configuration, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_postgresql_configuration", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_postgresql_configuration{ Azurerm_postgresql_configuration_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_postgresql_configurationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_postgresql_configuration", externalID)
}

type Azurerm_postgresql_database struct {

    Azurerm_postgresql_database_id *string `lyra:"ignore"`

    Charset string

    Collation string

    Name string

    Resource_group_name string

    Server_name string

}

// Azurerm_postgresql_databaseHandler ...
type Azurerm_postgresql_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_postgresql_databaseHandler) Create(desired *Azurerm_postgresql_database) (*Azurerm_postgresql_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_postgresql_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_postgresql_databaseHandler) Read(externalID string) (*Azurerm_postgresql_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_postgresql_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_postgresql_database{ Azurerm_postgresql_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_postgresql_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_postgresql_database", externalID)
}

type Azurerm_postgresql_firewall_rule struct {

    Azurerm_postgresql_firewall_rule_id *string `lyra:"ignore"`

    End_ip_address string

    Name string

    Resource_group_name string

    Server_name string

    Start_ip_address string

}

// Azurerm_postgresql_firewall_ruleHandler ...
type Azurerm_postgresql_firewall_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_postgresql_firewall_ruleHandler) Create(desired *Azurerm_postgresql_firewall_rule) (*Azurerm_postgresql_firewall_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_postgresql_firewall_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_postgresql_firewall_ruleHandler) Read(externalID string) (*Azurerm_postgresql_firewall_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_postgresql_firewall_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_postgresql_firewall_rule{ Azurerm_postgresql_firewall_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_postgresql_firewall_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_postgresql_firewall_rule", externalID)
}

type Azurerm_postgresql_server_sku_759 struct {

    Capacity int

    Family string

    Name string

    Tier string

}

type Azurerm_postgresql_server_storage_profile_760 struct {

    Backup_retention_days *int

    Geo_redundant_backup *string

    Storage_mb int

}

type Azurerm_postgresql_server struct {

    Azurerm_postgresql_server_id *string `lyra:"ignore"`

    Administrator_login string

    Administrator_login_password string

    Fqdn *string

    Location string

    Name string

    Resource_group_name string

    Sku []Azurerm_postgresql_server_sku_759

    Ssl_enforcement string

    Storage_profile []Azurerm_postgresql_server_storage_profile_760

    Tags *map[string]string

    Version string

}

// Azurerm_postgresql_serverHandler ...
type Azurerm_postgresql_serverHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_postgresql_serverHandler) Create(desired *Azurerm_postgresql_server) (*Azurerm_postgresql_server, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_postgresql_server", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_postgresql_serverHandler) Read(externalID string) (*Azurerm_postgresql_server, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_postgresql_server", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_postgresql_server{ Azurerm_postgresql_server_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_postgresql_serverHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_postgresql_server", externalID)
}

type Azurerm_postgresql_virtual_network_rule struct {

    Azurerm_postgresql_virtual_network_rule_id *string `lyra:"ignore"`

    Ignore_missing_vnet_service_endpoint *bool

    Name string

    Resource_group_name string

    Server_name string

    Subnet_id string

}

// Azurerm_postgresql_virtual_network_ruleHandler ...
type Azurerm_postgresql_virtual_network_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_postgresql_virtual_network_ruleHandler) Create(desired *Azurerm_postgresql_virtual_network_rule) (*Azurerm_postgresql_virtual_network_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_postgresql_virtual_network_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_postgresql_virtual_network_ruleHandler) Read(externalID string) (*Azurerm_postgresql_virtual_network_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_postgresql_virtual_network_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_postgresql_virtual_network_rule{ Azurerm_postgresql_virtual_network_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_postgresql_virtual_network_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_postgresql_virtual_network_rule", externalID)
}

type Azurerm_public_ip struct {

    Azurerm_public_ip_id *string `lyra:"ignore"`

    Allocation_method *string

    Domain_name_label *string

    Fqdn *string

    Idle_timeout_in_minutes *int

    Ip_address *string

    Ip_version *string

    Location string

    Name string

    Public_ip_address_allocation *string

    Resource_group_name string

    Reverse_fqdn *string

    Sku *string

    Tags *map[string]string

    Zones *[]string

}

// Azurerm_public_ipHandler ...
type Azurerm_public_ipHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_public_ipHandler) Create(desired *Azurerm_public_ip) (*Azurerm_public_ip, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_public_ip", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_public_ipHandler) Read(externalID string) (*Azurerm_public_ip, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_public_ip", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_public_ip{ Azurerm_public_ip_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_public_ipHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_public_ip", externalID)
}

type Azurerm_recovery_services_protected_vm struct {

    Azurerm_recovery_services_protected_vm_id *string `lyra:"ignore"`

    Backup_policy_id string

    Recovery_vault_name string

    Resource_group_name string

    Source_vm_id string

    Tags *map[string]string

}

// Azurerm_recovery_services_protected_vmHandler ...
type Azurerm_recovery_services_protected_vmHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_recovery_services_protected_vmHandler) Create(desired *Azurerm_recovery_services_protected_vm) (*Azurerm_recovery_services_protected_vm, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_recovery_services_protected_vm", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_recovery_services_protected_vmHandler) Read(externalID string) (*Azurerm_recovery_services_protected_vm, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_recovery_services_protected_vm", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_recovery_services_protected_vm{ Azurerm_recovery_services_protected_vm_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_recovery_services_protected_vmHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_recovery_services_protected_vm", externalID)
}

type Azurerm_recovery_services_protection_policy_vm_backup_761 struct {

    Frequency string

    Time string

    Weekdays *[]string

}

type Azurerm_recovery_services_protection_policy_vm_retention_daily_762 struct {

    Count int

}

type Azurerm_recovery_services_protection_policy_vm_retention_monthly_763 struct {

    Count int

    Weekdays []string

    Weeks []string

}

type Azurerm_recovery_services_protection_policy_vm_retention_weekly_764 struct {

    Count int

    Weekdays []string

}

type Azurerm_recovery_services_protection_policy_vm_retention_yearly_765 struct {

    Count int

    Months []string

    Weekdays []string

    Weeks []string

}

type Azurerm_recovery_services_protection_policy_vm struct {

    Azurerm_recovery_services_protection_policy_vm_id *string `lyra:"ignore"`

    Backup []Azurerm_recovery_services_protection_policy_vm_backup_761

    Name string

    Recovery_vault_name string

    Resource_group_name string

    Retention_daily *[]Azurerm_recovery_services_protection_policy_vm_retention_daily_762

    Retention_monthly *[]Azurerm_recovery_services_protection_policy_vm_retention_monthly_763

    Retention_weekly *[]Azurerm_recovery_services_protection_policy_vm_retention_weekly_764

    Retention_yearly *[]Azurerm_recovery_services_protection_policy_vm_retention_yearly_765

    Tags *map[string]string

    Timezone *string

}

// Azurerm_recovery_services_protection_policy_vmHandler ...
type Azurerm_recovery_services_protection_policy_vmHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_recovery_services_protection_policy_vmHandler) Create(desired *Azurerm_recovery_services_protection_policy_vm) (*Azurerm_recovery_services_protection_policy_vm, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_recovery_services_protection_policy_vm", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_recovery_services_protection_policy_vmHandler) Read(externalID string) (*Azurerm_recovery_services_protection_policy_vm, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_recovery_services_protection_policy_vm", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_recovery_services_protection_policy_vm{ Azurerm_recovery_services_protection_policy_vm_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_recovery_services_protection_policy_vmHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_recovery_services_protection_policy_vm", externalID)
}

type Azurerm_recovery_services_vault struct {

    Azurerm_recovery_services_vault_id *string `lyra:"ignore"`

    Location string

    Name string

    Resource_group_name string

    Sku string

    Tags *map[string]string

}

// Azurerm_recovery_services_vaultHandler ...
type Azurerm_recovery_services_vaultHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_recovery_services_vaultHandler) Create(desired *Azurerm_recovery_services_vault) (*Azurerm_recovery_services_vault, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_recovery_services_vault", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_recovery_services_vaultHandler) Read(externalID string) (*Azurerm_recovery_services_vault, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_recovery_services_vault", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_recovery_services_vault{ Azurerm_recovery_services_vault_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_recovery_services_vaultHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_recovery_services_vault", externalID)
}

type Azurerm_redis_cache_patch_schedule_766 struct {

    Day_of_week string

    Start_hour_utc *int

}

type Azurerm_redis_cache_redis_configuration_767 struct {

    Maxclients *int

    Maxmemory_delta *int

    Maxmemory_policy *string

    Maxmemory_reserved *int

    Notify_keyspace_events *string

    Rdb_backup_enabled *bool

    Rdb_backup_frequency *int

    Rdb_backup_max_snapshot_count *int

    Rdb_storage_connection_string *string

}

type Azurerm_redis_cache struct {

    Azurerm_redis_cache_id *string `lyra:"ignore"`

    Capacity int

    Enable_non_ssl_port *bool

    Family string

    Hostname *string

    Location string

    Name string

    Patch_schedule *[]Azurerm_redis_cache_patch_schedule_766

    Port *int

    Primary_access_key *string

    Private_static_ip_address *string

    Redis_configuration []Azurerm_redis_cache_redis_configuration_767

    Resource_group_name string

    Secondary_access_key *string

    Shard_count *int

    Sku_name string

    Ssl_port *int

    Subnet_id *string

    Tags *map[string]string

    Zones *[]string

}

// Azurerm_redis_cacheHandler ...
type Azurerm_redis_cacheHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_redis_cacheHandler) Create(desired *Azurerm_redis_cache) (*Azurerm_redis_cache, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_redis_cache", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_redis_cacheHandler) Read(externalID string) (*Azurerm_redis_cache, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_redis_cache", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_redis_cache{ Azurerm_redis_cache_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_redis_cacheHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_redis_cache", externalID)
}

type Azurerm_redis_firewall_rule struct {

    Azurerm_redis_firewall_rule_id *string `lyra:"ignore"`

    End_ip string

    Name string

    Redis_cache_name string

    Resource_group_name string

    Start_ip string

}

// Azurerm_redis_firewall_ruleHandler ...
type Azurerm_redis_firewall_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_redis_firewall_ruleHandler) Create(desired *Azurerm_redis_firewall_rule) (*Azurerm_redis_firewall_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_redis_firewall_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_redis_firewall_ruleHandler) Read(externalID string) (*Azurerm_redis_firewall_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_redis_firewall_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_redis_firewall_rule{ Azurerm_redis_firewall_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_redis_firewall_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_redis_firewall_rule", externalID)
}

type Azurerm_relay_namespace_sku_768 struct {

    Name string

}

type Azurerm_relay_namespace struct {

    Azurerm_relay_namespace_id *string `lyra:"ignore"`

    Location string

    Metric_id *string

    Name string

    Primary_connection_string *string

    Primary_key *string

    Resource_group_name string

    Secondary_connection_string *string

    Secondary_key *string

    Sku []Azurerm_relay_namespace_sku_768

    Tags *map[string]string

}

// Azurerm_relay_namespaceHandler ...
type Azurerm_relay_namespaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_relay_namespaceHandler) Create(desired *Azurerm_relay_namespace) (*Azurerm_relay_namespace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_relay_namespace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_relay_namespaceHandler) Read(externalID string) (*Azurerm_relay_namespace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_relay_namespace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_relay_namespace{ Azurerm_relay_namespace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_relay_namespaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_relay_namespace", externalID)
}

type Azurerm_resource_group struct {

    Azurerm_resource_group_id *string `lyra:"ignore"`

    Location string

    Name string

    Tags *map[string]string

}

// Azurerm_resource_groupHandler ...
type Azurerm_resource_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_resource_groupHandler) Create(desired *Azurerm_resource_group) (*Azurerm_resource_group, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_resource_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_resource_groupHandler) Read(externalID string) (*Azurerm_resource_group, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_resource_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_resource_group{ Azurerm_resource_group_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_resource_groupHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_resource_group", externalID)
}

type Azurerm_role_assignment struct {

    Azurerm_role_assignment_id *string `lyra:"ignore"`

    Name *string

    Principal_id string

    Role_definition_id *string

    Role_definition_name *string

    Scope string

}

// Azurerm_role_assignmentHandler ...
type Azurerm_role_assignmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_role_assignmentHandler) Create(desired *Azurerm_role_assignment) (*Azurerm_role_assignment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_role_assignment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_role_assignmentHandler) Read(externalID string) (*Azurerm_role_assignment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_role_assignment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_role_assignment{ Azurerm_role_assignment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_role_assignmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_role_assignment", externalID)
}

type Azurerm_role_definition_permissions_769 struct {

    Actions *[]string

    Data_actions *[]string

    Not_actions *[]string

    Not_data_actions *[]string

}

type Azurerm_role_definition struct {

    Azurerm_role_definition_id *string `lyra:"ignore"`

    Assignable_scopes []string

    Description *string

    Name string

    Permissions []Azurerm_role_definition_permissions_769

    Role_definition_id *string

    Scope string

}

// Azurerm_role_definitionHandler ...
type Azurerm_role_definitionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_role_definitionHandler) Create(desired *Azurerm_role_definition) (*Azurerm_role_definition, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_role_definition", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_role_definitionHandler) Read(externalID string) (*Azurerm_role_definition, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_role_definition", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_role_definition{ Azurerm_role_definition_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_role_definitionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_role_definition", externalID)
}

type Azurerm_route struct {

    Azurerm_route_id *string `lyra:"ignore"`

    Address_prefix string

    Name string

    Next_hop_in_ip_address *string

    Next_hop_type string

    Resource_group_name string

    Route_table_name string

}

// Azurerm_routeHandler ...
type Azurerm_routeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_routeHandler) Create(desired *Azurerm_route) (*Azurerm_route, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_route", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_routeHandler) Read(externalID string) (*Azurerm_route, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_route", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_route{ Azurerm_route_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_routeHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_route", externalID)
}

type Azurerm_route_table_route_770 struct {

    Address_prefix string

    Name string

    Next_hop_in_ip_address *string

    Next_hop_type string

}

type Azurerm_route_table struct {

    Azurerm_route_table_id *string `lyra:"ignore"`

    Disable_bgp_route_propagation *bool

    Location string

    Name string

    Resource_group_name string

    Route *[]Azurerm_route_table_route_770

    Subnets *[]string

    Tags *map[string]string

}

// Azurerm_route_tableHandler ...
type Azurerm_route_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_route_tableHandler) Create(desired *Azurerm_route_table) (*Azurerm_route_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_route_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_route_tableHandler) Read(externalID string) (*Azurerm_route_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_route_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_route_table{ Azurerm_route_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_route_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_route_table", externalID)
}

type Azurerm_scheduler_job_action_storage_queue_771 struct {

    Message string

    Sas_token string

    Storage_account_name string

    Storage_queue_name string

}

type Azurerm_scheduler_job_action_web_772_authentication_active_directory_773 struct {

    Audience *string

    Client_id string

    Secret string

    Tenant_id string

}

type Azurerm_scheduler_job_action_web_772_authentication_basic_774 struct {

    Password string

    Username string

}

type Azurerm_scheduler_job_action_web_772_authentication_certificate_775 struct {

    Expiration *string

    Password string

    Pfx string

    Subject_name *string

    Thumbprint *string

}

type Azurerm_scheduler_job_action_web_772 struct {

    Authentication_active_directory *[]Azurerm_scheduler_job_action_web_772_authentication_active_directory_773

    Authentication_basic *[]Azurerm_scheduler_job_action_web_772_authentication_basic_774

    Authentication_certificate *[]Azurerm_scheduler_job_action_web_772_authentication_certificate_775

    Body *string

    Headers *map[string]string

    Method string

    Url string

}

type Azurerm_scheduler_job_error_action_storage_queue_776 struct {

    Message string

    Sas_token string

    Storage_account_name string

    Storage_queue_name string

}

type Azurerm_scheduler_job_error_action_web_777_authentication_active_directory_778 struct {

    Audience *string

    Client_id string

    Secret string

    Tenant_id string

}

type Azurerm_scheduler_job_error_action_web_777_authentication_basic_779 struct {

    Password string

    Username string

}

type Azurerm_scheduler_job_error_action_web_777_authentication_certificate_780 struct {

    Expiration *string

    Password string

    Pfx string

    Subject_name *string

    Thumbprint *string

}

type Azurerm_scheduler_job_error_action_web_777 struct {

    Authentication_active_directory *[]Azurerm_scheduler_job_error_action_web_777_authentication_active_directory_778

    Authentication_basic *[]Azurerm_scheduler_job_error_action_web_777_authentication_basic_779

    Authentication_certificate *[]Azurerm_scheduler_job_error_action_web_777_authentication_certificate_780

    Body *string

    Headers *map[string]string

    Method string

    Url string

}

type Azurerm_scheduler_job_recurrence_781_monthly_occurrences_782 struct {

    Day string

    Occurrence int

}

type Azurerm_scheduler_job_recurrence_781 struct {

    Count *int

    End_time *string

    Frequency string

    Hours *[]int

    Interval *int

    Minutes *[]int

    Month_days *[]int

    Monthly_occurrences *[]Azurerm_scheduler_job_recurrence_781_monthly_occurrences_782

    Week_days *[]string

}

type Azurerm_scheduler_job_retry_783 struct {

    Count *int

    Interval *string

}

type Azurerm_scheduler_job struct {

    Azurerm_scheduler_job_id *string `lyra:"ignore"`

    Action_storage_queue *[]Azurerm_scheduler_job_action_storage_queue_771

    Action_web *[]Azurerm_scheduler_job_action_web_772

    Error_action_storage_queue *[]Azurerm_scheduler_job_error_action_storage_queue_776

    Error_action_web *[]Azurerm_scheduler_job_error_action_web_777

    Job_collection_name string

    Name string

    Recurrence *[]Azurerm_scheduler_job_recurrence_781

    Resource_group_name string

    Retry *[]Azurerm_scheduler_job_retry_783

    Start_time *string

    State *string

}

// Azurerm_scheduler_jobHandler ...
type Azurerm_scheduler_jobHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_scheduler_jobHandler) Create(desired *Azurerm_scheduler_job) (*Azurerm_scheduler_job, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_scheduler_job", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_scheduler_jobHandler) Read(externalID string) (*Azurerm_scheduler_job, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_scheduler_job", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_scheduler_job{ Azurerm_scheduler_job_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_scheduler_jobHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_scheduler_job", externalID)
}

type Azurerm_scheduler_job_collection_quota_784 struct {

    Max_job_count *int

    Max_recurrence_frequency string

    Max_recurrence_interval *int

    Max_retry_interval *int

}

type Azurerm_scheduler_job_collection struct {

    Azurerm_scheduler_job_collection_id *string `lyra:"ignore"`

    Location string

    Name string

    Quota *[]Azurerm_scheduler_job_collection_quota_784

    Resource_group_name string

    Sku string

    State *string

    Tags *map[string]string

}

// Azurerm_scheduler_job_collectionHandler ...
type Azurerm_scheduler_job_collectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_scheduler_job_collectionHandler) Create(desired *Azurerm_scheduler_job_collection) (*Azurerm_scheduler_job_collection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_scheduler_job_collection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_scheduler_job_collectionHandler) Read(externalID string) (*Azurerm_scheduler_job_collection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_scheduler_job_collection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_scheduler_job_collection{ Azurerm_scheduler_job_collection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_scheduler_job_collectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_scheduler_job_collection", externalID)
}

type Azurerm_search_service struct {

    Azurerm_search_service_id *string `lyra:"ignore"`

    Location string

    Name string

    Partition_count *int

    Primary_key *string

    Replica_count *int

    Resource_group_name string

    Secondary_key *string

    Sku string

    Tags *map[string]string

}

// Azurerm_search_serviceHandler ...
type Azurerm_search_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_search_serviceHandler) Create(desired *Azurerm_search_service) (*Azurerm_search_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_search_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_search_serviceHandler) Read(externalID string) (*Azurerm_search_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_search_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_search_service{ Azurerm_search_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_search_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_search_service", externalID)
}

type Azurerm_security_center_contact struct {

    Azurerm_security_center_contact_id *string `lyra:"ignore"`

    Alert_notifications bool

    Alerts_to_admins bool

    Email string

    Phone string

}

// Azurerm_security_center_contactHandler ...
type Azurerm_security_center_contactHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_security_center_contactHandler) Create(desired *Azurerm_security_center_contact) (*Azurerm_security_center_contact, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_security_center_contact", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_security_center_contactHandler) Read(externalID string) (*Azurerm_security_center_contact, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_security_center_contact", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_security_center_contact{ Azurerm_security_center_contact_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_security_center_contactHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_security_center_contact", externalID)
}

type Azurerm_security_center_subscription_pricing struct {

    Azurerm_security_center_subscription_pricing_id *string `lyra:"ignore"`

    Tier string

}

// Azurerm_security_center_subscription_pricingHandler ...
type Azurerm_security_center_subscription_pricingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_security_center_subscription_pricingHandler) Create(desired *Azurerm_security_center_subscription_pricing) (*Azurerm_security_center_subscription_pricing, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_security_center_subscription_pricing", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_security_center_subscription_pricingHandler) Read(externalID string) (*Azurerm_security_center_subscription_pricing, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_security_center_subscription_pricing", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_security_center_subscription_pricing{ Azurerm_security_center_subscription_pricing_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_security_center_subscription_pricingHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_security_center_subscription_pricing", externalID)
}

type Azurerm_security_center_workspace struct {

    Azurerm_security_center_workspace_id *string `lyra:"ignore"`

    Scope string

    Workspace_id string

}

// Azurerm_security_center_workspaceHandler ...
type Azurerm_security_center_workspaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_security_center_workspaceHandler) Create(desired *Azurerm_security_center_workspace) (*Azurerm_security_center_workspace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_security_center_workspace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_security_center_workspaceHandler) Read(externalID string) (*Azurerm_security_center_workspace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_security_center_workspace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_security_center_workspace{ Azurerm_security_center_workspace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_security_center_workspaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_security_center_workspace", externalID)
}

type Azurerm_service_fabric_cluster_azure_active_directory_785 struct {

    Client_application_id string

    Cluster_application_id string

    Tenant_id string

}

type Azurerm_service_fabric_cluster_certificate_786 struct {

    Thumbprint string

    Thumbprint_secondary *string

    X509_store_name string

}

type Azurerm_service_fabric_cluster_client_certificate_thumbprint_787 struct {

    Is_admin bool

    Thumbprint string

}

type Azurerm_service_fabric_cluster_diagnostics_config_788 struct {

    Blob_endpoint string

    Protected_account_key_name string

    Queue_endpoint string

    Storage_account_name string

    Table_endpoint string

}

type Azurerm_service_fabric_cluster_fabric_settings_789 struct {

    Name string

    Parameters *map[string]string

}

type Azurerm_service_fabric_cluster_node_type_790_application_ports_791 struct {

    End_port int

    Start_port int

}

type Azurerm_service_fabric_cluster_node_type_790_ephemeral_ports_792 struct {

    End_port int

    Start_port int

}

type Azurerm_service_fabric_cluster_node_type_790 struct {

    Application_ports *[]Azurerm_service_fabric_cluster_node_type_790_application_ports_791

    Client_endpoint_port int

    Durability_level *string

    Ephemeral_ports *[]Azurerm_service_fabric_cluster_node_type_790_ephemeral_ports_792

    Http_endpoint_port int

    Instance_count int

    Is_primary bool

    Name string

    Reverse_proxy_endpoint_port *int

}

type Azurerm_service_fabric_cluster_reverse_proxy_certificate_793 struct {

    Thumbprint string

    Thumbprint_secondary *string

    X509_store_name string

}

type Azurerm_service_fabric_cluster struct {

    Azurerm_service_fabric_cluster_id *string `lyra:"ignore"`

    Add_on_features *[]string

    Azure_active_directory *[]Azurerm_service_fabric_cluster_azure_active_directory_785

    Certificate *[]Azurerm_service_fabric_cluster_certificate_786

    Client_certificate_thumbprint *[]Azurerm_service_fabric_cluster_client_certificate_thumbprint_787

    Cluster_code_version *string

    Cluster_endpoint *string

    Diagnostics_config *[]Azurerm_service_fabric_cluster_diagnostics_config_788

    Fabric_settings *[]Azurerm_service_fabric_cluster_fabric_settings_789

    Location string

    Management_endpoint string

    Name string

    Node_type []Azurerm_service_fabric_cluster_node_type_790

    Reliability_level string

    Resource_group_name string

    Reverse_proxy_certificate *[]Azurerm_service_fabric_cluster_reverse_proxy_certificate_793

    Tags *map[string]string

    Upgrade_mode string

    Vm_image string

}

// Azurerm_service_fabric_clusterHandler ...
type Azurerm_service_fabric_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_service_fabric_clusterHandler) Create(desired *Azurerm_service_fabric_cluster) (*Azurerm_service_fabric_cluster, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_service_fabric_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_service_fabric_clusterHandler) Read(externalID string) (*Azurerm_service_fabric_cluster, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_service_fabric_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_service_fabric_cluster{ Azurerm_service_fabric_cluster_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_service_fabric_clusterHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_service_fabric_cluster", externalID)
}

type Azurerm_servicebus_namespace struct {

    Azurerm_servicebus_namespace_id *string `lyra:"ignore"`

    Capacity *int

    Default_primary_connection_string *string

    Default_primary_key *string

    Default_secondary_connection_string *string

    Default_secondary_key *string

    Location string

    Name string

    Resource_group_name string

    Sku string

    Tags *map[string]string

}

// Azurerm_servicebus_namespaceHandler ...
type Azurerm_servicebus_namespaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_namespaceHandler) Create(desired *Azurerm_servicebus_namespace) (*Azurerm_servicebus_namespace, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_namespace", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_namespaceHandler) Read(externalID string) (*Azurerm_servicebus_namespace, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_namespace", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_namespace{ Azurerm_servicebus_namespace_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_namespaceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_namespace", externalID)
}

type Azurerm_servicebus_namespace_authorization_rule struct {

    Azurerm_servicebus_namespace_authorization_rule_id *string `lyra:"ignore"`

    Listen *bool

    Manage *bool

    Name string

    Namespace_name string

    Primary_connection_string *string

    Primary_key *string

    Resource_group_name string

    Secondary_connection_string *string

    Secondary_key *string

    Send *bool

}

// Azurerm_servicebus_namespace_authorization_ruleHandler ...
type Azurerm_servicebus_namespace_authorization_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_namespace_authorization_ruleHandler) Create(desired *Azurerm_servicebus_namespace_authorization_rule) (*Azurerm_servicebus_namespace_authorization_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_namespace_authorization_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_namespace_authorization_ruleHandler) Read(externalID string) (*Azurerm_servicebus_namespace_authorization_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_namespace_authorization_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_namespace_authorization_rule{ Azurerm_servicebus_namespace_authorization_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_namespace_authorization_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_namespace_authorization_rule", externalID)
}

type Azurerm_servicebus_queue struct {

    Azurerm_servicebus_queue_id *string `lyra:"ignore"`

    Auto_delete_on_idle *string

    Dead_lettering_on_message_expiration *bool

    Default_message_ttl *string

    Duplicate_detection_history_time_window *string

    Enable_batched_operations *bool

    Enable_express *bool

    Enable_partitioning *bool

    Location *string

    Lock_duration *string

    Max_delivery_count *int

    Max_size_in_megabytes *int

    Name string

    Namespace_name string

    Requires_duplicate_detection *bool

    Requires_session *bool

    Resource_group_name string

    Support_ordering *bool

}

// Azurerm_servicebus_queueHandler ...
type Azurerm_servicebus_queueHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_queueHandler) Create(desired *Azurerm_servicebus_queue) (*Azurerm_servicebus_queue, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_queue", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_queueHandler) Read(externalID string) (*Azurerm_servicebus_queue, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_queue", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_queue{ Azurerm_servicebus_queue_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_queueHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_queue", externalID)
}

type Azurerm_servicebus_queue_authorization_rule struct {

    Azurerm_servicebus_queue_authorization_rule_id *string `lyra:"ignore"`

    Listen *bool

    Manage *bool

    Name string

    Namespace_name string

    Primary_connection_string *string

    Primary_key *string

    Queue_name string

    Resource_group_name string

    Secondary_connection_string *string

    Secondary_key *string

    Send *bool

}

// Azurerm_servicebus_queue_authorization_ruleHandler ...
type Azurerm_servicebus_queue_authorization_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_queue_authorization_ruleHandler) Create(desired *Azurerm_servicebus_queue_authorization_rule) (*Azurerm_servicebus_queue_authorization_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_queue_authorization_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_queue_authorization_ruleHandler) Read(externalID string) (*Azurerm_servicebus_queue_authorization_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_queue_authorization_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_queue_authorization_rule{ Azurerm_servicebus_queue_authorization_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_queue_authorization_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_queue_authorization_rule", externalID)
}

type Azurerm_servicebus_subscription struct {

    Azurerm_servicebus_subscription_id *string `lyra:"ignore"`

    Auto_delete_on_idle *string

    Dead_lettering_on_filter_evaluation_exceptions *bool

    Dead_lettering_on_message_expiration *bool

    Default_message_ttl *string

    Enable_batched_operations *bool

    Forward_to *string

    Location *string

    Lock_duration *string

    Max_delivery_count int

    Name string

    Namespace_name string

    Requires_session *bool

    Resource_group_name string

    Topic_name string

}

// Azurerm_servicebus_subscriptionHandler ...
type Azurerm_servicebus_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_subscriptionHandler) Create(desired *Azurerm_servicebus_subscription) (*Azurerm_servicebus_subscription, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_subscriptionHandler) Read(externalID string) (*Azurerm_servicebus_subscription, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_subscription{ Azurerm_servicebus_subscription_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_subscriptionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_subscription", externalID)
}

type Azurerm_servicebus_subscription_rule_correlation_filter_794 struct {

    Content_type *string

    Correlation_id *string

    Label *string

    Message_id *string

    Reply_to *string

    Reply_to_session_id *string

    Session_id *string

    To *string

}

type Azurerm_servicebus_subscription_rule struct {

    Azurerm_servicebus_subscription_rule_id *string `lyra:"ignore"`

    Action *string

    Correlation_filter *[]Azurerm_servicebus_subscription_rule_correlation_filter_794

    Filter_type string

    Name string

    Namespace_name string

    Resource_group_name string

    Sql_filter *string

    Subscription_name string

    Topic_name string

}

// Azurerm_servicebus_subscription_ruleHandler ...
type Azurerm_servicebus_subscription_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_subscription_ruleHandler) Create(desired *Azurerm_servicebus_subscription_rule) (*Azurerm_servicebus_subscription_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_subscription_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_subscription_ruleHandler) Read(externalID string) (*Azurerm_servicebus_subscription_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_subscription_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_subscription_rule{ Azurerm_servicebus_subscription_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_subscription_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_subscription_rule", externalID)
}

type Azurerm_servicebus_topic struct {

    Azurerm_servicebus_topic_id *string `lyra:"ignore"`

    Auto_delete_on_idle *string

    Default_message_ttl *string

    Duplicate_detection_history_time_window *string

    Enable_batched_operations *bool

    Enable_express *bool

    Enable_filtering_messages_before_publishing *bool

    Enable_partitioning *bool

    Location *string

    Max_size_in_megabytes *int

    Name string

    Namespace_name string

    Requires_duplicate_detection *bool

    Resource_group_name string

    Status *string

    Support_ordering *bool

}

// Azurerm_servicebus_topicHandler ...
type Azurerm_servicebus_topicHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_topicHandler) Create(desired *Azurerm_servicebus_topic) (*Azurerm_servicebus_topic, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_topic", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_topicHandler) Read(externalID string) (*Azurerm_servicebus_topic, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_topic", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_topic{ Azurerm_servicebus_topic_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_topicHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_topic", externalID)
}

type Azurerm_servicebus_topic_authorization_rule struct {

    Azurerm_servicebus_topic_authorization_rule_id *string `lyra:"ignore"`

    Listen *bool

    Manage *bool

    Name string

    Namespace_name string

    Primary_connection_string *string

    Primary_key *string

    Resource_group_name string

    Secondary_connection_string *string

    Secondary_key *string

    Send *bool

    Topic_name string

}

// Azurerm_servicebus_topic_authorization_ruleHandler ...
type Azurerm_servicebus_topic_authorization_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_servicebus_topic_authorization_ruleHandler) Create(desired *Azurerm_servicebus_topic_authorization_rule) (*Azurerm_servicebus_topic_authorization_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_servicebus_topic_authorization_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_servicebus_topic_authorization_ruleHandler) Read(externalID string) (*Azurerm_servicebus_topic_authorization_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_servicebus_topic_authorization_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_servicebus_topic_authorization_rule{ Azurerm_servicebus_topic_authorization_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_servicebus_topic_authorization_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_servicebus_topic_authorization_rule", externalID)
}

type Azurerm_shared_image_identifier_795 struct {

    Offer string

    Publisher string

    Sku string

}

type Azurerm_shared_image struct {

    Azurerm_shared_image_id *string `lyra:"ignore"`

    Description *string

    Eula *string

    Gallery_name string

    Identifier []Azurerm_shared_image_identifier_795

    Location string

    Name string

    Os_type string

    Privacy_statement_uri *string

    Release_note_uri *string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_shared_imageHandler ...
type Azurerm_shared_imageHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_shared_imageHandler) Create(desired *Azurerm_shared_image) (*Azurerm_shared_image, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_shared_image", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_shared_imageHandler) Read(externalID string) (*Azurerm_shared_image, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_shared_image", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_shared_image{ Azurerm_shared_image_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_shared_imageHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_shared_image", externalID)
}

type Azurerm_shared_image_gallery struct {

    Azurerm_shared_image_gallery_id *string `lyra:"ignore"`

    Description *string

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

    Unique_name *string

}

// Azurerm_shared_image_galleryHandler ...
type Azurerm_shared_image_galleryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_shared_image_galleryHandler) Create(desired *Azurerm_shared_image_gallery) (*Azurerm_shared_image_gallery, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_shared_image_gallery", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_shared_image_galleryHandler) Read(externalID string) (*Azurerm_shared_image_gallery, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_shared_image_gallery", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_shared_image_gallery{ Azurerm_shared_image_gallery_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_shared_image_galleryHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_shared_image_gallery", externalID)
}

type Azurerm_shared_image_version_target_region_796 struct {

    Name string

    Regional_replica_count int

}

type Azurerm_shared_image_version struct {

    Azurerm_shared_image_version_id *string `lyra:"ignore"`

    Exclude_from_latest *bool

    Gallery_name string

    Image_name string

    Location string

    Managed_image_id string

    Name string

    Resource_group_name string

    Tags *map[string]string

    Target_region []Azurerm_shared_image_version_target_region_796

}

// Azurerm_shared_image_versionHandler ...
type Azurerm_shared_image_versionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_shared_image_versionHandler) Create(desired *Azurerm_shared_image_version) (*Azurerm_shared_image_version, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_shared_image_version", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_shared_image_versionHandler) Read(externalID string) (*Azurerm_shared_image_version, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_shared_image_version", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_shared_image_version{ Azurerm_shared_image_version_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_shared_image_versionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_shared_image_version", externalID)
}

type Azurerm_signalr_service_sku_797 struct {

    Capacity int

    Name string

}

type Azurerm_signalr_service struct {

    Azurerm_signalr_service_id *string `lyra:"ignore"`

    Hostname *string

    Ip_address *string

    Location string

    Name string

    Public_port *int

    Resource_group_name string

    Server_port *int

    Sku []Azurerm_signalr_service_sku_797

    Tags *map[string]string

}

// Azurerm_signalr_serviceHandler ...
type Azurerm_signalr_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_signalr_serviceHandler) Create(desired *Azurerm_signalr_service) (*Azurerm_signalr_service, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_signalr_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_signalr_serviceHandler) Read(externalID string) (*Azurerm_signalr_service, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_signalr_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_signalr_service{ Azurerm_signalr_service_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_signalr_serviceHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_signalr_service", externalID)
}

type Azurerm_snapshot_encryption_settings_798_disk_encryption_key_799 struct {

    Secret_url string

    Source_vault_id string

}

type Azurerm_snapshot_encryption_settings_798_key_encryption_key_800 struct {

    Key_url string

    Source_vault_id string

}

type Azurerm_snapshot_encryption_settings_798 struct {

    Disk_encryption_key *[]Azurerm_snapshot_encryption_settings_798_disk_encryption_key_799

    Enabled bool

    Key_encryption_key *[]Azurerm_snapshot_encryption_settings_798_key_encryption_key_800

}

type Azurerm_snapshot struct {

    Azurerm_snapshot_id *string `lyra:"ignore"`

    Create_option string

    Disk_size_gb *int

    Encryption_settings *[]Azurerm_snapshot_encryption_settings_798

    Location string

    Name string

    Resource_group_name string

    Source_resource_id *string

    Source_uri *string

    Storage_account_id *string

    Tags *map[string]string

}

// Azurerm_snapshotHandler ...
type Azurerm_snapshotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_snapshotHandler) Create(desired *Azurerm_snapshot) (*Azurerm_snapshot, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_snapshot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_snapshotHandler) Read(externalID string) (*Azurerm_snapshot, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_snapshot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_snapshot{ Azurerm_snapshot_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_snapshotHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_snapshot", externalID)
}

type Azurerm_sql_active_directory_administrator struct {

    Azurerm_sql_active_directory_administrator_id *string `lyra:"ignore"`

    Login string

    Object_id string

    Resource_group_name string

    Server_name string

    Tenant_id string

}

// Azurerm_sql_active_directory_administratorHandler ...
type Azurerm_sql_active_directory_administratorHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_sql_active_directory_administratorHandler) Create(desired *Azurerm_sql_active_directory_administrator) (*Azurerm_sql_active_directory_administrator, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_sql_active_directory_administrator", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_sql_active_directory_administratorHandler) Read(externalID string) (*Azurerm_sql_active_directory_administrator, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_sql_active_directory_administrator", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_sql_active_directory_administrator{ Azurerm_sql_active_directory_administrator_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_sql_active_directory_administratorHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_sql_active_directory_administrator", externalID)
}

type Azurerm_sql_database_import_801 struct {

    Administrator_login string

    Administrator_login_password string

    Authentication_type string

    Operation_mode *string

    Storage_key string

    Storage_key_type string

    Storage_uri string

}

type Azurerm_sql_database_threat_detection_policy_802 struct {

    Disabled_alerts *[]string

    Email_account_admins *string

    Email_addresses *[]string

    Retention_days *int

    State *string

    Storage_account_access_key *string

    Storage_endpoint *string

    Use_server_default *string

}

type Azurerm_sql_database struct {

    Azurerm_sql_database_id *string `lyra:"ignore"`

    Collation *string

    Create_mode *string

    Creation_date *string

    Default_secondary_location *string

    Edition *string

    Elastic_pool_name *string

    Encryption *string

    Import *[]Azurerm_sql_database_import_801

    Location string

    Max_size_bytes *string

    Name string

    Requested_service_objective_id *string

    Requested_service_objective_name *string

    Resource_group_name string

    Restore_point_in_time *string

    Server_name string

    Source_database_deletion_date *string

    Source_database_id *string

    Tags *map[string]string

    Threat_detection_policy *[]Azurerm_sql_database_threat_detection_policy_802

}

// Azurerm_sql_databaseHandler ...
type Azurerm_sql_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_sql_databaseHandler) Create(desired *Azurerm_sql_database) (*Azurerm_sql_database, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_sql_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_sql_databaseHandler) Read(externalID string) (*Azurerm_sql_database, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_sql_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_sql_database{ Azurerm_sql_database_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_sql_databaseHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_sql_database", externalID)
}

type Azurerm_sql_elasticpool struct {

    Azurerm_sql_elasticpool_id *string `lyra:"ignore"`

    Creation_date *string

    Db_dtu_max *int

    Db_dtu_min *int

    Dtu int

    Edition string

    Location string

    Name string

    Pool_size *int

    Resource_group_name string

    Server_name string

    Tags *map[string]string

}

// Azurerm_sql_elasticpoolHandler ...
type Azurerm_sql_elasticpoolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_sql_elasticpoolHandler) Create(desired *Azurerm_sql_elasticpool) (*Azurerm_sql_elasticpool, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_sql_elasticpool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_sql_elasticpoolHandler) Read(externalID string) (*Azurerm_sql_elasticpool, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_sql_elasticpool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_sql_elasticpool{ Azurerm_sql_elasticpool_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_sql_elasticpoolHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_sql_elasticpool", externalID)
}

type Azurerm_sql_firewall_rule struct {

    Azurerm_sql_firewall_rule_id *string `lyra:"ignore"`

    End_ip_address string

    Name string

    Resource_group_name string

    Server_name string

    Start_ip_address string

}

// Azurerm_sql_firewall_ruleHandler ...
type Azurerm_sql_firewall_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_sql_firewall_ruleHandler) Create(desired *Azurerm_sql_firewall_rule) (*Azurerm_sql_firewall_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_sql_firewall_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_sql_firewall_ruleHandler) Read(externalID string) (*Azurerm_sql_firewall_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_sql_firewall_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_sql_firewall_rule{ Azurerm_sql_firewall_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_sql_firewall_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_sql_firewall_rule", externalID)
}

type Azurerm_sql_server struct {

    Azurerm_sql_server_id *string `lyra:"ignore"`

    Administrator_login string

    Administrator_login_password string

    Fully_qualified_domain_name *string

    Location string

    Name string

    Resource_group_name string

    Tags *map[string]string

    Version string

}

// Azurerm_sql_serverHandler ...
type Azurerm_sql_serverHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_sql_serverHandler) Create(desired *Azurerm_sql_server) (*Azurerm_sql_server, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_sql_server", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_sql_serverHandler) Read(externalID string) (*Azurerm_sql_server, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_sql_server", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_sql_server{ Azurerm_sql_server_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_sql_serverHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_sql_server", externalID)
}

type Azurerm_sql_virtual_network_rule struct {

    Azurerm_sql_virtual_network_rule_id *string `lyra:"ignore"`

    Ignore_missing_vnet_service_endpoint *bool

    Name string

    Resource_group_name string

    Server_name string

    Subnet_id string

}

// Azurerm_sql_virtual_network_ruleHandler ...
type Azurerm_sql_virtual_network_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_sql_virtual_network_ruleHandler) Create(desired *Azurerm_sql_virtual_network_rule) (*Azurerm_sql_virtual_network_rule, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_sql_virtual_network_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_sql_virtual_network_ruleHandler) Read(externalID string) (*Azurerm_sql_virtual_network_rule, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_sql_virtual_network_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_sql_virtual_network_rule{ Azurerm_sql_virtual_network_rule_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_sql_virtual_network_ruleHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_sql_virtual_network_rule", externalID)
}

type Azurerm_storage_account_custom_domain_803 struct {

    Name string

    Use_subdomain *bool

}

type Azurerm_storage_account_identity_804 struct {

    Principal_id *string

    Tenant_id *string

    Type string

}

type Azurerm_storage_account_network_rules_805 struct {

    Bypass *[]string

    Ip_rules *[]string

    Virtual_network_subnet_ids *[]string

}

type Azurerm_storage_account struct {

    Azurerm_storage_account_id *string `lyra:"ignore"`

    Access_tier *string

    Account_encryption_source *string

    Account_kind *string

    Account_replication_type string

    Account_tier string

    Account_type *string

    Custom_domain *[]Azurerm_storage_account_custom_domain_803

    Enable_blob_encryption *bool

    Enable_file_encryption *bool

    Enable_https_traffic_only *bool

    Identity *[]Azurerm_storage_account_identity_804

    Location string

    Name string

    Network_rules *[]Azurerm_storage_account_network_rules_805

    Primary_access_key *string

    Primary_blob_connection_string *string

    Primary_blob_endpoint *string

    Primary_connection_string *string

    Primary_file_endpoint *string

    Primary_location *string

    Primary_queue_endpoint *string

    Primary_table_endpoint *string

    Resource_group_name string

    Secondary_access_key *string

    Secondary_blob_connection_string *string

    Secondary_blob_endpoint *string

    Secondary_connection_string *string

    Secondary_location *string

    Secondary_queue_endpoint *string

    Secondary_table_endpoint *string

    Tags *map[string]string

}

// Azurerm_storage_accountHandler ...
type Azurerm_storage_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_storage_accountHandler) Create(desired *Azurerm_storage_account) (*Azurerm_storage_account, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_storage_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_storage_accountHandler) Read(externalID string) (*Azurerm_storage_account, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_storage_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_storage_account{ Azurerm_storage_account_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_storage_accountHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_storage_account", externalID)
}

type Azurerm_storage_blob struct {

    Azurerm_storage_blob_id *string `lyra:"ignore"`

    Attempts *int

    Content_type *string

    Name string

    Parallelism *int

    Resource_group_name string

    Size *int

    Source *string

    Source_uri *string

    Storage_account_name string

    Storage_container_name string

    Type *string

    Url *string

}

// Azurerm_storage_blobHandler ...
type Azurerm_storage_blobHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_storage_blobHandler) Create(desired *Azurerm_storage_blob) (*Azurerm_storage_blob, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_storage_blob", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_storage_blobHandler) Read(externalID string) (*Azurerm_storage_blob, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_storage_blob", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_storage_blob{ Azurerm_storage_blob_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_storage_blobHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_storage_blob", externalID)
}

type Azurerm_storage_container struct {

    Azurerm_storage_container_id *string `lyra:"ignore"`

    Container_access_type *string

    Name string

    Properties *map[string]string

    Resource_group_name string

    Storage_account_name string

}

// Azurerm_storage_containerHandler ...
type Azurerm_storage_containerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_storage_containerHandler) Create(desired *Azurerm_storage_container) (*Azurerm_storage_container, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_storage_container", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_storage_containerHandler) Read(externalID string) (*Azurerm_storage_container, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_storage_container", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_storage_container{ Azurerm_storage_container_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_storage_containerHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_storage_container", externalID)
}

type Azurerm_storage_queue struct {

    Azurerm_storage_queue_id *string `lyra:"ignore"`

    Name string

    Resource_group_name string

    Storage_account_name string

}

// Azurerm_storage_queueHandler ...
type Azurerm_storage_queueHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_storage_queueHandler) Create(desired *Azurerm_storage_queue) (*Azurerm_storage_queue, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_storage_queue", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_storage_queueHandler) Read(externalID string) (*Azurerm_storage_queue, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_storage_queue", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_storage_queue{ Azurerm_storage_queue_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_storage_queueHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_storage_queue", externalID)
}

type Azurerm_storage_share struct {

    Azurerm_storage_share_id *string `lyra:"ignore"`

    Name string

    Quota *int

    Resource_group_name string

    Storage_account_name string

    Url *string

}

// Azurerm_storage_shareHandler ...
type Azurerm_storage_shareHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_storage_shareHandler) Create(desired *Azurerm_storage_share) (*Azurerm_storage_share, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_storage_share", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_storage_shareHandler) Read(externalID string) (*Azurerm_storage_share, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_storage_share", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_storage_share{ Azurerm_storage_share_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_storage_shareHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_storage_share", externalID)
}

type Azurerm_storage_table struct {

    Azurerm_storage_table_id *string `lyra:"ignore"`

    Name string

    Resource_group_name string

    Storage_account_name string

}

// Azurerm_storage_tableHandler ...
type Azurerm_storage_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_storage_tableHandler) Create(desired *Azurerm_storage_table) (*Azurerm_storage_table, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_storage_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_storage_tableHandler) Read(externalID string) (*Azurerm_storage_table, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_storage_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_storage_table{ Azurerm_storage_table_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_storage_tableHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_storage_table", externalID)
}

type Azurerm_subnet_delegation_806_service_delegation_807 struct {

    Actions *[]string

    Name string

}

type Azurerm_subnet_delegation_806 struct {

    Name string

    Service_delegation []Azurerm_subnet_delegation_806_service_delegation_807

}

type Azurerm_subnet struct {

    Azurerm_subnet_id *string `lyra:"ignore"`

    Address_prefix string

    Delegation *[]Azurerm_subnet_delegation_806

    Ip_configurations *[]string

    Name string

    Network_security_group_id *string

    Resource_group_name string

    Route_table_id *string

    Service_endpoints *[]string

    Virtual_network_name string

}

// Azurerm_subnetHandler ...
type Azurerm_subnetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_subnetHandler) Create(desired *Azurerm_subnet) (*Azurerm_subnet, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_subnet", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_subnetHandler) Read(externalID string) (*Azurerm_subnet, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_subnet", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_subnet{ Azurerm_subnet_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_subnetHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_subnet", externalID)
}

type Azurerm_subnet_network_security_group_association struct {

    Azurerm_subnet_network_security_group_association_id *string `lyra:"ignore"`

    Network_security_group_id string

    Subnet_id string

}

// Azurerm_subnet_network_security_group_associationHandler ...
type Azurerm_subnet_network_security_group_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_subnet_network_security_group_associationHandler) Create(desired *Azurerm_subnet_network_security_group_association) (*Azurerm_subnet_network_security_group_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_subnet_network_security_group_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_subnet_network_security_group_associationHandler) Read(externalID string) (*Azurerm_subnet_network_security_group_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_subnet_network_security_group_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_subnet_network_security_group_association{ Azurerm_subnet_network_security_group_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_subnet_network_security_group_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_subnet_network_security_group_association", externalID)
}

type Azurerm_subnet_route_table_association struct {

    Azurerm_subnet_route_table_association_id *string `lyra:"ignore"`

    Route_table_id string

    Subnet_id string

}

// Azurerm_subnet_route_table_associationHandler ...
type Azurerm_subnet_route_table_associationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_subnet_route_table_associationHandler) Create(desired *Azurerm_subnet_route_table_association) (*Azurerm_subnet_route_table_association, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_subnet_route_table_association", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_subnet_route_table_associationHandler) Read(externalID string) (*Azurerm_subnet_route_table_association, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_subnet_route_table_association", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_subnet_route_table_association{ Azurerm_subnet_route_table_association_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_subnet_route_table_associationHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_subnet_route_table_association", externalID)
}

type Azurerm_template_deployment struct {

    Azurerm_template_deployment_id *string `lyra:"ignore"`

    Deployment_mode string

    Name string

    Outputs *map[string]string

    Parameters *map[string]string

    Parameters_body *string

    Resource_group_name string

    Template_body *string

}

// Azurerm_template_deploymentHandler ...
type Azurerm_template_deploymentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_template_deploymentHandler) Create(desired *Azurerm_template_deployment) (*Azurerm_template_deployment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_template_deployment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_template_deploymentHandler) Read(externalID string) (*Azurerm_template_deployment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_template_deployment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_template_deployment{ Azurerm_template_deployment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_template_deploymentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_template_deployment", externalID)
}

type Azurerm_traffic_manager_endpoint struct {

    Azurerm_traffic_manager_endpoint_id *string `lyra:"ignore"`

    Endpoint_location *string

    Endpoint_monitor_status *string

    Endpoint_status *string

    Geo_mappings *[]string

    Min_child_endpoints *int

    Name string

    Priority *int

    Profile_name string

    Resource_group_name string

    Target *string

    Target_resource_id *string

    Type string

    Weight *int

}

// Azurerm_traffic_manager_endpointHandler ...
type Azurerm_traffic_manager_endpointHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_traffic_manager_endpointHandler) Create(desired *Azurerm_traffic_manager_endpoint) (*Azurerm_traffic_manager_endpoint, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_traffic_manager_endpoint", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_traffic_manager_endpointHandler) Read(externalID string) (*Azurerm_traffic_manager_endpoint, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_traffic_manager_endpoint", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_traffic_manager_endpoint{ Azurerm_traffic_manager_endpoint_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_traffic_manager_endpointHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_traffic_manager_endpoint", externalID)
}

type Azurerm_traffic_manager_profile_dns_config_808 struct {

    Relative_name string

    Ttl int

}

type Azurerm_traffic_manager_profile_monitor_config_809 struct {

    Path *string

    Port int

    Protocol string

}

type Azurerm_traffic_manager_profile struct {

    Azurerm_traffic_manager_profile_id *string `lyra:"ignore"`

    Dns_config []Azurerm_traffic_manager_profile_dns_config_808

    Fqdn *string

    Monitor_config []Azurerm_traffic_manager_profile_monitor_config_809

    Name string

    Profile_status *string

    Resource_group_name string

    Tags *map[string]string

    Traffic_routing_method string

}

// Azurerm_traffic_manager_profileHandler ...
type Azurerm_traffic_manager_profileHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_traffic_manager_profileHandler) Create(desired *Azurerm_traffic_manager_profile) (*Azurerm_traffic_manager_profile, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_traffic_manager_profile", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_traffic_manager_profileHandler) Read(externalID string) (*Azurerm_traffic_manager_profile, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_traffic_manager_profile", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_traffic_manager_profile{ Azurerm_traffic_manager_profile_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_traffic_manager_profileHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_traffic_manager_profile", externalID)
}

type Azurerm_user_assigned_identity struct {

    Azurerm_user_assigned_identity_id *string `lyra:"ignore"`

    Client_id *string

    Location string

    Name string

    Principal_id *string

    Resource_group_name string

    Tags *map[string]string

}

// Azurerm_user_assigned_identityHandler ...
type Azurerm_user_assigned_identityHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_user_assigned_identityHandler) Create(desired *Azurerm_user_assigned_identity) (*Azurerm_user_assigned_identity, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_user_assigned_identity", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_user_assigned_identityHandler) Read(externalID string) (*Azurerm_user_assigned_identity, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_user_assigned_identity", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_user_assigned_identity{ Azurerm_user_assigned_identity_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_user_assigned_identityHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_user_assigned_identity", externalID)
}

type Azurerm_virtual_machine_boot_diagnostics_810 struct {

    Enabled bool

    Storage_uri string

}

type Azurerm_virtual_machine_identity_811 struct {

    Identity_ids *[]string

    Principal_id *string

    Type string

}

type Azurerm_virtual_machine_os_profile_812 struct {

    Admin_password *string

    Admin_username string

    Computer_name string

    Custom_data *string

}

type Azurerm_virtual_machine_os_profile_linux_config_813_ssh_keys_814 struct {

    Key_data string

    Path string

}

type Azurerm_virtual_machine_os_profile_linux_config_813 struct {

    Disable_password_authentication bool

    Ssh_keys *[]Azurerm_virtual_machine_os_profile_linux_config_813_ssh_keys_814

}

type Azurerm_virtual_machine_os_profile_secrets_815_vault_certificates_816 struct {

    Certificate_store *string

    Certificate_url string

}

type Azurerm_virtual_machine_os_profile_secrets_815 struct {

    Source_vault_id string

    Vault_certificates *[]Azurerm_virtual_machine_os_profile_secrets_815_vault_certificates_816

}

type Azurerm_virtual_machine_os_profile_windows_config_817_additional_unattend_config_818 struct {

    Component string

    Content string

    Pass string

    Setting_name string

}

type Azurerm_virtual_machine_os_profile_windows_config_817_winrm_819 struct {

    Certificate_url *string

    Protocol string

}

type Azurerm_virtual_machine_os_profile_windows_config_817 struct {

    Additional_unattend_config *[]Azurerm_virtual_machine_os_profile_windows_config_817_additional_unattend_config_818

    Enable_automatic_upgrades *bool

    Provision_vm_agent *bool

    Timezone *string

    Winrm *[]Azurerm_virtual_machine_os_profile_windows_config_817_winrm_819

}

type Azurerm_virtual_machine_plan_820 struct {

    Name string

    Product string

    Publisher string

}

type Azurerm_virtual_machine_storage_data_disk_821 struct {

    Caching *string

    Create_option string

    Disk_size_gb *int

    Lun int

    Managed_disk_id *string

    Managed_disk_type *string

    Name string

    Vhd_uri *string

    Write_accelerator_enabled *bool

}

type Azurerm_virtual_machine_storage_image_reference_822 struct {

    Id *string

    Offer *string

    Publisher *string

    Sku *string

    Version *string

}

type Azurerm_virtual_machine_storage_os_disk_823 struct {

    Caching *string

    Create_option string

    Disk_size_gb *int

    Image_uri *string

    Managed_disk_id *string

    Managed_disk_type *string

    Name string

    Os_type *string

    Vhd_uri *string

    Write_accelerator_enabled *bool

}

type Azurerm_virtual_machine struct {

    Azurerm_virtual_machine_id *string `lyra:"ignore"`

    Availability_set_id *string

    Boot_diagnostics *[]Azurerm_virtual_machine_boot_diagnostics_810

    Delete_data_disks_on_termination *bool

    Delete_os_disk_on_termination *bool

    Identity *[]Azurerm_virtual_machine_identity_811

    License_type *string

    Location string

    Name string

    Network_interface_ids []string

    Os_profile *[]Azurerm_virtual_machine_os_profile_812

    Os_profile_linux_config *[]Azurerm_virtual_machine_os_profile_linux_config_813

    Os_profile_secrets *[]Azurerm_virtual_machine_os_profile_secrets_815

    Os_profile_windows_config *[]Azurerm_virtual_machine_os_profile_windows_config_817

    Plan *[]Azurerm_virtual_machine_plan_820

    Primary_network_interface_id *string

    Resource_group_name string

    Storage_data_disk *[]Azurerm_virtual_machine_storage_data_disk_821

    Storage_image_reference *[]Azurerm_virtual_machine_storage_image_reference_822

    Storage_os_disk []Azurerm_virtual_machine_storage_os_disk_823

    Tags *map[string]string

    Vm_size string

    Zones *[]string

}

// Azurerm_virtual_machineHandler ...
type Azurerm_virtual_machineHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_machineHandler) Create(desired *Azurerm_virtual_machine) (*Azurerm_virtual_machine, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_machine", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_machineHandler) Read(externalID string) (*Azurerm_virtual_machine, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_machine", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_machine{ Azurerm_virtual_machine_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_machineHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_machine", externalID)
}

type Azurerm_virtual_machine_data_disk_attachment struct {

    Azurerm_virtual_machine_data_disk_attachment_id *string `lyra:"ignore"`

    Caching string

    Create_option *string

    Lun int

    Managed_disk_id string

    Virtual_machine_id string

    Write_accelerator_enabled *bool

}

// Azurerm_virtual_machine_data_disk_attachmentHandler ...
type Azurerm_virtual_machine_data_disk_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_machine_data_disk_attachmentHandler) Create(desired *Azurerm_virtual_machine_data_disk_attachment) (*Azurerm_virtual_machine_data_disk_attachment, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_machine_data_disk_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_machine_data_disk_attachmentHandler) Read(externalID string) (*Azurerm_virtual_machine_data_disk_attachment, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_machine_data_disk_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_machine_data_disk_attachment{ Azurerm_virtual_machine_data_disk_attachment_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_machine_data_disk_attachmentHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_machine_data_disk_attachment", externalID)
}

type Azurerm_virtual_machine_extension struct {

    Azurerm_virtual_machine_extension_id *string `lyra:"ignore"`

    Auto_upgrade_minor_version *bool

    Location string

    Name string

    Protected_settings *string

    Publisher string

    Resource_group_name string

    Settings *string

    Tags *map[string]string

    Type string

    Type_handler_version string

    Virtual_machine_name string

}

// Azurerm_virtual_machine_extensionHandler ...
type Azurerm_virtual_machine_extensionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_machine_extensionHandler) Create(desired *Azurerm_virtual_machine_extension) (*Azurerm_virtual_machine_extension, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_machine_extension", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_machine_extensionHandler) Read(externalID string) (*Azurerm_virtual_machine_extension, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_machine_extension", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_machine_extension{ Azurerm_virtual_machine_extension_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_machine_extensionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_machine_extension", externalID)
}

type Azurerm_virtual_machine_scale_set_boot_diagnostics_824 struct {

    Enabled *bool

    Storage_uri string

}

type Azurerm_virtual_machine_scale_set_extension_825 struct {

    Auto_upgrade_minor_version *bool

    Name string

    Protected_settings *string

    Publisher string

    Settings *string

    Type string

    Type_handler_version string

}

type Azurerm_virtual_machine_scale_set_identity_826 struct {

    Identity_ids *[]string

    Principal_id *string

    Type string

}

type Azurerm_virtual_machine_scale_set_network_profile_827_dns_settings_828 struct {

    Dns_servers []string

}

type Azurerm_virtual_machine_scale_set_network_profile_827_ip_configuration_829_public_ip_address_configuration_830 struct {

    Domain_name_label string

    Idle_timeout int

    Name string

}

type Azurerm_virtual_machine_scale_set_network_profile_827_ip_configuration_829 struct {

    Application_gateway_backend_address_pool_ids *[]string

    Application_security_group_ids *[]string

    Load_balancer_backend_address_pool_ids *[]string

    Load_balancer_inbound_nat_rules_ids *[]string

    Name string

    Primary bool

    Public_ip_address_configuration *[]Azurerm_virtual_machine_scale_set_network_profile_827_ip_configuration_829_public_ip_address_configuration_830

    Subnet_id string

}

type Azurerm_virtual_machine_scale_set_network_profile_827 struct {

    Accelerated_networking *bool

    Dns_settings *[]Azurerm_virtual_machine_scale_set_network_profile_827_dns_settings_828

    Ip_configuration []Azurerm_virtual_machine_scale_set_network_profile_827_ip_configuration_829

    Ip_forwarding *bool

    Name string

    Network_security_group_id *string

    Primary bool

}

type Azurerm_virtual_machine_scale_set_os_profile_831 struct {

    Admin_password *string

    Admin_username string

    Computer_name_prefix string

    Custom_data *string

}

type Azurerm_virtual_machine_scale_set_os_profile_linux_config_832_ssh_keys_833 struct {

    Key_data *string

    Path string

}

type Azurerm_virtual_machine_scale_set_os_profile_linux_config_832 struct {

    Disable_password_authentication *bool

    Ssh_keys *[]Azurerm_virtual_machine_scale_set_os_profile_linux_config_832_ssh_keys_833

}

type Azurerm_virtual_machine_scale_set_os_profile_secrets_834_vault_certificates_835 struct {

    Certificate_store *string

    Certificate_url string

}

type Azurerm_virtual_machine_scale_set_os_profile_secrets_834 struct {

    Source_vault_id string

    Vault_certificates *[]Azurerm_virtual_machine_scale_set_os_profile_secrets_834_vault_certificates_835

}

type Azurerm_virtual_machine_scale_set_os_profile_windows_config_836_additional_unattend_config_837 struct {

    Component string

    Content string

    Pass string

    Setting_name string

}

type Azurerm_virtual_machine_scale_set_os_profile_windows_config_836_winrm_838 struct {

    Certificate_url *string

    Protocol string

}

type Azurerm_virtual_machine_scale_set_os_profile_windows_config_836 struct {

    Additional_unattend_config *[]Azurerm_virtual_machine_scale_set_os_profile_windows_config_836_additional_unattend_config_837

    Enable_automatic_upgrades *bool

    Provision_vm_agent *bool

    Winrm *[]Azurerm_virtual_machine_scale_set_os_profile_windows_config_836_winrm_838

}

type Azurerm_virtual_machine_scale_set_plan_839 struct {

    Name string

    Product string

    Publisher string

}

type Azurerm_virtual_machine_scale_set_rolling_upgrade_policy_840 struct {

    Max_batch_instance_percent *int

    Max_unhealthy_instance_percent *int

    Max_unhealthy_upgraded_instance_percent *int

    Pause_time_between_batches *string

}

type Azurerm_virtual_machine_scale_set_sku_841 struct {

    Capacity int

    Name string

    Tier *string

}

type Azurerm_virtual_machine_scale_set_storage_profile_data_disk_842 struct {

    Caching *string

    Create_option string

    Disk_size_gb *int

    Lun int

    Managed_disk_type *string

}

type Azurerm_virtual_machine_scale_set_storage_profile_image_reference_843 struct {

    Id *string

    Offer *string

    Publisher *string

    Sku *string

    Version *string

}

type Azurerm_virtual_machine_scale_set_storage_profile_os_disk_844 struct {

    Caching *string

    Create_option string

    Image *string

    Managed_disk_type *string

    Name *string

    Os_type *string

    Vhd_containers *[]string

}

type Azurerm_virtual_machine_scale_set struct {

    Azurerm_virtual_machine_scale_set_id *string `lyra:"ignore"`

    Automatic_os_upgrade *bool

    Boot_diagnostics *[]Azurerm_virtual_machine_scale_set_boot_diagnostics_824

    Eviction_policy *string

    Extension *[]Azurerm_virtual_machine_scale_set_extension_825

    Health_probe_id *string

    Identity *[]Azurerm_virtual_machine_scale_set_identity_826

    License_type *string

    Location string

    Name string

    Network_profile []Azurerm_virtual_machine_scale_set_network_profile_827

    Os_profile []Azurerm_virtual_machine_scale_set_os_profile_831

    Os_profile_linux_config *[]Azurerm_virtual_machine_scale_set_os_profile_linux_config_832

    Os_profile_secrets *[]Azurerm_virtual_machine_scale_set_os_profile_secrets_834

    Os_profile_windows_config *[]Azurerm_virtual_machine_scale_set_os_profile_windows_config_836

    Overprovision *bool

    Plan *[]Azurerm_virtual_machine_scale_set_plan_839

    Priority *string

    Resource_group_name string

    Rolling_upgrade_policy *[]Azurerm_virtual_machine_scale_set_rolling_upgrade_policy_840

    Single_placement_group *bool

    Sku []Azurerm_virtual_machine_scale_set_sku_841

    Storage_profile_data_disk *[]Azurerm_virtual_machine_scale_set_storage_profile_data_disk_842

    Storage_profile_image_reference *[]Azurerm_virtual_machine_scale_set_storage_profile_image_reference_843

    Storage_profile_os_disk []Azurerm_virtual_machine_scale_set_storage_profile_os_disk_844

    Tags *map[string]string

    Upgrade_policy_mode string

    Zones *[]string

}

// Azurerm_virtual_machine_scale_setHandler ...
type Azurerm_virtual_machine_scale_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_machine_scale_setHandler) Create(desired *Azurerm_virtual_machine_scale_set) (*Azurerm_virtual_machine_scale_set, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_machine_scale_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_machine_scale_setHandler) Read(externalID string) (*Azurerm_virtual_machine_scale_set, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_machine_scale_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_machine_scale_set{ Azurerm_virtual_machine_scale_set_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_machine_scale_setHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_machine_scale_set", externalID)
}

type Azurerm_virtual_network_subnet_845 struct {

    Address_prefix string

    Id *string

    Name string

    Security_group *string

}

type Azurerm_virtual_network struct {

    Azurerm_virtual_network_id *string `lyra:"ignore"`

    Address_space []string

    Dns_servers *[]string

    Location string

    Name string

    Resource_group_name string

    Subnet *[]Azurerm_virtual_network_subnet_845

    Tags *map[string]string

}

// Azurerm_virtual_networkHandler ...
type Azurerm_virtual_networkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_networkHandler) Create(desired *Azurerm_virtual_network) (*Azurerm_virtual_network, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_network", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_networkHandler) Read(externalID string) (*Azurerm_virtual_network, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_network", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_network{ Azurerm_virtual_network_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_networkHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_network", externalID)
}

type Azurerm_virtual_network_gateway_bgp_settings_846 struct {

    Asn *int

    Peer_weight *int

    Peering_address *string

}

type Azurerm_virtual_network_gateway_ip_configuration_847 struct {

    Name *string

    Private_ip_address_allocation *string

    Public_ip_address_id *string

    Subnet_id string

}

type Azurerm_virtual_network_gateway_vpn_client_configuration_848_revoked_certificate_849 struct {

    Name string

    Thumbprint string

}

type Azurerm_virtual_network_gateway_vpn_client_configuration_848_root_certificate_850 struct {

    Name string

    Public_cert_data string

}

type Azurerm_virtual_network_gateway_vpn_client_configuration_848 struct {

    Address_space []string

    Radius_server_address *string

    Radius_server_secret *string

    Revoked_certificate *[]Azurerm_virtual_network_gateway_vpn_client_configuration_848_revoked_certificate_849

    Root_certificate *[]Azurerm_virtual_network_gateway_vpn_client_configuration_848_root_certificate_850

    Vpn_client_protocols *[]string

}

type Azurerm_virtual_network_gateway struct {

    Azurerm_virtual_network_gateway_id *string `lyra:"ignore"`

    Active_active *bool

    Bgp_settings *[]Azurerm_virtual_network_gateway_bgp_settings_846

    Default_local_network_gateway_id *string

    Enable_bgp *bool

    Ip_configuration []Azurerm_virtual_network_gateway_ip_configuration_847

    Location string

    Name string

    Resource_group_name string

    Sku string

    Tags *map[string]string

    Type string

    Vpn_client_configuration *[]Azurerm_virtual_network_gateway_vpn_client_configuration_848

    Vpn_type *string

}

// Azurerm_virtual_network_gatewayHandler ...
type Azurerm_virtual_network_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_network_gatewayHandler) Create(desired *Azurerm_virtual_network_gateway) (*Azurerm_virtual_network_gateway, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_network_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_network_gatewayHandler) Read(externalID string) (*Azurerm_virtual_network_gateway, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_network_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_network_gateway{ Azurerm_virtual_network_gateway_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_network_gatewayHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_network_gateway", externalID)
}

type Azurerm_virtual_network_gateway_connection_ipsec_policy_851 struct {

    Dh_group string

    Ike_encryption string

    Ike_integrity string

    Ipsec_encryption string

    Ipsec_integrity string

    Pfs_group string

    Sa_datasize *int

    Sa_lifetime *int

}

type Azurerm_virtual_network_gateway_connection struct {

    Azurerm_virtual_network_gateway_connection_id *string `lyra:"ignore"`

    Authorization_key *string

    Enable_bgp *bool

    Express_route_circuit_id *string

    Ipsec_policy *[]Azurerm_virtual_network_gateway_connection_ipsec_policy_851

    Local_network_gateway_id *string

    Location string

    Name string

    Peer_virtual_network_gateway_id *string

    Resource_group_name string

    Routing_weight *int

    Shared_key *string

    Tags *map[string]string

    Type string

    Use_policy_based_traffic_selectors *bool

    Virtual_network_gateway_id string

}

// Azurerm_virtual_network_gateway_connectionHandler ...
type Azurerm_virtual_network_gateway_connectionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_network_gateway_connectionHandler) Create(desired *Azurerm_virtual_network_gateway_connection) (*Azurerm_virtual_network_gateway_connection, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_network_gateway_connection", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_network_gateway_connectionHandler) Read(externalID string) (*Azurerm_virtual_network_gateway_connection, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_network_gateway_connection", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_network_gateway_connection{ Azurerm_virtual_network_gateway_connection_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_network_gateway_connectionHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_network_gateway_connection", externalID)
}

type Azurerm_virtual_network_peering struct {

    Azurerm_virtual_network_peering_id *string `lyra:"ignore"`

    Allow_forwarded_traffic *bool

    Allow_gateway_transit *bool

    Allow_virtual_network_access *bool

    Name string

    Remote_virtual_network_id string

    Resource_group_name string

    Use_remote_gateways *bool

    Virtual_network_name string

}

// Azurerm_virtual_network_peeringHandler ...
type Azurerm_virtual_network_peeringHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Azurerm_virtual_network_peeringHandler) Create(desired *Azurerm_virtual_network_peering) (*Azurerm_virtual_network_peering, string, error) {
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "azurerm_virtual_network_peering", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Read ...
func (h *Azurerm_virtual_network_peeringHandler) Read(externalID string) (*Azurerm_virtual_network_peering, error) {
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "azurerm_virtual_network_peering", externalID)
	if err != nil {
		return nil, err
	}
	x := &Azurerm_virtual_network_peering{ Azurerm_virtual_network_peering_id: &id }
	bridge.TerraformUnmarshal(actual, x)
	return x, nil
}

// Delete ...
func (h *Azurerm_virtual_network_peeringHandler) Delete(externalID string) error {
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "azurerm_virtual_network_peering", externalID)
}
